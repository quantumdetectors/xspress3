# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

###################################################################
#  This record contains the asyn port name of this detector       #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3,0,5)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control basic information                        #
#  about the detector                                             # 
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):Manufacturer_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3,0,5)MANUFACTURER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):Model_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3,0,5)MODEL")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)MAX_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)MAX_SIZE_Y")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the data type                            # 
###################################################################

record(mbbo, "$(XSPRESS3_PREFIX,undefined):DataType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the color mode                           #
#  These choices must agree with NDColorMode_t in NDArray.h       # 
###################################################################

record(mbbo, "$(XSPRESS3_PREFIX,undefined):ColorMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the detector readout                     #
#  including binning, region start and size                       # 
###################################################################

record(longout, "$(XSPRESS3_PREFIX,undefined):BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)BIN_X")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)BIN_X")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)BIN_Y")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)BIN_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)MIN_X")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)MIN_X")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)MIN_Y")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)MIN_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)SIZE_X")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)SIZE_Y")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)REVERSE_X")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)REVERSE_X")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)REVERSE_Y")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)REVERSE_Y")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ArraySize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)ARRAY_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the acquisition time and                 #
#  period                                                         # 
###################################################################
record(ao, "$(XSPRESS3_PREFIX,undefined):AcquireTime")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3,0,5)ACQ_TIME")
   field(PREC, "3")
   field(VAL,  "1.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):AcquireTime_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,0,5)ACQ_TIME")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):AcquirePeriod")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3,0,5)ACQ_PERIOD")
   field(PREC, "3")
   field(VAL,  "0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):AcquirePeriod_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,0,5)ACQ_PERIOD")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):TimeRemaining_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,0,5)TIME_REMAINING")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the gain                                 # 
###################################################################
record(ao, "$(XSPRESS3_PREFIX,undefined):Gain")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3,0,5)GAIN")
   field(VAL,  "1.0")
   field(PREC, "3")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):Gain_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,0,5)GAIN")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the frame type                           # 
###################################################################
record(mbbo, "$(XSPRESS3_PREFIX,undefined):FrameType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)FRAME_TYPE")
   field(ZRST, "Normal")
   field(ZRVL, "0")
   field(ONST, "Background")
   field(ONVL, "1")
   field(TWST, "FlatField")
   field(TWVL, "2")
   field(THST, "DblCorrelation")
   field(THVL, "3")
   field(VAL,  "0")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):FrameType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)FRAME_TYPE")
   field(ZRST, "Normal")
   field(ZRVL, "0")
   field(ONST, "Background")
   field(ONVL, "1")
   field(TWST, "FlatField")
   field(TWVL, "2")
   field(THST, "DblCorrelation")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the acquisition mode                     # 
###################################################################
record(mbbo, "$(XSPRESS3_PREFIX,undefined):ImageMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "Continuous")
   field(TWVL, "2")
   field(VAL,  "2")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ImageMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "Continuous")
   field(TWVL, "2")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the trigger mode                         # 
###################################################################
record(mbbo, "$(XSPRESS3_PREFIX,undefined):TriggerMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(VAL,  "0")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):TriggerMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the number of exposures and              #
#  number of images                                               # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):NumExposures")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)NEXPOSURES")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):NumExposures_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)NEXPOSURES")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):NumExposuresCounter_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)NEXPOSURES_COUNTER")
   field(SCAN, "I/O Intr")
}
record(longout, "$(XSPRESS3_PREFIX,undefined):NumImages")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)NIMAGES")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):NumImages_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)NIMAGES")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):NumImagesCounter_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)NIMAGES_COUNTER")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control  acquisition start and                   # 
#  and stop                                                       #
###################################################################

record(busy, "$(XSPRESS3_PREFIX,undefined):Acquire") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(XSP3,0,5)ACQUIRE")
   field(ZNAM, "Done")
   field(ONAM, "Acquire")
   field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):Acquire_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(XSP3,0,5)ACQUIRE")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ArrayCounter")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3,0,5)ARRAY_COUNTER")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3,0,5)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because .B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

###################################################################
#  These records are for the detector state                       # 
###################################################################

record(mbbi, "$(XSPRESS3_PREFIX,undefined):DetectorState_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3,0,5)STATUS")
    field(ZRST, "Idle")
    field(ZRVL, "0")
    field(ZRSV, "NO_ALARM")
    field(ONST, "Acquire")
    field(ONVL, "1")
    field(ONSV, "NO_ALARM")
    field(TWST, "Readout")
    field(TWVL, "2")
    field(TWSV, "NO_ALARM")
    field(THST, "Correct")
    field(THVL, "3")
    field(THSV, "NO_ALARM")
    field(FRST, "Saving")
    field(FRVL, "4")
    field(FRSV, "NO_ALARM")
    field(FVST, "Aborting")
    field(FVVL, "5")
    field(FVSV, "MINOR")
    field(SXST, "Error")
    field(SXVL, "6")
    field(SXSV, "MAJOR")
    field(SVST, "Waiting")
    field(SVVL, "7")
    field(SVSV, "NO_ALARM")
    field(EIST, "Initializing")
    field(EIVL, "8")
    field(EISV, "NO_ALARM")
    field(NIST, "Disconnected")
    field(NIVL, "9")
    field(NISV, "INVALID")
    field(TEST, "Aborted")
    field(TEVL, "10")
    field(TESV, "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control NDArray callacks                         # 
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ArrayCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3,0,5)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ArrayCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3,0,5)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3,0,5)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

###################################################################
#  These records provide status information                       # 
###################################################################

# Status message.
record(waveform, "$(XSPRESS3_PREFIX,undefined):StatusMessage_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3,0,5)STATUS_MESSAGE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):StringToServer_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3,0,5)STRING_TO_SERVER")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):StringFromServer_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3,0,5)STRING_FROM_SERVER")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

################################################################@###
#  This record can be used to force a read of the detector status  # 
####################################################################
record(bo,"$(XSPRESS3_PREFIX,undefined):ReadStatus") {
    field(DTYP,"asynInt32")
    field(OUT, "@asyn(XSP3,0,5)READ_STATUS")
    field(VAL, "1")
    field(SCAN,"Passive")
}

###################################################################
#  These records control the shutter                              # 
###################################################################

record(mbbo, "$(XSPRESS3_PREFIX,undefined):ShutterMode")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3,0,5)SHUTTER_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "EPICS PV")
    field(ONVL, "1")
    field(TWST, "Detector output")
    field(TWVL, "2")
    field(VAL,  "0")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ShutterMode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3,0,5)SHUTTER_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "EPICS PV")
    field(ONVL, "1")
    field(TWST, "Camera output")
    field(TWVL, "2")
    field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ShutterControl")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3,0,5)SHUTTER_CONTROL")
    field(ZNAM, "Close")
    field(ONAM, "Open")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ShutterControl_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3,0,5)SHUTTER_CONTROL")
    field(ZNAM, "Close")
    field(ONAM, "Open")
    field(SCAN, "I/O Intr")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ShutterStatus_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3,0,5)SHUTTER_STATUS")
    field(ZNAM, "Closed")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Open")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ShutterOpenDelay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3,0,5)SHUTTER_OPEN_DELAY")
   field(PREC, "3")
   field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ShutterOpenDelay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,0,5)SHUTTER_OPEN_DELAY")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ShutterCloseDelay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3,0,5)SHUTTER_CLOSE_DELAY")
   field(PREC, "3")
   field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ShutterCloseDelay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,0,5)SHUTTER_CLOSE_DELAY")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

# This record changes state when the driver opens/closes an EPICS shutter
record(bi, "$(XSPRESS3_PREFIX,undefined):ShutterControlEPICS")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3,0,5)SHUTTER_CONTROL_EPICS")
    field(ZNAM, "Closed")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Open")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ShutterFanout.PROC")
}

record(fanout, "$(XSPRESS3_PREFIX,undefined):ShutterFanout")
{
    field(LNK1, "$(XSPRESS3_PREFIX,undefined):ShutterOpenEPICS.PROC PP MS")
    field(LNK2, "$(XSPRESS3_PREFIX,undefined):ShutterCloseEPICS.PROC PP MS")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ShutterOpenEPICS")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ShutterControlEPICS.VAL NPP NMS")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "1")
    field(OUT,  "")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ShutterCloseEPICS")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ShutterControlEPICS.VAL NPP NMS")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "0")
    field(OUT,  "")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ShutterStatusEPICS_RBV")
{
    field(DTYP, "Raw Soft Channel")
    field(INP,  "test CP MS")
    field(ZRVL, "0")
    field(ZRST, "Closed")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "Open")
    field(ONSV, "MINOR")
}

###################################################################
#  These records control the detector temperature                 # 
###################################################################
 
record(ao, "$(XSPRESS3_PREFIX,undefined):Temperature")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3,0,5)TEMPERATURE")
   field(PREC, "3")
   field(VAL,  "25.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):Temperature_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,0,5)TEMPERATURE")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):TemperatureActual")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,0,5)TEMPERATURE_ACTUAL")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,0,5)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,0,5)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}


###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):AsynIO")
{
    field(PORT, XSP3)
    field(TIB2,"1")
    info("ADType", "ADDriver")
}

#######################################################
# Database records for the Xspress3
# Matthew Pearson
# Sept 2012
#
# Channel dependant records are in xspress3Channel.template
# Channel SCA records are in xspress3ChannelSCA.template, xspress3ChannelSCANoLimits.template
# and xspress3ChannelSCAThreshold.template, depending on the type of SCA.
# Records to control live data update are in xspress3DataUpdate.template
#
# Macros:
# % macro,  P,           Device prefix
# % macro,  R,           Device suffix
# % macro,  PORT,        Asyn port name
# % macro,  ADDR,        Asyn address (set to zero)
# % macro,  TIMEOUT,     Asyn timeout
# % macro,  MAX_SPECTRA, The maximum number of frames that can be acquired in one acquisition (eg. 16384)
# % macro,  MAX_FRAMES,  The maximum size of each spectra (eg. 4096) in a scan.
#
#######################################################

# /// 
# /// Reset the device.
# ///
record(bo, "$(XSPRESS3_PREFIX,undefined):RESET")
{
    field(DTYP,"asynInt32")
    field(OUT, "@asyn(XSP3,0,5)XSP3_RESET")
    field(ZNAM,"Done")	
    field(ONAM,"Reset")
}

# /// 
# /// Erase MCA data.
# ///
record(bo,"$(XSPRESS3_PREFIX,undefined):ERASE") 
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(XSP3,0,5)XSP3_ERASE")
    field(ZNAM,"Done")
    field(ONAM,"Erase")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):Acquire_RBV") {
   field(OSV,  "NO_ALARM")
}


# ///
# /// Set the numer of channels to read out.
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):NUM_CHANNELS")
{
   field(PINI, "YES")	
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_NUM_CHANNELS")
   field(VAL,  "1")
}


# ///
# /// Read the number of channels
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):NUM_CHANNELS_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_NUM_CHANNELS")
   field(SCAN, "I/O Intr")
}

# ///
# /// Read the max number of channels supported by the system
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):MAX_NUM_CHANNELS_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_MAX_NUM_CHANNELS")
   field(SCAN, "I/O Intr")
}

# ///
# /// Select the trigger source (internal or external).
# ///
record(mbbo, "$(XSPRESS3_PREFIX,undefined):TriggerMode")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_TRIGGER_MODE")
   field(ZRST, "Software")
   field(ZRVL, "0")
   field(ONST, "Internal")
   field(ONVL, "1")
   field(TWST, "IDC")
   field(TWVL, "2")
   field(THST, "TTL Veto Only")
   field(THVL, "3")
   field(FRST, "TTL Both")
   field(FRVL, "4")
   field(FVST, "LVDS Veto Only")
   field(FVVL, "5")
   field(SXST, "LVDS Both")
   field(SXVL, "6")
   field(VAL,  "0")
   field(PINI, "NO")
}

# ///
# /// Read the trigger source (internal or external).
# ///
record(mbbi, "$(XSPRESS3_PREFIX,undefined):TriggerMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_TRIGGER_MODE")
   field(ZRST, "Software")
   field(ZRVL, "0")
   field(ONST, "Internal")
   field(ONVL, "1")
   field(TWST, "IDC")
   field(TWVL, "2")
   field(THST, "TTL Veto Only")
   field(THVL, "3")
   field(FRST, "TTL Both")
   field(FRVL, "4")
   field(FVST, "LVDS Veto Only")
   field(FVVL, "5")
   field(SXST, "LVDS Both")
   field(SXVL, "6")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set whether the sense of F0 is inverted
# /// (only used in LVDS_BOTH and TTL_BOTH modes)
# ///
record(bo, "$(XSPRESS3_PREFIX,undefined):TRIGGER")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_TRIGGER")
   field(ZNAM,"Do Nothing")	
   field(ONAM,"Trigger")
}

# ///
# /// Set whether the sense of F0 is inverted
# /// (only used in LVDS_BOTH and TTL_BOTH modes)
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):INVERT_F0")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_INVERT_F0")
   field(VAL,  "0")
}

# ///
# /// Set whether the sense of F0 is inverted
# /// (only used in LVDS_BOTH and TTL_BOTH modes)
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):INVERT_F0_RBV")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_INVERT_F0")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set whether the sense of VETO is inverted
# /// (only used in LVDS, LVDS_BOTH, TTL and TTL_BOTH modes)
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):INVERT_VETO")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_INVERT_VETO")
   field(VAL,  "0")
}

# ///
# /// Set whether the sense of VETO is inverted
# /// (only used in LVDS, LVDS_BOTH, TTL and TTL_BOTH modes)
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):INVERT_VETO_RBV")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_INVERT_VETO")
   field(SCAN, "I/O Intr")
}

# ///
# /// Sets the trigger debounce time in 80 MHz cycles
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):DEBOUNCE")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_DEBOUNCE")
   field(VAL,  "0")
}

# ///
# /// Sets the trigger debounce time in 80 MHz cycles
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):DEBOUNCE_RBV")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_DEBOUNCE")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the fixed time register, in Software trigger mode.
# /// This sets the number of the first time frame (not normally used).
# ///
#record(longout, "$(XSPRESS3_PREFIX,undefined):FIXED_TIME")
#{
#   field(DTYP, "asynInt32")
#   field(OUT,  "@asyn(XSP3,0,5)XSP3_FIXED_TIME")
#   field(VAL,  "0")
#}

# ///
# /// Get the fixed time register, used for Software trigger mode.
# /// This sets the number of the first time frame (not normally used).
# ///
#record(longin, "$(XSPRESS3_PREFIX,undefined):FIXED_TIME_RBV")
#{
#   field(PINI, "YES")
#   field(DTYP, "asynInt32")
#   field(INP,  "@asyn(XSP3,0,5)XSP3_FIXED_TIME")
#   field(SCAN, "I/O Intr")
#}


# ///
# /// Set the numer of frames to configure the system with.
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):NUM_FRAMES_CONFIG")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_NUM_FRAMES_CONFIG")
   field(VAL,  "0")
}

# ///
# /// Get the numer of frames to configure the system with.
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):NUM_FRAMES_CONFIG_RBV")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_NUM_FRAMES_CONFIG")
   field(SCAN, "I/O Intr")
}


# ///
# /// Get the number of xspress3 cards to set up. 
# /// This is used in the xsp3_config function. It is passed into the 
# /// driver config function at IOC startup.
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):NUM_CARDS_RBV")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_NUM_CARDS")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the path used for the file configuration. 
# /// This is used in the xsp3_restore_settings function.
# ///
record(waveform, "$(XSPRESS3_PREFIX,undefined):CONFIG_PATH")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3,0,5)XSP3_CONFIG_PATH")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

# ///
# /// Get the path used for the file configuration. 
# /// This is used in the xsp3_restore_settings function.
# ///
record(waveform, "$(XSPRESS3_PREFIX,undefined):CONFIG_PATH_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3,0,5)XSP3_CONFIG_PATH")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}


# ///
# /// Set the path used for config file saving.
# /// This is used in the xsp3_save_settings function.
# ///
record(waveform, "$(XSPRESS3_PREFIX,undefined):CONFIG_SAVE_PATH")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3,0,5)XSP3_CONFIG_SAVE_PATH")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

# ///
# /// Get the path used for config file saving.
# /// This is used in the xsp3_save_settings function.
# ///
record(waveform, "$(XSPRESS3_PREFIX,undefined):CONFIG_SAVE_PATH_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3,0,5)XSP3_CONFIG_SAVE_PATH")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

# ///
# /// Connect to the xspress3. This runs the xsp3_config function as
# /// well as some other setup functions.
# ///
record(bo, "$(XSPRESS3_PREFIX,undefined):CONNECT")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CONNECT")
   field(ZNAM,"Connect")
   field(ONAM,"Connect")	
}

# /// 
# /// Show the connected status.
# ///
record(bi,"$(XSPRESS3_PREFIX,undefined):CONNECTED") {
    field(DTYP, "asynInt32")
    field(INP, "@asyn(XSP3,0,5)XSP3_CONNECTED")
    field(ZNAM,"Disconnected")
    field(ONAM,"Connected")
    field(VAL, "0")
    field(SCAN, "I/O Intr")
}


# ///
# /// Disconnect from the xspress3. This runs the xsp3_close function as
# /// well as some other setup functions.
# ///
record(bo, "$(XSPRESS3_PREFIX,undefined):DISCONNECT")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_DISCONNECT")
   field(ZNAM,"Disconnect")
   field(ONAM,"Disconnect")	
}

# ///
# /// Save the current xspress3 settings to a file. This makes use of the 
# /// API function xsp3_save_settings(). This does nothing if we are not 
# /// connected or CONFIG_PATH is not set.
# ///
record(bo, "$(XSPRESS3_PREFIX,undefined):SAVE_SETTINGS")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_SAVE_SETTINGS")
   field(ZNAM,"Save")
   field(ONAM,"Save")	
}


# ///
# /// Restore the xspress3 settings from a file. This makes use of the 
# /// API function xsp3_save_settings(). This does nothing if we are not 
# /// connected or CONFIG_PATH is not set.
# ///
record(bo, "$(XSPRESS3_PREFIX,undefined):RESTORE_SETTINGS")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_RESTORE_SETTINGS")
   field(ZNAM,"Restore")
   field(ONAM,"Restore")	
}


# ///
# /// Set the max number of elements in a spectra. This is a database parameter, so the
# /// record has DISP=1 so it can't be changed at runtime.
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):MAX_SPECTRA")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_MAX_SPECTRA")
   field(VAL,  "4096")
   field(DISP, "1")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):MAX_SPECTRA_RBV.PROC")
}

# ///
# /// Read the max spectra size from the driver. This was set at startup
# /// by $(XSPRESS3_PREFIX,undefined):MAX_SPECTRA.
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):MAX_SPECTRA_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_MAX_SPECTRA")
   field(SCAN, "I/O Intr")
}


# ///
# /// Read the max number of frames from the driver. This is the max allowed number
# /// for the $(XSPRESS3_PREFIX,undefined):NUM_FRAMES_CONFIG record. This was set at startup in the driver config.
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):MAX_FRAMES_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_MAX_FRAMES")
   field(SCAN, "I/O Intr")
   field(PINI, "YES")
}

# ///
# /// This is the maximum number of frames allowed for a single acqusition. This is set in the 
# /// database when building the IOC, and also set in the driver IOC config function. This determins
# /// how big the driver and waveform arrays are.
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):MAX_FRAMES_DRIVER_RBV")
{
   field(PINI, "YES")
   field(DTYP, "Soft Channel")
   field(VAL,  "16384")
   field(DISP, "1")
}


# ///
# /// Read the number of frames acquired in an acquisition. This is
# /// updated during an acqusition.
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):FRAME_COUNT_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_FRAME_COUNT")
   field(SCAN, "I/O Intr")
}


# ///
# /// Set the run flags. This can be used to readout playback data
# /// instead of normal data. 
# /// This has to be done at connect time.
# ///
record(mbbo, "$(XSPRESS3_PREFIX,undefined):RUN_FLAGS")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_RUN_FLAGS")
   field(ZRST, "SCALERS & HIST")
   field(ZRVL, "0")
   field(ONST, "PLAYB, SCALERS & HIST")
   field(ONVL, "1")
   field(VAL,  "0")
}

# ///
# /// Read the run flags. This can be used to readout playback data
# /// instead of normal data. 
# /// This has to be done at connect time.
# ///
record(mbbi, "$(XSPRESS3_PREFIX,undefined):RUN_FLAGS_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_RUN_FLAGS")
   field(ZRST, "SCALERS & HIST")
   field(ZRVL, "0")
   field(ONST, "PLAYB, SCALERS & HIST")
   field(ONVL, "1")
   field(SCAN, "I/O Intr")
}

# ///
# /// Disable or enable MCA ROI calculations.
# ///
record(bo,"$(XSPRESS3_PREFIX,undefined):CTRL_MCA_ROI") {
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(XSP3,0,5)XSP3_CTRL_MCA_ROI")
    field(ZNAM,"Disable")
    field(ONAM,"Enable")
    field(PINI, "YES")
    field(VAL, "1")
}

# /// 
# /// Readback disable or enable MCA ROI calculations.
# ///
record(bi, "$(XSPRESS3_PREFIX,undefined):CTRL_MCA_ROI_RBV")
{
    field(DTYP,"asynInt32")
    field(INP, "@asyn(XSP3,0,5)XSP3_CTRL_MCA_ROI")
    field(ZNAM,"Disabled")	
    field(ONAM,"Enabled")
    field(SCAN, "I/O Intr")	
}

# ///
# /// Disable or enable DTC calculations.
# /// These corrections are done by the Xspress3 API in the detector 
# /// thread. So they slow down acqusition.
# ///
record(bo,"$(XSPRESS3_PREFIX,undefined):CTRL_DTC") {
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(XSP3,0,5)XSP3_CTRL_DTC")
    field(ZNAM,"Disable")
    field(ONAM,"Enable")
    field(PINI, "YES")
    field(VAL, "1")
}

# /// 
# /// Readback disable or enable DTC calculations.
# /// These corrections are done by the Xspress3 API in the detector 
# /// thread. So they slow down acqusition.
# ///
record(bi, "$(XSPRESS3_PREFIX,undefined):CTRL_DTC_RBV")
{
    field(DTYP,"asynInt32")
    field(INP, "@asyn(XSP3,0,5)XSP3_CTRL_DTC")
    field(ZNAM,"Disabled")	
    field(ONAM,"Enabled")
    field(SCAN, "I/O Intr")	
}

# ///
# /// Disable this ADBase record scanning.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):PoolUsedMem")
{
   field(SCAN, "Passive")
}

# ///
# /// Name of this detector
# ///
record(stringout, "$(XSPRESS3_PREFIX,undefined):NAME")
{
   field(VAL, "Xspress3")
   field(DESC, "Xspress3 EPICS Control")
}

#Set DISA for PVs in ADBase that do not apply to Xspress3

record(mbbo, "$(XSPRESS3_PREFIX,undefined):DataType")
{
    field(DISA, "1")
}
record(mbbi, "$(XSPRESS3_PREFIX,undefined):DataType_RBV")
{
    field(DISA, "1")
}
record(mbbo, "$(XSPRESS3_PREFIX,undefined):ColorMode")
{
    field(DISA, "1")
}
record(mbbi, "$(XSPRESS3_PREFIX,undefined):ColorMode_RBV")
{
    field(DISA, "1")
}
record(longout, "$(XSPRESS3_PREFIX,undefined):BinX")
{
    field(DISA, "1")
}
record(longin, "$(XSPRESS3_PREFIX,undefined):BinX_RBV")
{
    field(DISA, "1")
}
record(longout, "$(XSPRESS3_PREFIX,undefined):BinY")
{
    field(DISA, "1")
}
record(longin, "$(XSPRESS3_PREFIX,undefined):BinY_RBV")
{
    field(DISA, "1")
}
record(longout, "$(XSPRESS3_PREFIX,undefined):MinX")
{
    field(DISA, "1")
}
record(longin, "$(XSPRESS3_PREFIX,undefined):MinX_RBV")
{
    field(DISA, "1")
}
record(longout, "$(XSPRESS3_PREFIX,undefined):MinY")
{
    field(DISA, "1")
}
record(longin, "$(XSPRESS3_PREFIX,undefined):MinY_RBV")
{
    field(DISA, "1")
}
record(longout, "$(XSPRESS3_PREFIX,undefined):SizeX")
{
    field(DISA, "1")
}
record(longin, "$(XSPRESS3_PREFIX,undefined):SizeX_RBV")
{
    field(DISA, "1")
}
record(longout, "$(XSPRESS3_PREFIX,undefined):SizeY")
{
    field(DISA, "1")
}
record(longin, "$(XSPRESS3_PREFIX,undefined):SizeY_RBV")
{
    field(DISA, "1")
}
record(bo, "$(XSPRESS3_PREFIX,undefined):ReverseX")
{
    field(DISA, "1")
}
record(bi, "$(XSPRESS3_PREFIX,undefined):ReverseX_RBV")
{
    field(DISA, "1")
}
record(bo, "$(XSPRESS3_PREFIX,undefined):ReverseY")
{
    field(DISA, "1")
}
record(bi, "$(XSPRESS3_PREFIX,undefined):ReverseY_RBV")
{
    field(DISA, "1")
}
record(longout, "$(XSPRESS3_PREFIX,undefined):NumExposures")
{
    field(DISA, "1")
}
record(longin, "$(XSPRESS3_PREFIX,undefined):NumExposures_RBV")
{
    field(DISA, "1")
}
record(ao, "$(XSPRESS3_PREFIX,undefined):AcquirePeriod")
{
    field(DISA, "1")
}
record(ai, "$(XSPRESS3_PREFIX,undefined):AcquirePeriod_RBV")
{
    field(DISA, "1")
}
record(mbbo, "$(XSPRESS3_PREFIX,undefined):ImageMode")
{
    field(DISA, "1")
}
record(mbbi, "$(XSPRESS3_PREFIX,undefined):ImageMode_RBV")
{
    field(DISA, "1")
}
record(ao, "$(XSPRESS3_PREFIX,undefined):Gain")
{
    field(DISA, "1")
}
record(ai, "$(XSPRESS3_PREFIX,undefined):Gain_RBV")
{
    field(DISA, "1")
}
#######################################################
# Database records for an Xspress3 channel
# Matthew Pearson/Nick Rees
# Sept 2014
#
# Macros:
# % macro,  P,           Device prefix
# % macro,  R,           Device suffix
# % macro,  PORT,        Asyn port name
# % macro,  ADDR,        Asyn address
# % macro,  TIMEOUT,     Asyn timeout
# % macro,  CHAN,        Channel number
# % macro,  NELEMENTS,   Number of elements in NDAttribute waveform
#
# The following just forces the Diamond iocbuilder to recognise that
# the NELEMENTS macro is needed - it is used in an included file,
# but not this file
# % 4096
#
# Set the channel specific attribute names.
# These are used in the templates below that deal with the channel
# specific areaDetector plugins.
##########################################################################

##########################################################################
# Add in the records that enable and disable all the
# areaDetector channel specific plugins.
##########################################################################

####################################################################
#
# Records to enable and disable all the plugins for specific channels.
# Doing ROI and channel access for each channel can be CPU intensive.
# So it is best to disable channels and ROIs not in use.
#
#####################################################################


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_PluginControlVal")
{
   field(VAL, "1")
   field(ONAM, "Enabled")
   field(ZNAM, "Disabled")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_PluginControl.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_PluginControl")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C1_PluginControlVal.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROI1:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):ARR1:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):ROISUM1:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:EnableCallbacks PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:EnableCallbacks PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:EnableCallbacks PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:EnableCallbacks PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:EnableCallbacks PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_PluginControl_2.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_PluginControl_2")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C1_PluginControlVal.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:EnableCallbacks PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:EnableCallbacks PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:EnableCallbacks PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:EnableCallbacks PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:EnableCallbacks PP")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_PluginControlValExtraROI")
{
   field(VAL, "1")
   field(ONAM, "Enabled")
   field(ZNAM, "Disabled")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_PluginControl_3.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_PluginControl_3")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C1_PluginControlValExtraROI.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:EnableCallbacks PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:EnableCallbacks PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:EnableCallbacks PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:EnableCallbacks PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:EnableCallbacks PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_PluginControl_4.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_PluginControl_4")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C1_PluginControlValExtraROI.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:EnableCallbacks PP")
}#! Generated by VisualDCT v2.6
#! DBDSTART
#! DBDEND


#####################################################################
#
# Records to do a reset on all the NDAttribute plugins for a channel.
# This will reset the ArrayCounter and clear the plugin data.
#
# This is set to process at startup so the time series waveforms will
# start collecting data as soon as we start, without doing a high
# level ERASE.
#
#####################################################################
record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_AttrReset") {
  field(PINI, "YES")
  field(VAL, "1")
  field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Reset PP")
  field(OUTB, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Reset PP")
  field(OUTC, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Reset PP")
  field(OUTD, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Reset PP")
  field(OUTE, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Reset PP")
  field(OUTF, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Reset PP")
  field(OUTG, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Reset PP")
  field(OUTH, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Reset PP")
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2") {
  field(VAL, "1")
  field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Reset PP")
  field(OUTB, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Reset PP")
  field(OUTC, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Reset PP")
  field(OUTD, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Reset PP")
  field(OUTE, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Reset PP")
  field(OUTF, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Reset PP")
  field(OUTG, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Reset PP")
  field(OUTH, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Reset PP")
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_AttrReset_3")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_AttrReset_3") {
  field(VAL, "1")
  field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Reset PP")
  field(OUTB, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Reset PP")
  field(OUTC, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Reset PP")
  field(OUTD, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Reset PP")
  field(OUTE, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Reset PP")
  field(OUTF, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Reset PP")
  field(OUTG, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Reset PP")
  field(OUTH, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Reset PP")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_AttrResetFanIn") {
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_AttrReset")
  field(VAL, "1")
  field(OMSL, "closed_loop")
  field(DOL, "$(XSPRESS3_PREFIX,undefined):ERASE_AttrReset CPP")
}

#! Further lines contain data used by VisualDCT
#! View(0,0,1.0)
#! Record("$(XSPRESS3_PREFIX,undefined):C1_AttrReset",320,51,0,0,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset.OUTA",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset.OUTA")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset.OUTB",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset.OUTB")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset.OUTC",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset.OUTC")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset.OUTD",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset.OUTD")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset.OUTE",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset.OUTE")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset.OUTF",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset.OUTF")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset.OUTG",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset.OUTG")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset.OUTH",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset.OUTH")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset.FLNK",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset.FLNK")
#! Link("$(XSPRESS3_PREFIX,undefined):C1_AttrReset.FLNK","$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2")
#! Record("$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2",640,65,0,0,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2.OUTA",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2.OUTA")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2.OUTB",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2.OUTB")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2.OUTC",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2.OUTC")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2.OUTD",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2.OUTD")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2.OUTE",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2.OUTE")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2.OUTF",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2.OUTF")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2.OUTG",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2.OUTG")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2.OUTH",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2.OUTH")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2.FLNK",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2.FLNK")
#! Link("$(XSPRESS3_PREFIX,undefined):C1_AttrReset_2.FLNK","$(XSPRESS3_PREFIX,undefined):C1_AttrReset_3")
#! Record("$(XSPRESS3_PREFIX,undefined):C1_AttrReset_3",940,79,0,0,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset_3")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset_3.OUTA",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset_3.OUTA")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset_3.OUTB",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset_3.OUTB")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset_3.OUTC",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset_3.OUTC")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset_3.OUTD",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset_3.OUTD")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset_3.OUTE",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset_3.OUTE")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset_3.OUTF",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset_3.OUTF")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset_3.OUTG",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset_3.OUTG")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrReset_3.OUTH",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrReset_3.OUTH")
#! Record("$(XSPRESS3_PREFIX,undefined):C1_AttrResetFanIn",60,48,0,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrResetFanIn")
#! Field("$(XSPRESS3_PREFIX,undefined):C1_AttrResetFanIn.FLNK",16777215,1,"$(XSPRESS3_PREFIX,undefined):C1_AttrResetFanIn.FLNK")
#! Link("$(XSPRESS3_PREFIX,undefined):C1_AttrResetFanIn.FLNK","$(XSPRESS3_PREFIX,undefined):C1_AttrReset")
#! Visibility("$(XSPRESS3_PREFIX,undefined):C1_AttrResetFanIn.DOL",1)
#####################################################################
#
# Records to do an array update on all the NDAttribute plugins for a channel.
# This will call array callbacks to update the array with any 
# remaining points.
#
# This should be processed at the end of each acqusition.
#
#####################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_AttrUpdateFanIn") {
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_AttrUpdate")
  field(VAL, "1")
  field(OMSL, "closed_loop")
  field(DOL, "$(XSPRESS3_PREFIX,undefined):UPDATE_AttrUpdate CPP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_AttrUpdate")
{
   field(PINI, "YES")
   field(VAL, "1")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Update PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Update PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Update PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Update PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Update PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Update PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Update PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Update PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_AttrUpdate_2")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_AttrUpdate_2")
{
   field(VAL, "1")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Update PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Update PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Update PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Update PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Update PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Update PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Update PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Update PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_AttrUpdate_3")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_AttrUpdate_3")
{
   field(VAL, "1")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Update PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Update PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Update PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Update PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Update PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Update PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Update PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Update PP")
}
##########################################################################
# Add in records to set SCA related parameters.
# Note: the actual SCA data is displayed to the user using 
# the NDAttribute plugin.
##########################################################################

#All good SCA

# ///
# /// Set the SCA 4 threshold on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA4_THRESHOLD")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_SCA4_THRESHOLD")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 4 threshold on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA4_THRESHOLD_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_SCA4_THRESHOLD")
   field(SCAN, "I/O Intr")
}

#Window 1 SCA

# ///
# /// Set the SCA 5 high level window limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA5_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_SCA5_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 5 high level window limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA5_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_SCA5_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the SCA 5 low level window limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA5_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_SCA5_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 5 low level window limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA5_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_SCA5_LLM")
   field(SCAN, "I/O Intr")
}


#Window 2 SCA

# ///
# /// Set the SCA 6 high level window limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA6_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_SCA6_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 6 high level window limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA6_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_SCA6_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the SCA 6 low level window limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA6_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_SCA6_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 6 low level window limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA6_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_SCA6_LLM")
   field(SCAN, "I/O Intr")
}


##########################################################################
# Dead Time Correction Parameters Read At Connection Time
##########################################################################
# Event width from libx3
record(ai, "$(XSPRESS3_PREFIX,undefined):C1_EventWidth_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3,0,5)XSP3_EVENT_WIDTH")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(PREC, "1")
}

# Total deadtime = allevent*event width + time in reset
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_DeadTime_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Value_RBV NPP NMS") # All Event
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Value_RBV NPP NMS") # Reset Ticks
    field(INPC, "$(XSPRESS3_PREFIX,undefined):C1_EventWidth_RBV NPP NMS") # Event Width
    field(INPD, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Value_RBV NPP NMS") # Frame Time
    field(CALC, "(A*(C+1)+B)/D*100")
    field(PREC, "5")
    #field(SCAN, ".1 second")
    field(SCAN, "Passive")
    #field(SCAN, "I/O Intr")
}

# Deadtime Correction Factor
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_DTCFactor_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_DeadTime_RBV:Value_RBV NPP NMS") # All Event
    field(CALC, "100/(100-A)")
    field(PREC, "5")
    #field(SCAN, ".1 second")
    field(SCAN, "Passive")
}

# X3 Deadtime Correction Factor
record(ai, "$(XSPRESS3_PREFIX,undefined):C1_X3DTCFactor_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3,0,5)XSP3_DTC_FACTOR")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(PREC, "5")
}

# ///
# /// Read the Dead Time Correction Flags.
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_DTC_FLAGS_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_DTC_FLAGS")
   field(SCAN, "I/O Intr")
}

# ///
# /// Read the Dead Time Correction All Event Grad parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C1_DTC_AEG_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_DTC_AEG")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

# ///
# /// Read the Dead Time Correction All Event Offset parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C1_DTC_AEO_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_DTC_AEO")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

# ///
# /// Read the Dead Time Correction In Window Grad parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C1_DTC_IWG_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_DTC_IWG")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

# ///
# /// Read the Dead Time Correction In Window Offset parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C1_DTC_IWO_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_DTC_IWO")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

##########################################################################
# Add in MCA ROI records.
# Note: the actual ROI data is displayed to the user using 
# the NDAttribute plugin.
##########################################################################

# ///
# /// Set the MCA ROI1 high level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI1_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI1_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI1 high level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI1_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI1_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI1 low level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI1_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI1_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI1 low level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI1_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI1_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI2 high level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI2_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI2_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI2 high level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI2_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI2_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI2 low level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI2_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI2_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI2 low level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI2_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI2_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI3 high level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI3_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI3_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI3 high level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI3_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI3_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI3 low level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI3_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI3_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI3 low level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI3_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI3_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI4 high level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI4_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI4_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI4 high level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI4_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI4_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI4 low level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI4_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI4_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI4 low level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI4_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI4_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI5 high level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI5_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI5_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI5 high level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI5_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI5_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI5 low level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI5_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI5_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI5 low level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI5_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI5_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI6 high level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI6_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI6_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI6 high level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI6_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI6_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI6 low level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI6_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI6_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI6 low level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI6_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI6_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI7 high level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI7_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI7_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI7 high level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI7_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI7_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI7 low level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI7_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI7_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI7 low level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI7_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI7_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI8 high level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI8_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI8_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI8 high level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI8_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI8_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI8 low level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI8_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI8_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI8 low level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI8_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI8_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI9 high level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI9_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI9_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI9 high level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI9_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI9_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI9 low level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI9_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI9_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI9 low level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI9_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI9_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI10 high level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI10_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI10_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI10 high level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI10_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI10_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI10 low level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI10_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI10_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI10 low level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI10_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI10_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI11 high level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI11_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI11_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI11 high level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI11_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI11_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI11 low level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI11_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI11_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI11 low level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI11_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI11_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI12 high level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI12_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI12_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI12 high level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI12_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI12_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI12 low level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI12_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI12_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI12 low level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI12_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI12_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI13 high level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI13_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI13_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI13 high level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI13_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI13_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI13 low level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI13_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI13_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI13 low level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI13_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI13_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI14 high level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI14_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI14_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI14 high level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI14_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI14_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI14 low level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI14_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI14_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI14 low level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI14_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI14_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI15 high level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI15_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI15_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI15 high level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI15_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI15_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI15 low level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI15_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI15_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI15 low level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI15_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI15_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI16 high level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI16_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI16_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI16 high level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI16_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI16_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI16 low level limit on channel 1
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI16_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI16_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI16 low level limit on channel 1
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_MCA_ROI16_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,0,5)XSP3_CHAN_ROI16_LLM")
   field(SCAN, "I/O Intr")
}


##########################################################################
# Add in all the NDAttributePlugin records.
##########################################################################
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA0,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA0,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA0,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA0,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA0,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA0,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA0,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_SCA0,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA0,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA1,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA1,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA1,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA1,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA1,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_SCA1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA2,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA2,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA2,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA2,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA2,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_SCA2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA3,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA3,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA3,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA3,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA3,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_SCA3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA4,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA4,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA4,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA4,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA4,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_SCA4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA5,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA5,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA5,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA5,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA5,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_SCA5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA6,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA6,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA6,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA6,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA6,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_SCA6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA7,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA7,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA7,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA7,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA7,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_SCA7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI1,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI1,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI1,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI1,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI1,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI2,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI2,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI2,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI2,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI2,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI3,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI3,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI3,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI3,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI3,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI4,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI4,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI4,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI4,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI4,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI5,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI5,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI5,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI5,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI5,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI6,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI6,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI6,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI6,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI6,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI7,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI7,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI7,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI7,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI7,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI8,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI8,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI8,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI8,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI8,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI8,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI8,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI8,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI8,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI9,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI9,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI9,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI9,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI9,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI9,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI9,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI9,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI9,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI10,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI10,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI10,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI10,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI10,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI10,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI10,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI10,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI10,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI11,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI11,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI11,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI11,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI11,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI11,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI11,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI11,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI11,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI12,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI12,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI12,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI12,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI12,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI12,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI12,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI12,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI12,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI13,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI13,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI13,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI13,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI13,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI13,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI13,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI13,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI13,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI14,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI14,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI14,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI14,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI14,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI14,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI14,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI14,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI14,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI15,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI15,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI15,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI15,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI15,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI15,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI15,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI15,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI15,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI16,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI16,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI16,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI16,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI16,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI16,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI16,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI16,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI16,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}#######################################################
# Database records for an Xspress3 channel
# Matthew Pearson/Nick Rees
# Sept 2014
#
# Macros:
# % macro,  P,           Device prefix
# % macro,  R,           Device suffix
# % macro,  PORT,        Asyn port name
# % macro,  ADDR,        Asyn address
# % macro,  TIMEOUT,     Asyn timeout
# % macro,  CHAN,        Channel number
# % macro,  NELEMENTS,   Number of elements in NDAttribute waveform
#
# The following just forces the Diamond iocbuilder to recognise that
# the NELEMENTS macro is needed - it is used in an included file,
# but not this file
# % 4096
#
# Set the channel specific attribute names.
# These are used in the templates below that deal with the channel
# specific areaDetector plugins.
##########################################################################

##########################################################################
# Add in the records that enable and disable all the
# areaDetector channel specific plugins.
##########################################################################

####################################################################
#
# Records to enable and disable all the plugins for specific channels.
# Doing ROI and channel access for each channel can be CPU intensive.
# So it is best to disable channels and ROIs not in use.
#
#####################################################################


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_PluginControlVal")
{
   field(VAL, "1")
   field(ONAM, "Enabled")
   field(ZNAM, "Disabled")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_PluginControl.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_PluginControl")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C2_PluginControlVal.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROI2:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):ARR2:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):ROISUM2:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:EnableCallbacks PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:EnableCallbacks PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:EnableCallbacks PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:EnableCallbacks PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:EnableCallbacks PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_PluginControl_2.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_PluginControl_2")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C2_PluginControlVal.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:EnableCallbacks PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:EnableCallbacks PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:EnableCallbacks PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:EnableCallbacks PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:EnableCallbacks PP")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_PluginControlValExtraROI")
{
   field(VAL, "1")
   field(ONAM, "Enabled")
   field(ZNAM, "Disabled")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_PluginControl_3.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_PluginControl_3")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C2_PluginControlValExtraROI.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:EnableCallbacks PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:EnableCallbacks PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:EnableCallbacks PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:EnableCallbacks PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:EnableCallbacks PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_PluginControl_4.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_PluginControl_4")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C2_PluginControlValExtraROI.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:EnableCallbacks PP")
}#! Generated by VisualDCT v2.6
#! DBDSTART
#! DBDEND


#####################################################################
#
# Records to do a reset on all the NDAttribute plugins for a channel.
# This will reset the ArrayCounter and clear the plugin data.
#
# This is set to process at startup so the time series waveforms will
# start collecting data as soon as we start, without doing a high
# level ERASE.
#
#####################################################################
record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_AttrReset") {
  field(PINI, "YES")
  field(VAL, "1")
  field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Reset PP")
  field(OUTB, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Reset PP")
  field(OUTC, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Reset PP")
  field(OUTD, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Reset PP")
  field(OUTE, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Reset PP")
  field(OUTF, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Reset PP")
  field(OUTG, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Reset PP")
  field(OUTH, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Reset PP")
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2") {
  field(VAL, "1")
  field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Reset PP")
  field(OUTB, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Reset PP")
  field(OUTC, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Reset PP")
  field(OUTD, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Reset PP")
  field(OUTE, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Reset PP")
  field(OUTF, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Reset PP")
  field(OUTG, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Reset PP")
  field(OUTH, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Reset PP")
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_AttrReset_3")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_AttrReset_3") {
  field(VAL, "1")
  field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Reset PP")
  field(OUTB, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Reset PP")
  field(OUTC, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Reset PP")
  field(OUTD, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Reset PP")
  field(OUTE, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Reset PP")
  field(OUTF, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Reset PP")
  field(OUTG, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Reset PP")
  field(OUTH, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Reset PP")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_AttrResetFanIn") {
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_AttrReset")
  field(VAL, "1")
  field(OMSL, "closed_loop")
  field(DOL, "$(XSPRESS3_PREFIX,undefined):ERASE_AttrReset CPP")
}

#! Further lines contain data used by VisualDCT
#! View(0,0,1.0)
#! Record("$(XSPRESS3_PREFIX,undefined):C2_AttrReset",320,51,0,0,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset.OUTA",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset.OUTA")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset.OUTB",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset.OUTB")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset.OUTC",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset.OUTC")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset.OUTD",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset.OUTD")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset.OUTE",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset.OUTE")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset.OUTF",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset.OUTF")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset.OUTG",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset.OUTG")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset.OUTH",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset.OUTH")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset.FLNK",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset.FLNK")
#! Link("$(XSPRESS3_PREFIX,undefined):C2_AttrReset.FLNK","$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2")
#! Record("$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2",640,65,0,0,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2.OUTA",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2.OUTA")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2.OUTB",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2.OUTB")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2.OUTC",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2.OUTC")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2.OUTD",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2.OUTD")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2.OUTE",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2.OUTE")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2.OUTF",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2.OUTF")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2.OUTG",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2.OUTG")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2.OUTH",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2.OUTH")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2.FLNK",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2.FLNK")
#! Link("$(XSPRESS3_PREFIX,undefined):C2_AttrReset_2.FLNK","$(XSPRESS3_PREFIX,undefined):C2_AttrReset_3")
#! Record("$(XSPRESS3_PREFIX,undefined):C2_AttrReset_3",940,79,0,0,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset_3")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset_3.OUTA",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset_3.OUTA")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset_3.OUTB",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset_3.OUTB")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset_3.OUTC",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset_3.OUTC")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset_3.OUTD",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset_3.OUTD")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset_3.OUTE",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset_3.OUTE")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset_3.OUTF",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset_3.OUTF")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset_3.OUTG",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset_3.OUTG")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrReset_3.OUTH",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrReset_3.OUTH")
#! Record("$(XSPRESS3_PREFIX,undefined):C2_AttrResetFanIn",60,48,0,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrResetFanIn")
#! Field("$(XSPRESS3_PREFIX,undefined):C2_AttrResetFanIn.FLNK",16777215,1,"$(XSPRESS3_PREFIX,undefined):C2_AttrResetFanIn.FLNK")
#! Link("$(XSPRESS3_PREFIX,undefined):C2_AttrResetFanIn.FLNK","$(XSPRESS3_PREFIX,undefined):C2_AttrReset")
#! Visibility("$(XSPRESS3_PREFIX,undefined):C2_AttrResetFanIn.DOL",1)
#####################################################################
#
# Records to do an array update on all the NDAttribute plugins for a channel.
# This will call array callbacks to update the array with any 
# remaining points.
#
# This should be processed at the end of each acqusition.
#
#####################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_AttrUpdateFanIn") {
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_AttrUpdate")
  field(VAL, "1")
  field(OMSL, "closed_loop")
  field(DOL, "$(XSPRESS3_PREFIX,undefined):UPDATE_AttrUpdate CPP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_AttrUpdate")
{
   field(PINI, "YES")
   field(VAL, "1")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Update PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Update PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Update PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Update PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Update PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Update PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Update PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Update PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_AttrUpdate_2")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_AttrUpdate_2")
{
   field(VAL, "1")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Update PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Update PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Update PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Update PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Update PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Update PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Update PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Update PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_AttrUpdate_3")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_AttrUpdate_3")
{
   field(VAL, "1")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Update PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Update PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Update PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Update PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Update PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Update PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Update PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Update PP")
}
##########################################################################
# Add in records to set SCA related parameters.
# Note: the actual SCA data is displayed to the user using 
# the NDAttribute plugin.
##########################################################################

#All good SCA

# ///
# /// Set the SCA 4 threshold on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA4_THRESHOLD")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_SCA4_THRESHOLD")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 4 threshold on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA4_THRESHOLD_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_SCA4_THRESHOLD")
   field(SCAN, "I/O Intr")
}

#Window 1 SCA

# ///
# /// Set the SCA 5 high level window limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA5_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_SCA5_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 5 high level window limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA5_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_SCA5_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the SCA 5 low level window limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA5_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_SCA5_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 5 low level window limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA5_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_SCA5_LLM")
   field(SCAN, "I/O Intr")
}


#Window 2 SCA

# ///
# /// Set the SCA 6 high level window limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA6_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_SCA6_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 6 high level window limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA6_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_SCA6_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the SCA 6 low level window limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA6_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_SCA6_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 6 low level window limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA6_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_SCA6_LLM")
   field(SCAN, "I/O Intr")
}


##########################################################################
# Dead Time Correction Parameters Read At Connection Time
##########################################################################
# Event width from libx3
record(ai, "$(XSPRESS3_PREFIX,undefined):C2_EventWidth_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3,1,5)XSP3_EVENT_WIDTH")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(PREC, "1")
}

# Total deadtime = allevent*event width + time in reset
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_DeadTime_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Value_RBV NPP NMS") # All Event
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Value_RBV NPP NMS") # Reset Ticks
    field(INPC, "$(XSPRESS3_PREFIX,undefined):C2_EventWidth_RBV NPP NMS") # Event Width
    field(INPD, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Value_RBV NPP NMS") # Frame Time
    field(CALC, "(A*(C+1)+B)/D*100")
    field(PREC, "5")
    #field(SCAN, ".1 second")
    field(SCAN, "Passive")
    #field(SCAN, "I/O Intr")
}

# Deadtime Correction Factor
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_DTCFactor_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_DeadTime_RBV:Value_RBV NPP NMS") # All Event
    field(CALC, "100/(100-A)")
    field(PREC, "5")
    #field(SCAN, ".1 second")
    field(SCAN, "Passive")
}

# X3 Deadtime Correction Factor
record(ai, "$(XSPRESS3_PREFIX,undefined):C2_X3DTCFactor_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3,1,5)XSP3_DTC_FACTOR")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(PREC, "5")
}

# ///
# /// Read the Dead Time Correction Flags.
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_DTC_FLAGS_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_DTC_FLAGS")
   field(SCAN, "I/O Intr")
}

# ///
# /// Read the Dead Time Correction All Event Grad parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C2_DTC_AEG_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_DTC_AEG")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

# ///
# /// Read the Dead Time Correction All Event Offset parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C2_DTC_AEO_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_DTC_AEO")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

# ///
# /// Read the Dead Time Correction In Window Grad parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C2_DTC_IWG_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_DTC_IWG")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

# ///
# /// Read the Dead Time Correction In Window Offset parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C2_DTC_IWO_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_DTC_IWO")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

##########################################################################
# Add in MCA ROI records.
# Note: the actual ROI data is displayed to the user using 
# the NDAttribute plugin.
##########################################################################

# ///
# /// Set the MCA ROI1 high level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI1_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI1_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI1 high level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI1_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI1_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI1 low level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI1_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI1_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI1 low level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI1_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI1_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI2 high level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI2_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI2_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI2 high level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI2_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI2_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI2 low level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI2_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI2_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI2 low level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI2_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI2_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI3 high level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI3_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI3_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI3 high level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI3_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI3_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI3 low level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI3_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI3_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI3 low level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI3_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI3_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI4 high level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI4_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI4_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI4 high level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI4_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI4_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI4 low level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI4_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI4_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI4 low level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI4_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI4_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI5 high level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI5_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI5_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI5 high level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI5_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI5_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI5 low level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI5_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI5_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI5 low level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI5_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI5_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI6 high level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI6_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI6_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI6 high level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI6_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI6_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI6 low level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI6_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI6_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI6 low level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI6_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI6_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI7 high level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI7_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI7_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI7 high level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI7_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI7_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI7 low level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI7_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI7_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI7 low level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI7_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI7_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI8 high level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI8_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI8_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI8 high level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI8_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI8_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI8 low level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI8_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI8_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI8 low level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI8_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI8_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI9 high level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI9_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI9_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI9 high level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI9_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI9_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI9 low level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI9_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI9_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI9 low level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI9_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI9_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI10 high level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI10_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI10_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI10 high level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI10_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI10_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI10 low level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI10_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI10_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI10 low level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI10_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI10_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI11 high level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI11_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI11_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI11 high level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI11_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI11_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI11 low level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI11_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI11_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI11 low level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI11_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI11_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI12 high level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI12_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI12_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI12 high level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI12_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI12_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI12 low level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI12_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI12_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI12 low level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI12_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI12_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI13 high level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI13_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI13_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI13 high level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI13_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI13_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI13 low level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI13_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI13_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI13 low level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI13_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI13_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI14 high level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI14_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI14_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI14 high level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI14_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI14_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI14 low level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI14_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI14_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI14 low level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI14_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI14_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI15 high level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI15_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI15_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI15 high level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI15_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI15_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI15 low level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI15_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI15_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI15 low level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI15_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI15_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI16 high level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI16_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI16_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI16 high level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI16_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI16_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI16 low level limit on channel 2
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI16_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI16_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI16 low level limit on channel 2
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_MCA_ROI16_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,1,5)XSP3_CHAN_ROI16_LLM")
   field(SCAN, "I/O Intr")
}


##########################################################################
# Add in all the NDAttributePlugin records.
##########################################################################
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA0,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA0,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA0,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA0,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA0,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA0,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA0,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_SCA0,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA0,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA1,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA1,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA1,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA1,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA1,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_SCA1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA2,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA2,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA2,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA2,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA2,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_SCA2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA3,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA3,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA3,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA3,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA3,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_SCA3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA4,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA4,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA4,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA4,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA4,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_SCA4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA5,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA5,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA5,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA5,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA5,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_SCA5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA6,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA6,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA6,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA6,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA6,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_SCA6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA7,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA7,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA7,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA7,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA7,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_SCA7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI1,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI1,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI1,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI1,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI1,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI2,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI2,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI2,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI2,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI2,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI3,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI3,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI3,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI3,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI3,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI4,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI4,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI4,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI4,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI4,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI5,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI5,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI5,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI5,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI5,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI6,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI6,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI6,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI6,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI6,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI7,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI7,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI7,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI7,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI7,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI8,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI8,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI8,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI8,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI8,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI8,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI8,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI8,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI8,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI9,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI9,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI9,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI9,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI9,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI9,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI9,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI9,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI9,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI10,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI10,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI10,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI10,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI10,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI10,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI10,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI10,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI10,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI11,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI11,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI11,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI11,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI11,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI11,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI11,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI11,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI11,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI12,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI12,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI12,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI12,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI12,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI12,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI12,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI12,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI12,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI13,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI13,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI13,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI13,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI13,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI13,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI13,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI13,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI13,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI14,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI14,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI14,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI14,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI14,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI14,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI14,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI14,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI14,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI15,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI15,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI15,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI15,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI15,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI15,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI15,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI15,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI15,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI16,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI16,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI16,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI16,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI16,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI16,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI16,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI16,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI16,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}#######################################################
# Database records for an Xspress3 channel
# Matthew Pearson/Nick Rees
# Sept 2014
#
# Macros:
# % macro,  P,           Device prefix
# % macro,  R,           Device suffix
# % macro,  PORT,        Asyn port name
# % macro,  ADDR,        Asyn address
# % macro,  TIMEOUT,     Asyn timeout
# % macro,  CHAN,        Channel number
# % macro,  NELEMENTS,   Number of elements in NDAttribute waveform
#
# The following just forces the Diamond iocbuilder to recognise that
# the NELEMENTS macro is needed - it is used in an included file,
# but not this file
# % 4096
#
# Set the channel specific attribute names.
# These are used in the templates below that deal with the channel
# specific areaDetector plugins.
##########################################################################

##########################################################################
# Add in the records that enable and disable all the
# areaDetector channel specific plugins.
##########################################################################

####################################################################
#
# Records to enable and disable all the plugins for specific channels.
# Doing ROI and channel access for each channel can be CPU intensive.
# So it is best to disable channels and ROIs not in use.
#
#####################################################################


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_PluginControlVal")
{
   field(VAL, "1")
   field(ONAM, "Enabled")
   field(ZNAM, "Disabled")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_PluginControl.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_PluginControl")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C3_PluginControlVal.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROI3:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):ARR3:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):ROISUM3:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:EnableCallbacks PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:EnableCallbacks PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:EnableCallbacks PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:EnableCallbacks PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:EnableCallbacks PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_PluginControl_2.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_PluginControl_2")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C3_PluginControlVal.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:EnableCallbacks PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:EnableCallbacks PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:EnableCallbacks PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:EnableCallbacks PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:EnableCallbacks PP")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_PluginControlValExtraROI")
{
   field(VAL, "1")
   field(ONAM, "Enabled")
   field(ZNAM, "Disabled")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_PluginControl_3.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_PluginControl_3")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C3_PluginControlValExtraROI.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:EnableCallbacks PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:EnableCallbacks PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:EnableCallbacks PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:EnableCallbacks PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:EnableCallbacks PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_PluginControl_4.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_PluginControl_4")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C3_PluginControlValExtraROI.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:EnableCallbacks PP")
}#! Generated by VisualDCT v2.6
#! DBDSTART
#! DBDEND


#####################################################################
#
# Records to do a reset on all the NDAttribute plugins for a channel.
# This will reset the ArrayCounter and clear the plugin data.
#
# This is set to process at startup so the time series waveforms will
# start collecting data as soon as we start, without doing a high
# level ERASE.
#
#####################################################################
record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_AttrReset") {
  field(PINI, "YES")
  field(VAL, "1")
  field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Reset PP")
  field(OUTB, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Reset PP")
  field(OUTC, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Reset PP")
  field(OUTD, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Reset PP")
  field(OUTE, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Reset PP")
  field(OUTF, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Reset PP")
  field(OUTG, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Reset PP")
  field(OUTH, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Reset PP")
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2") {
  field(VAL, "1")
  field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Reset PP")
  field(OUTB, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Reset PP")
  field(OUTC, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Reset PP")
  field(OUTD, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Reset PP")
  field(OUTE, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Reset PP")
  field(OUTF, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Reset PP")
  field(OUTG, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Reset PP")
  field(OUTH, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Reset PP")
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_AttrReset_3")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_AttrReset_3") {
  field(VAL, "1")
  field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Reset PP")
  field(OUTB, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Reset PP")
  field(OUTC, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Reset PP")
  field(OUTD, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Reset PP")
  field(OUTE, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Reset PP")
  field(OUTF, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Reset PP")
  field(OUTG, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Reset PP")
  field(OUTH, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Reset PP")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_AttrResetFanIn") {
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_AttrReset")
  field(VAL, "1")
  field(OMSL, "closed_loop")
  field(DOL, "$(XSPRESS3_PREFIX,undefined):ERASE_AttrReset CPP")
}

#! Further lines contain data used by VisualDCT
#! View(0,0,1.0)
#! Record("$(XSPRESS3_PREFIX,undefined):C3_AttrReset",320,51,0,0,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset.OUTA",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset.OUTA")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset.OUTB",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset.OUTB")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset.OUTC",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset.OUTC")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset.OUTD",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset.OUTD")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset.OUTE",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset.OUTE")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset.OUTF",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset.OUTF")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset.OUTG",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset.OUTG")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset.OUTH",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset.OUTH")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset.FLNK",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset.FLNK")
#! Link("$(XSPRESS3_PREFIX,undefined):C3_AttrReset.FLNK","$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2")
#! Record("$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2",640,65,0,0,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2.OUTA",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2.OUTA")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2.OUTB",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2.OUTB")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2.OUTC",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2.OUTC")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2.OUTD",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2.OUTD")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2.OUTE",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2.OUTE")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2.OUTF",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2.OUTF")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2.OUTG",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2.OUTG")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2.OUTH",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2.OUTH")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2.FLNK",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2.FLNK")
#! Link("$(XSPRESS3_PREFIX,undefined):C3_AttrReset_2.FLNK","$(XSPRESS3_PREFIX,undefined):C3_AttrReset_3")
#! Record("$(XSPRESS3_PREFIX,undefined):C3_AttrReset_3",940,79,0,0,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset_3")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset_3.OUTA",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset_3.OUTA")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset_3.OUTB",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset_3.OUTB")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset_3.OUTC",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset_3.OUTC")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset_3.OUTD",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset_3.OUTD")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset_3.OUTE",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset_3.OUTE")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset_3.OUTF",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset_3.OUTF")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset_3.OUTG",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset_3.OUTG")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrReset_3.OUTH",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrReset_3.OUTH")
#! Record("$(XSPRESS3_PREFIX,undefined):C3_AttrResetFanIn",60,48,0,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrResetFanIn")
#! Field("$(XSPRESS3_PREFIX,undefined):C3_AttrResetFanIn.FLNK",16777215,1,"$(XSPRESS3_PREFIX,undefined):C3_AttrResetFanIn.FLNK")
#! Link("$(XSPRESS3_PREFIX,undefined):C3_AttrResetFanIn.FLNK","$(XSPRESS3_PREFIX,undefined):C3_AttrReset")
#! Visibility("$(XSPRESS3_PREFIX,undefined):C3_AttrResetFanIn.DOL",1)
#####################################################################
#
# Records to do an array update on all the NDAttribute plugins for a channel.
# This will call array callbacks to update the array with any 
# remaining points.
#
# This should be processed at the end of each acqusition.
#
#####################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_AttrUpdateFanIn") {
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_AttrUpdate")
  field(VAL, "1")
  field(OMSL, "closed_loop")
  field(DOL, "$(XSPRESS3_PREFIX,undefined):UPDATE_AttrUpdate CPP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_AttrUpdate")
{
   field(PINI, "YES")
   field(VAL, "1")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Update PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Update PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Update PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Update PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Update PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Update PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Update PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Update PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_AttrUpdate_2")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_AttrUpdate_2")
{
   field(VAL, "1")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Update PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Update PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Update PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Update PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Update PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Update PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Update PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Update PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_AttrUpdate_3")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_AttrUpdate_3")
{
   field(VAL, "1")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Update PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Update PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Update PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Update PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Update PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Update PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Update PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Update PP")
}
##########################################################################
# Add in records to set SCA related parameters.
# Note: the actual SCA data is displayed to the user using 
# the NDAttribute plugin.
##########################################################################

#All good SCA

# ///
# /// Set the SCA 4 threshold on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA4_THRESHOLD")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_SCA4_THRESHOLD")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 4 threshold on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA4_THRESHOLD_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_SCA4_THRESHOLD")
   field(SCAN, "I/O Intr")
}

#Window 1 SCA

# ///
# /// Set the SCA 5 high level window limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA5_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_SCA5_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 5 high level window limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA5_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_SCA5_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the SCA 5 low level window limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA5_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_SCA5_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 5 low level window limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA5_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_SCA5_LLM")
   field(SCAN, "I/O Intr")
}


#Window 2 SCA

# ///
# /// Set the SCA 6 high level window limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA6_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_SCA6_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 6 high level window limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA6_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_SCA6_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the SCA 6 low level window limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA6_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_SCA6_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 6 low level window limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA6_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_SCA6_LLM")
   field(SCAN, "I/O Intr")
}


##########################################################################
# Dead Time Correction Parameters Read At Connection Time
##########################################################################
# Event width from libx3
record(ai, "$(XSPRESS3_PREFIX,undefined):C3_EventWidth_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3,2,5)XSP3_EVENT_WIDTH")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(PREC, "1")
}

# Total deadtime = allevent*event width + time in reset
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_DeadTime_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Value_RBV NPP NMS") # All Event
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Value_RBV NPP NMS") # Reset Ticks
    field(INPC, "$(XSPRESS3_PREFIX,undefined):C3_EventWidth_RBV NPP NMS") # Event Width
    field(INPD, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Value_RBV NPP NMS") # Frame Time
    field(CALC, "(A*(C+1)+B)/D*100")
    field(PREC, "5")
    #field(SCAN, ".1 second")
    field(SCAN, "Passive")
    #field(SCAN, "I/O Intr")
}

# Deadtime Correction Factor
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_DTCFactor_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_DeadTime_RBV:Value_RBV NPP NMS") # All Event
    field(CALC, "100/(100-A)")
    field(PREC, "5")
    #field(SCAN, ".1 second")
    field(SCAN, "Passive")
}

# X3 Deadtime Correction Factor
record(ai, "$(XSPRESS3_PREFIX,undefined):C3_X3DTCFactor_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3,2,5)XSP3_DTC_FACTOR")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(PREC, "5")
}

# ///
# /// Read the Dead Time Correction Flags.
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_DTC_FLAGS_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_DTC_FLAGS")
   field(SCAN, "I/O Intr")
}

# ///
# /// Read the Dead Time Correction All Event Grad parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C3_DTC_AEG_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_DTC_AEG")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

# ///
# /// Read the Dead Time Correction All Event Offset parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C3_DTC_AEO_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_DTC_AEO")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

# ///
# /// Read the Dead Time Correction In Window Grad parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C3_DTC_IWG_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_DTC_IWG")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

# ///
# /// Read the Dead Time Correction In Window Offset parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C3_DTC_IWO_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_DTC_IWO")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

##########################################################################
# Add in MCA ROI records.
# Note: the actual ROI data is displayed to the user using 
# the NDAttribute plugin.
##########################################################################

# ///
# /// Set the MCA ROI1 high level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI1_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI1_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI1 high level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI1_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI1_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI1 low level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI1_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI1_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI1 low level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI1_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI1_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI2 high level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI2_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI2_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI2 high level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI2_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI2_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI2 low level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI2_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI2_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI2 low level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI2_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI2_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI3 high level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI3_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI3_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI3 high level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI3_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI3_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI3 low level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI3_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI3_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI3 low level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI3_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI3_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI4 high level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI4_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI4_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI4 high level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI4_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI4_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI4 low level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI4_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI4_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI4 low level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI4_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI4_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI5 high level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI5_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI5_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI5 high level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI5_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI5_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI5 low level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI5_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI5_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI5 low level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI5_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI5_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI6 high level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI6_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI6_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI6 high level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI6_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI6_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI6 low level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI6_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI6_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI6 low level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI6_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI6_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI7 high level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI7_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI7_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI7 high level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI7_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI7_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI7 low level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI7_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI7_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI7 low level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI7_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI7_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI8 high level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI8_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI8_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI8 high level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI8_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI8_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI8 low level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI8_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI8_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI8 low level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI8_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI8_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI9 high level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI9_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI9_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI9 high level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI9_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI9_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI9 low level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI9_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI9_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI9 low level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI9_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI9_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI10 high level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI10_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI10_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI10 high level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI10_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI10_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI10 low level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI10_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI10_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI10 low level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI10_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI10_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI11 high level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI11_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI11_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI11 high level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI11_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI11_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI11 low level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI11_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI11_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI11 low level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI11_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI11_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI12 high level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI12_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI12_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI12 high level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI12_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI12_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI12 low level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI12_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI12_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI12 low level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI12_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI12_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI13 high level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI13_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI13_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI13 high level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI13_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI13_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI13 low level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI13_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI13_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI13 low level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI13_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI13_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI14 high level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI14_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI14_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI14 high level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI14_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI14_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI14 low level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI14_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI14_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI14 low level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI14_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI14_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI15 high level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI15_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI15_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI15 high level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI15_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI15_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI15 low level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI15_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI15_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI15 low level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI15_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI15_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI16 high level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI16_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI16_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI16 high level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI16_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI16_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI16 low level limit on channel 3
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI16_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI16_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI16 low level limit on channel 3
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_MCA_ROI16_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,2,5)XSP3_CHAN_ROI16_LLM")
   field(SCAN, "I/O Intr")
}


##########################################################################
# Add in all the NDAttributePlugin records.
##########################################################################
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA0,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA0,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA0,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA0,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA0,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA0,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA0,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_SCA0,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA0,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA1,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA1,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA1,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA1,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA1,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_SCA1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA2,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA2,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA2,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA2,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA2,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_SCA2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA3,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA3,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA3,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA3,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA3,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_SCA3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA4,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA4,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA4,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA4,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA4,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_SCA4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA5,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA5,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA5,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA5,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA5,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_SCA5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA6,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA6,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA6,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA6,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA6,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_SCA6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA7,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA7,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA7,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA7,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA7,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_SCA7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI1,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI1,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI1,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI1,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI1,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI2,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI2,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI2,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI2,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI2,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI3,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI3,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI3,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI3,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI3,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI4,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI4,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI4,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI4,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI4,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI5,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI5,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI5,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI5,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI5,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI6,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI6,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI6,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI6,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI6,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI7,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI7,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI7,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI7,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI7,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI8,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI8,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI8,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI8,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI8,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI8,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI8,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI8,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI8,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI9,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI9,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI9,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI9,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI9,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI9,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI9,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI9,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI9,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI10,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI10,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI10,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI10,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI10,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI10,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI10,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI10,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI10,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI11,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI11,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI11,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI11,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI11,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI11,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI11,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI11,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI11,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI12,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI12,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI12,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI12,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI12,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI12,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI12,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI12,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI12,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI13,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI13,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI13,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI13,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI13,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI13,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI13,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI13,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI13,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI14,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI14,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI14,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI14,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI14,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI14,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI14,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI14,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI14,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI15,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI15,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI15,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI15,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI15,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI15,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI15,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI15,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI15,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI16,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI16,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI16,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI16,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI16,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI16,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI16,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI16,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI16,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}#######################################################
# Database records for an Xspress3 channel
# Matthew Pearson/Nick Rees
# Sept 2014
#
# Macros:
# % macro,  P,           Device prefix
# % macro,  R,           Device suffix
# % macro,  PORT,        Asyn port name
# % macro,  ADDR,        Asyn address
# % macro,  TIMEOUT,     Asyn timeout
# % macro,  CHAN,        Channel number
# % macro,  NELEMENTS,   Number of elements in NDAttribute waveform
#
# The following just forces the Diamond iocbuilder to recognise that
# the NELEMENTS macro is needed - it is used in an included file,
# but not this file
# % 4096
#
# Set the channel specific attribute names.
# These are used in the templates below that deal with the channel
# specific areaDetector plugins.
##########################################################################

##########################################################################
# Add in the records that enable and disable all the
# areaDetector channel specific plugins.
##########################################################################

####################################################################
#
# Records to enable and disable all the plugins for specific channels.
# Doing ROI and channel access for each channel can be CPU intensive.
# So it is best to disable channels and ROIs not in use.
#
#####################################################################


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_PluginControlVal")
{
   field(VAL, "1")
   field(ONAM, "Enabled")
   field(ZNAM, "Disabled")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_PluginControl.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_PluginControl")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C4_PluginControlVal.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROI4:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):ARR4:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):ROISUM4:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:EnableCallbacks PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:EnableCallbacks PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:EnableCallbacks PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:EnableCallbacks PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:EnableCallbacks PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_PluginControl_2.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_PluginControl_2")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C4_PluginControlVal.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:EnableCallbacks PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:EnableCallbacks PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:EnableCallbacks PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:EnableCallbacks PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:EnableCallbacks PP")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_PluginControlValExtraROI")
{
   field(VAL, "1")
   field(ONAM, "Enabled")
   field(ZNAM, "Disabled")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_PluginControl_3.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_PluginControl_3")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C4_PluginControlValExtraROI.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:EnableCallbacks PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:EnableCallbacks PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:EnableCallbacks PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:EnableCallbacks PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:EnableCallbacks PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_PluginControl_4.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_PluginControl_4")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C4_PluginControlValExtraROI.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:EnableCallbacks PP")
}#! Generated by VisualDCT v2.6
#! DBDSTART
#! DBDEND


#####################################################################
#
# Records to do a reset on all the NDAttribute plugins for a channel.
# This will reset the ArrayCounter and clear the plugin data.
#
# This is set to process at startup so the time series waveforms will
# start collecting data as soon as we start, without doing a high
# level ERASE.
#
#####################################################################
record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_AttrReset") {
  field(PINI, "YES")
  field(VAL, "1")
  field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Reset PP")
  field(OUTB, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Reset PP")
  field(OUTC, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Reset PP")
  field(OUTD, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Reset PP")
  field(OUTE, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Reset PP")
  field(OUTF, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Reset PP")
  field(OUTG, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Reset PP")
  field(OUTH, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Reset PP")
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2") {
  field(VAL, "1")
  field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Reset PP")
  field(OUTB, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Reset PP")
  field(OUTC, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Reset PP")
  field(OUTD, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Reset PP")
  field(OUTE, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Reset PP")
  field(OUTF, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Reset PP")
  field(OUTG, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Reset PP")
  field(OUTH, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Reset PP")
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_AttrReset_3")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_AttrReset_3") {
  field(VAL, "1")
  field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Reset PP")
  field(OUTB, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Reset PP")
  field(OUTC, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Reset PP")
  field(OUTD, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Reset PP")
  field(OUTE, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Reset PP")
  field(OUTF, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Reset PP")
  field(OUTG, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Reset PP")
  field(OUTH, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Reset PP")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_AttrResetFanIn") {
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_AttrReset")
  field(VAL, "1")
  field(OMSL, "closed_loop")
  field(DOL, "$(XSPRESS3_PREFIX,undefined):ERASE_AttrReset CPP")
}

#! Further lines contain data used by VisualDCT
#! View(0,0,1.0)
#! Record("$(XSPRESS3_PREFIX,undefined):C4_AttrReset",320,51,0,0,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset.OUTA",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset.OUTA")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset.OUTB",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset.OUTB")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset.OUTC",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset.OUTC")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset.OUTD",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset.OUTD")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset.OUTE",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset.OUTE")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset.OUTF",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset.OUTF")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset.OUTG",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset.OUTG")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset.OUTH",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset.OUTH")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset.FLNK",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset.FLNK")
#! Link("$(XSPRESS3_PREFIX,undefined):C4_AttrReset.FLNK","$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2")
#! Record("$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2",640,65,0,0,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2.OUTA",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2.OUTA")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2.OUTB",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2.OUTB")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2.OUTC",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2.OUTC")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2.OUTD",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2.OUTD")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2.OUTE",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2.OUTE")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2.OUTF",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2.OUTF")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2.OUTG",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2.OUTG")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2.OUTH",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2.OUTH")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2.FLNK",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2.FLNK")
#! Link("$(XSPRESS3_PREFIX,undefined):C4_AttrReset_2.FLNK","$(XSPRESS3_PREFIX,undefined):C4_AttrReset_3")
#! Record("$(XSPRESS3_PREFIX,undefined):C4_AttrReset_3",940,79,0,0,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset_3")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset_3.OUTA",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset_3.OUTA")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset_3.OUTB",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset_3.OUTB")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset_3.OUTC",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset_3.OUTC")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset_3.OUTD",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset_3.OUTD")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset_3.OUTE",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset_3.OUTE")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset_3.OUTF",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset_3.OUTF")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset_3.OUTG",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset_3.OUTG")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrReset_3.OUTH",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrReset_3.OUTH")
#! Record("$(XSPRESS3_PREFIX,undefined):C4_AttrResetFanIn",60,48,0,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrResetFanIn")
#! Field("$(XSPRESS3_PREFIX,undefined):C4_AttrResetFanIn.FLNK",16777215,1,"$(XSPRESS3_PREFIX,undefined):C4_AttrResetFanIn.FLNK")
#! Link("$(XSPRESS3_PREFIX,undefined):C4_AttrResetFanIn.FLNK","$(XSPRESS3_PREFIX,undefined):C4_AttrReset")
#! Visibility("$(XSPRESS3_PREFIX,undefined):C4_AttrResetFanIn.DOL",1)
#####################################################################
#
# Records to do an array update on all the NDAttribute plugins for a channel.
# This will call array callbacks to update the array with any 
# remaining points.
#
# This should be processed at the end of each acqusition.
#
#####################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_AttrUpdateFanIn") {
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_AttrUpdate")
  field(VAL, "1")
  field(OMSL, "closed_loop")
  field(DOL, "$(XSPRESS3_PREFIX,undefined):UPDATE_AttrUpdate CPP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_AttrUpdate")
{
   field(PINI, "YES")
   field(VAL, "1")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Update PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Update PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Update PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Update PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Update PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Update PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Update PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Update PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_AttrUpdate_2")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_AttrUpdate_2")
{
   field(VAL, "1")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Update PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Update PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Update PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Update PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Update PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Update PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Update PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Update PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_AttrUpdate_3")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_AttrUpdate_3")
{
   field(VAL, "1")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Update PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Update PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Update PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Update PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Update PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Update PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Update PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Update PP")
}
##########################################################################
# Add in records to set SCA related parameters.
# Note: the actual SCA data is displayed to the user using 
# the NDAttribute plugin.
##########################################################################

#All good SCA

# ///
# /// Set the SCA 4 threshold on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA4_THRESHOLD")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_SCA4_THRESHOLD")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 4 threshold on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA4_THRESHOLD_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_SCA4_THRESHOLD")
   field(SCAN, "I/O Intr")
}

#Window 1 SCA

# ///
# /// Set the SCA 5 high level window limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA5_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_SCA5_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 5 high level window limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA5_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_SCA5_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the SCA 5 low level window limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA5_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_SCA5_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 5 low level window limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA5_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_SCA5_LLM")
   field(SCAN, "I/O Intr")
}


#Window 2 SCA

# ///
# /// Set the SCA 6 high level window limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA6_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_SCA6_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 6 high level window limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA6_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_SCA6_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the SCA 6 low level window limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA6_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_SCA6_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 6 low level window limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA6_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_SCA6_LLM")
   field(SCAN, "I/O Intr")
}


##########################################################################
# Dead Time Correction Parameters Read At Connection Time
##########################################################################
# Event width from libx3
record(ai, "$(XSPRESS3_PREFIX,undefined):C4_EventWidth_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3,3,5)XSP3_EVENT_WIDTH")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(PREC, "1")
}

# Total deadtime = allevent*event width + time in reset
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_DeadTime_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Value_RBV NPP NMS") # All Event
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Value_RBV NPP NMS") # Reset Ticks
    field(INPC, "$(XSPRESS3_PREFIX,undefined):C4_EventWidth_RBV NPP NMS") # Event Width
    field(INPD, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Value_RBV NPP NMS") # Frame Time
    field(CALC, "(A*(C+1)+B)/D*100")
    field(PREC, "5")
    #field(SCAN, ".1 second")
    field(SCAN, "Passive")
    #field(SCAN, "I/O Intr")
}

# Deadtime Correction Factor
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_DTCFactor_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_DeadTime_RBV:Value_RBV NPP NMS") # All Event
    field(CALC, "100/(100-A)")
    field(PREC, "5")
    #field(SCAN, ".1 second")
    field(SCAN, "Passive")
}

# X3 Deadtime Correction Factor
record(ai, "$(XSPRESS3_PREFIX,undefined):C4_X3DTCFactor_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3,3,5)XSP3_DTC_FACTOR")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(PREC, "5")
}

# ///
# /// Read the Dead Time Correction Flags.
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_DTC_FLAGS_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_DTC_FLAGS")
   field(SCAN, "I/O Intr")
}

# ///
# /// Read the Dead Time Correction All Event Grad parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C4_DTC_AEG_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_DTC_AEG")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

# ///
# /// Read the Dead Time Correction All Event Offset parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C4_DTC_AEO_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_DTC_AEO")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

# ///
# /// Read the Dead Time Correction In Window Grad parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C4_DTC_IWG_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_DTC_IWG")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

# ///
# /// Read the Dead Time Correction In Window Offset parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C4_DTC_IWO_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_DTC_IWO")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

##########################################################################
# Add in MCA ROI records.
# Note: the actual ROI data is displayed to the user using 
# the NDAttribute plugin.
##########################################################################

# ///
# /// Set the MCA ROI1 high level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI1_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI1_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI1 high level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI1_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI1_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI1 low level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI1_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI1_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI1 low level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI1_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI1_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI2 high level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI2_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI2_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI2 high level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI2_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI2_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI2 low level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI2_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI2_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI2 low level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI2_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI2_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI3 high level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI3_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI3_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI3 high level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI3_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI3_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI3 low level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI3_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI3_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI3 low level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI3_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI3_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI4 high level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI4_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI4_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI4 high level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI4_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI4_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI4 low level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI4_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI4_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI4 low level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI4_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI4_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI5 high level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI5_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI5_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI5 high level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI5_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI5_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI5 low level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI5_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI5_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI5 low level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI5_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI5_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI6 high level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI6_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI6_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI6 high level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI6_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI6_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI6 low level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI6_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI6_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI6 low level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI6_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI6_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI7 high level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI7_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI7_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI7 high level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI7_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI7_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI7 low level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI7_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI7_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI7 low level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI7_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI7_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI8 high level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI8_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI8_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI8 high level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI8_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI8_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI8 low level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI8_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI8_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI8 low level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI8_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI8_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI9 high level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI9_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI9_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI9 high level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI9_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI9_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI9 low level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI9_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI9_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI9 low level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI9_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI9_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI10 high level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI10_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI10_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI10 high level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI10_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI10_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI10 low level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI10_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI10_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI10 low level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI10_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI10_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI11 high level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI11_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI11_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI11 high level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI11_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI11_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI11 low level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI11_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI11_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI11 low level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI11_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI11_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI12 high level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI12_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI12_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI12 high level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI12_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI12_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI12 low level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI12_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI12_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI12 low level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI12_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI12_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI13 high level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI13_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI13_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI13 high level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI13_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI13_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI13 low level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI13_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI13_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI13 low level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI13_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI13_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI14 high level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI14_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI14_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI14 high level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI14_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI14_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI14 low level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI14_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI14_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI14 low level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI14_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI14_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI15 high level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI15_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI15_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI15 high level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI15_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI15_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI15 low level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI15_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI15_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI15 low level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI15_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI15_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI16 high level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI16_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI16_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI16 high level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI16_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI16_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI16 low level limit on channel 4
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI16_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI16_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI16 low level limit on channel 4
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_MCA_ROI16_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,3,5)XSP3_CHAN_ROI16_LLM")
   field(SCAN, "I/O Intr")
}


##########################################################################
# Add in all the NDAttributePlugin records.
##########################################################################
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA0,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA0,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA0,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA0,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA0,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA0,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA0,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_SCA0,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA0,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA1,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA1,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA1,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA1,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA1,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_SCA1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA2,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA2,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA2,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA2,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA2,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_SCA2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA3,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA3,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA3,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA3,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA3,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_SCA3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA4,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA4,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA4,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA4,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA4,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_SCA4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA5,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA5,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA5,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA5,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA5,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_SCA5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA6,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA6,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA6,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA6,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA6,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_SCA6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA7,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA7,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA7,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA7,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA7,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_SCA7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI1,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI1,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI1,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI1,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI1,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI2,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI2,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI2,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI2,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI2,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI3,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI3,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI3,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI3,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI3,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI4,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI4,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI4,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI4,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI4,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI5,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI5,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI5,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI5,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI5,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI6,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI6,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI6,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI6,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI6,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI7,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI7,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI7,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI7,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI7,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI8,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI8,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI8,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI8,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI8,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI8,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI8,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI8,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI8,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI9,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI9,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI9,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI9,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI9,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI9,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI9,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI9,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI9,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI10,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI10,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI10,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI10,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI10,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI10,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI10,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI10,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI10,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI11,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI11,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI11,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI11,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI11,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI11,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI11,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI11,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI11,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI12,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI12,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI12,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI12,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI12,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI12,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI12,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI12,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI12,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI13,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI13,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI13,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI13,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI13,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI13,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI13,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI13,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI13,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI14,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI14,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI14,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI14,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI14,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI14,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI14,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI14,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI14,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI15,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI15,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI15,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI15,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI15,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI15,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI15,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI15,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI15,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI16,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI16,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI16,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI16,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI16,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI16,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI16,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI16,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI16,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}#######################################################
# Database records for an Xspress3 channel
# Matthew Pearson/Nick Rees
# Sept 2014
#
# Macros:
# % macro,  P,           Device prefix
# % macro,  R,           Device suffix
# % macro,  PORT,        Asyn port name
# % macro,  ADDR,        Asyn address
# % macro,  TIMEOUT,     Asyn timeout
# % macro,  CHAN,        Channel number
# % macro,  NELEMENTS,   Number of elements in NDAttribute waveform
#
# The following just forces the Diamond iocbuilder to recognise that
# the NELEMENTS macro is needed - it is used in an included file,
# but not this file
# % 4096
#
# Set the channel specific attribute names.
# These are used in the templates below that deal with the channel
# specific areaDetector plugins.
##########################################################################

##########################################################################
# Add in the records that enable and disable all the
# areaDetector channel specific plugins.
##########################################################################

####################################################################
#
# Records to enable and disable all the plugins for specific channels.
# Doing ROI and channel access for each channel can be CPU intensive.
# So it is best to disable channels and ROIs not in use.
#
#####################################################################


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_PluginControlVal")
{
   field(VAL, "1")
   field(ONAM, "Enabled")
   field(ZNAM, "Disabled")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_PluginControl.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_PluginControl")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C5_PluginControlVal.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROI5:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):ARR5:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):ROISUM5:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:EnableCallbacks PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:EnableCallbacks PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:EnableCallbacks PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:EnableCallbacks PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:EnableCallbacks PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_PluginControl_2.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_PluginControl_2")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C5_PluginControlVal.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:EnableCallbacks PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:EnableCallbacks PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:EnableCallbacks PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:EnableCallbacks PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:EnableCallbacks PP")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_PluginControlValExtraROI")
{
   field(VAL, "1")
   field(ONAM, "Enabled")
   field(ZNAM, "Disabled")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_PluginControl_3.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_PluginControl_3")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C5_PluginControlValExtraROI.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:EnableCallbacks PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:EnableCallbacks PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:EnableCallbacks PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:EnableCallbacks PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:EnableCallbacks PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_PluginControl_4.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_PluginControl_4")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C5_PluginControlValExtraROI.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:EnableCallbacks PP")
}#! Generated by VisualDCT v2.6
#! DBDSTART
#! DBDEND


#####################################################################
#
# Records to do a reset on all the NDAttribute plugins for a channel.
# This will reset the ArrayCounter and clear the plugin data.
#
# This is set to process at startup so the time series waveforms will
# start collecting data as soon as we start, without doing a high
# level ERASE.
#
#####################################################################
record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_AttrReset") {
  field(PINI, "YES")
  field(VAL, "1")
  field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Reset PP")
  field(OUTB, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Reset PP")
  field(OUTC, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Reset PP")
  field(OUTD, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Reset PP")
  field(OUTE, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Reset PP")
  field(OUTF, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Reset PP")
  field(OUTG, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Reset PP")
  field(OUTH, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Reset PP")
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2") {
  field(VAL, "1")
  field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Reset PP")
  field(OUTB, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Reset PP")
  field(OUTC, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Reset PP")
  field(OUTD, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Reset PP")
  field(OUTE, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Reset PP")
  field(OUTF, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Reset PP")
  field(OUTG, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Reset PP")
  field(OUTH, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Reset PP")
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_AttrReset_3")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_AttrReset_3") {
  field(VAL, "1")
  field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Reset PP")
  field(OUTB, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Reset PP")
  field(OUTC, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Reset PP")
  field(OUTD, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Reset PP")
  field(OUTE, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Reset PP")
  field(OUTF, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Reset PP")
  field(OUTG, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Reset PP")
  field(OUTH, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Reset PP")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_AttrResetFanIn") {
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_AttrReset")
  field(VAL, "1")
  field(OMSL, "closed_loop")
  field(DOL, "$(XSPRESS3_PREFIX,undefined):ERASE_AttrReset CPP")
}

#! Further lines contain data used by VisualDCT
#! View(0,0,1.0)
#! Record("$(XSPRESS3_PREFIX,undefined):C5_AttrReset",320,51,0,0,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset.OUTA",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset.OUTA")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset.OUTB",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset.OUTB")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset.OUTC",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset.OUTC")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset.OUTD",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset.OUTD")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset.OUTE",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset.OUTE")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset.OUTF",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset.OUTF")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset.OUTG",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset.OUTG")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset.OUTH",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset.OUTH")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset.FLNK",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset.FLNK")
#! Link("$(XSPRESS3_PREFIX,undefined):C5_AttrReset.FLNK","$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2")
#! Record("$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2",640,65,0,0,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2.OUTA",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2.OUTA")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2.OUTB",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2.OUTB")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2.OUTC",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2.OUTC")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2.OUTD",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2.OUTD")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2.OUTE",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2.OUTE")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2.OUTF",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2.OUTF")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2.OUTG",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2.OUTG")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2.OUTH",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2.OUTH")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2.FLNK",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2.FLNK")
#! Link("$(XSPRESS3_PREFIX,undefined):C5_AttrReset_2.FLNK","$(XSPRESS3_PREFIX,undefined):C5_AttrReset_3")
#! Record("$(XSPRESS3_PREFIX,undefined):C5_AttrReset_3",940,79,0,0,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset_3")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset_3.OUTA",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset_3.OUTA")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset_3.OUTB",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset_3.OUTB")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset_3.OUTC",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset_3.OUTC")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset_3.OUTD",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset_3.OUTD")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset_3.OUTE",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset_3.OUTE")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset_3.OUTF",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset_3.OUTF")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset_3.OUTG",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset_3.OUTG")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrReset_3.OUTH",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrReset_3.OUTH")
#! Record("$(XSPRESS3_PREFIX,undefined):C5_AttrResetFanIn",60,48,0,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrResetFanIn")
#! Field("$(XSPRESS3_PREFIX,undefined):C5_AttrResetFanIn.FLNK",16777215,1,"$(XSPRESS3_PREFIX,undefined):C5_AttrResetFanIn.FLNK")
#! Link("$(XSPRESS3_PREFIX,undefined):C5_AttrResetFanIn.FLNK","$(XSPRESS3_PREFIX,undefined):C5_AttrReset")
#! Visibility("$(XSPRESS3_PREFIX,undefined):C5_AttrResetFanIn.DOL",1)
#####################################################################
#
# Records to do an array update on all the NDAttribute plugins for a channel.
# This will call array callbacks to update the array with any 
# remaining points.
#
# This should be processed at the end of each acqusition.
#
#####################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_AttrUpdateFanIn") {
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_AttrUpdate")
  field(VAL, "1")
  field(OMSL, "closed_loop")
  field(DOL, "$(XSPRESS3_PREFIX,undefined):UPDATE_AttrUpdate CPP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_AttrUpdate")
{
   field(PINI, "YES")
   field(VAL, "1")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Update PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Update PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Update PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Update PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Update PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Update PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Update PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Update PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_AttrUpdate_2")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_AttrUpdate_2")
{
   field(VAL, "1")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Update PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Update PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Update PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Update PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Update PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Update PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Update PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Update PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_AttrUpdate_3")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_AttrUpdate_3")
{
   field(VAL, "1")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Update PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Update PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Update PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Update PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Update PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Update PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Update PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Update PP")
}
##########################################################################
# Add in records to set SCA related parameters.
# Note: the actual SCA data is displayed to the user using 
# the NDAttribute plugin.
##########################################################################

#All good SCA

# ///
# /// Set the SCA 4 threshold on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA4_THRESHOLD")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_SCA4_THRESHOLD")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 4 threshold on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA4_THRESHOLD_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_SCA4_THRESHOLD")
   field(SCAN, "I/O Intr")
}

#Window 1 SCA

# ///
# /// Set the SCA 5 high level window limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA5_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_SCA5_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 5 high level window limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA5_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_SCA5_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the SCA 5 low level window limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA5_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_SCA5_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 5 low level window limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA5_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_SCA5_LLM")
   field(SCAN, "I/O Intr")
}


#Window 2 SCA

# ///
# /// Set the SCA 6 high level window limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA6_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_SCA6_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 6 high level window limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA6_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_SCA6_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the SCA 6 low level window limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA6_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_SCA6_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 6 low level window limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA6_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_SCA6_LLM")
   field(SCAN, "I/O Intr")
}


##########################################################################
# Dead Time Correction Parameters Read At Connection Time
##########################################################################
# Event width from libx3
record(ai, "$(XSPRESS3_PREFIX,undefined):C5_EventWidth_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3,4,5)XSP3_EVENT_WIDTH")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(PREC, "1")
}

# Total deadtime = allevent*event width + time in reset
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_DeadTime_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Value_RBV NPP NMS") # All Event
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Value_RBV NPP NMS") # Reset Ticks
    field(INPC, "$(XSPRESS3_PREFIX,undefined):C5_EventWidth_RBV NPP NMS") # Event Width
    field(INPD, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Value_RBV NPP NMS") # Frame Time
    field(CALC, "(A*(C+1)+B)/D*100")
    field(PREC, "5")
    #field(SCAN, ".1 second")
    field(SCAN, "Passive")
    #field(SCAN, "I/O Intr")
}

# Deadtime Correction Factor
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_DTCFactor_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_DeadTime_RBV:Value_RBV NPP NMS") # All Event
    field(CALC, "100/(100-A)")
    field(PREC, "5")
    #field(SCAN, ".1 second")
    field(SCAN, "Passive")
}

# X3 Deadtime Correction Factor
record(ai, "$(XSPRESS3_PREFIX,undefined):C5_X3DTCFactor_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3,4,5)XSP3_DTC_FACTOR")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(PREC, "5")
}

# ///
# /// Read the Dead Time Correction Flags.
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_DTC_FLAGS_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_DTC_FLAGS")
   field(SCAN, "I/O Intr")
}

# ///
# /// Read the Dead Time Correction All Event Grad parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C5_DTC_AEG_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_DTC_AEG")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

# ///
# /// Read the Dead Time Correction All Event Offset parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C5_DTC_AEO_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_DTC_AEO")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

# ///
# /// Read the Dead Time Correction In Window Grad parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C5_DTC_IWG_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_DTC_IWG")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

# ///
# /// Read the Dead Time Correction In Window Offset parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C5_DTC_IWO_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_DTC_IWO")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

##########################################################################
# Add in MCA ROI records.
# Note: the actual ROI data is displayed to the user using 
# the NDAttribute plugin.
##########################################################################

# ///
# /// Set the MCA ROI1 high level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI1_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI1_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI1 high level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI1_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI1_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI1 low level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI1_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI1_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI1 low level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI1_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI1_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI2 high level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI2_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI2_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI2 high level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI2_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI2_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI2 low level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI2_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI2_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI2 low level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI2_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI2_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI3 high level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI3_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI3_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI3 high level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI3_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI3_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI3 low level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI3_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI3_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI3 low level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI3_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI3_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI4 high level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI4_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI4_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI4 high level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI4_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI4_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI4 low level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI4_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI4_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI4 low level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI4_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI4_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI5 high level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI5_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI5_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI5 high level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI5_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI5_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI5 low level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI5_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI5_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI5 low level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI5_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI5_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI6 high level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI6_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI6_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI6 high level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI6_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI6_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI6 low level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI6_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI6_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI6 low level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI6_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI6_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI7 high level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI7_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI7_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI7 high level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI7_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI7_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI7 low level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI7_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI7_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI7 low level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI7_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI7_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI8 high level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI8_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI8_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI8 high level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI8_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI8_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI8 low level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI8_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI8_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI8 low level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI8_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI8_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI9 high level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI9_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI9_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI9 high level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI9_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI9_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI9 low level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI9_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI9_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI9 low level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI9_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI9_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI10 high level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI10_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI10_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI10 high level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI10_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI10_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI10 low level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI10_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI10_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI10 low level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI10_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI10_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI11 high level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI11_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI11_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI11 high level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI11_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI11_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI11 low level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI11_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI11_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI11 low level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI11_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI11_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI12 high level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI12_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI12_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI12 high level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI12_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI12_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI12 low level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI12_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI12_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI12 low level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI12_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI12_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI13 high level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI13_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI13_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI13 high level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI13_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI13_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI13 low level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI13_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI13_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI13 low level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI13_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI13_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI14 high level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI14_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI14_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI14 high level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI14_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI14_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI14 low level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI14_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI14_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI14 low level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI14_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI14_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI15 high level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI15_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI15_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI15 high level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI15_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI15_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI15 low level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI15_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI15_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI15 low level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI15_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI15_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI16 high level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI16_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI16_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI16 high level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI16_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI16_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI16 low level limit on channel 5
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI16_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI16_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI16 low level limit on channel 5
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_MCA_ROI16_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,4,5)XSP3_CHAN_ROI16_LLM")
   field(SCAN, "I/O Intr")
}


##########################################################################
# Add in all the NDAttributePlugin records.
##########################################################################
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA0,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA0,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA0,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA0,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA0,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA0,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA0,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_SCA0,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA0,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA1,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA1,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA1,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA1,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA1,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_SCA1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA2,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA2,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA2,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA2,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA2,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_SCA2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA3,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA3,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA3,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA3,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA3,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_SCA3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA4,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA4,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA4,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA4,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA4,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_SCA4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA5,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA5,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA5,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA5,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA5,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_SCA5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA6,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA6,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA6,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA6,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA6,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_SCA6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA7,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA7,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA7,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA7,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA7,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_SCA7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI1,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI1,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI1,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI1,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI1,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI2,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI2,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI2,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI2,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI2,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI3,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI3,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI3,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI3,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI3,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI4,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI4,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI4,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI4,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI4,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI5,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI5,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI5,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI5,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI5,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI6,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI6,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI6,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI6,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI6,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI7,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI7,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI7,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI7,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI7,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI8,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI8,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI8,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI8,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI8,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI8,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI8,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI8,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI8,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI9,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI9,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI9,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI9,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI9,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI9,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI9,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI9,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI9,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI10,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI10,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI10,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI10,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI10,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI10,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI10,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI10,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI10,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI11,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI11,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI11,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI11,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI11,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI11,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI11,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI11,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI11,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI12,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI12,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI12,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI12,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI12,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI12,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI12,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI12,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI12,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI13,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI13,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI13,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI13,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI13,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI13,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI13,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI13,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI13,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI14,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI14,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI14,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI14,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI14,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI14,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI14,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI14,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI14,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI15,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI15,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI15,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI15,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI15,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI15,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI15,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI15,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI15,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI16,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI16,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI16,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI16,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI16,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI16,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI16,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI16,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI16,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}#######################################################
# Database records for an Xspress3 channel
# Matthew Pearson/Nick Rees
# Sept 2014
#
# Macros:
# % macro,  P,           Device prefix
# % macro,  R,           Device suffix
# % macro,  PORT,        Asyn port name
# % macro,  ADDR,        Asyn address
# % macro,  TIMEOUT,     Asyn timeout
# % macro,  CHAN,        Channel number
# % macro,  NELEMENTS,   Number of elements in NDAttribute waveform
#
# The following just forces the Diamond iocbuilder to recognise that
# the NELEMENTS macro is needed - it is used in an included file,
# but not this file
# % 4096
#
# Set the channel specific attribute names.
# These are used in the templates below that deal with the channel
# specific areaDetector plugins.
##########################################################################

##########################################################################
# Add in the records that enable and disable all the
# areaDetector channel specific plugins.
##########################################################################

####################################################################
#
# Records to enable and disable all the plugins for specific channels.
# Doing ROI and channel access for each channel can be CPU intensive.
# So it is best to disable channels and ROIs not in use.
#
#####################################################################


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_PluginControlVal")
{
   field(VAL, "1")
   field(ONAM, "Enabled")
   field(ZNAM, "Disabled")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_PluginControl.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_PluginControl")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C6_PluginControlVal.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROI6:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):ARR6:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):ROISUM6:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:EnableCallbacks PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:EnableCallbacks PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:EnableCallbacks PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:EnableCallbacks PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:EnableCallbacks PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_PluginControl_2.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_PluginControl_2")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C6_PluginControlVal.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:EnableCallbacks PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:EnableCallbacks PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:EnableCallbacks PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:EnableCallbacks PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:EnableCallbacks PP")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_PluginControlValExtraROI")
{
   field(VAL, "1")
   field(ONAM, "Enabled")
   field(ZNAM, "Disabled")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_PluginControl_3.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_PluginControl_3")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C6_PluginControlValExtraROI.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:EnableCallbacks PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:EnableCallbacks PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:EnableCallbacks PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:EnableCallbacks PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:EnableCallbacks PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_PluginControl_4.PROC")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_PluginControl_4")
{
   field(DOL, "$(XSPRESS3_PREFIX,undefined):C6_PluginControlValExtraROI.VAL")
   field(OMSL, "closed_loop")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:EnableCallbacks PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:EnableCallbacks PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:EnableCallbacks PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:EnableCallbacks PP")
}#! Generated by VisualDCT v2.6
#! DBDSTART
#! DBDEND


#####################################################################
#
# Records to do a reset on all the NDAttribute plugins for a channel.
# This will reset the ArrayCounter and clear the plugin data.
#
# This is set to process at startup so the time series waveforms will
# start collecting data as soon as we start, without doing a high
# level ERASE.
#
#####################################################################
record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_AttrReset") {
  field(PINI, "YES")
  field(VAL, "1")
  field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Reset PP")
  field(OUTB, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Reset PP")
  field(OUTC, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Reset PP")
  field(OUTD, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Reset PP")
  field(OUTE, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Reset PP")
  field(OUTF, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Reset PP")
  field(OUTG, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Reset PP")
  field(OUTH, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Reset PP")
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2") {
  field(VAL, "1")
  field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Reset PP")
  field(OUTB, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Reset PP")
  field(OUTC, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Reset PP")
  field(OUTD, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Reset PP")
  field(OUTE, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Reset PP")
  field(OUTF, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Reset PP")
  field(OUTG, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Reset PP")
  field(OUTH, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Reset PP")
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_AttrReset_3")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_AttrReset_3") {
  field(VAL, "1")
  field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Reset PP")
  field(OUTB, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Reset PP")
  field(OUTC, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Reset PP")
  field(OUTD, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Reset PP")
  field(OUTE, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Reset PP")
  field(OUTF, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Reset PP")
  field(OUTG, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Reset PP")
  field(OUTH, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Reset PP")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_AttrResetFanIn") {
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_AttrReset")
  field(VAL, "1")
  field(OMSL, "closed_loop")
  field(DOL, "$(XSPRESS3_PREFIX,undefined):ERASE_AttrReset CPP")
}

#! Further lines contain data used by VisualDCT
#! View(0,0,1.0)
#! Record("$(XSPRESS3_PREFIX,undefined):C6_AttrReset",320,51,0,0,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset.OUTA",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset.OUTA")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset.OUTB",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset.OUTB")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset.OUTC",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset.OUTC")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset.OUTD",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset.OUTD")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset.OUTE",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset.OUTE")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset.OUTF",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset.OUTF")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset.OUTG",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset.OUTG")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset.OUTH",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset.OUTH")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset.FLNK",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset.FLNK")
#! Link("$(XSPRESS3_PREFIX,undefined):C6_AttrReset.FLNK","$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2")
#! Record("$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2",640,65,0,0,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2.OUTA",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2.OUTA")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2.OUTB",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2.OUTB")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2.OUTC",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2.OUTC")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2.OUTD",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2.OUTD")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2.OUTE",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2.OUTE")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2.OUTF",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2.OUTF")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2.OUTG",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2.OUTG")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2.OUTH",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2.OUTH")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2.FLNK",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2.FLNK")
#! Link("$(XSPRESS3_PREFIX,undefined):C6_AttrReset_2.FLNK","$(XSPRESS3_PREFIX,undefined):C6_AttrReset_3")
#! Record("$(XSPRESS3_PREFIX,undefined):C6_AttrReset_3",940,79,0,0,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset_3")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset_3.OUTA",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset_3.OUTA")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset_3.OUTB",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset_3.OUTB")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset_3.OUTC",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset_3.OUTC")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset_3.OUTD",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset_3.OUTD")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset_3.OUTE",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset_3.OUTE")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset_3.OUTF",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset_3.OUTF")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset_3.OUTG",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset_3.OUTG")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrReset_3.OUTH",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrReset_3.OUTH")
#! Record("$(XSPRESS3_PREFIX,undefined):C6_AttrResetFanIn",60,48,0,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrResetFanIn")
#! Field("$(XSPRESS3_PREFIX,undefined):C6_AttrResetFanIn.FLNK",16777215,1,"$(XSPRESS3_PREFIX,undefined):C6_AttrResetFanIn.FLNK")
#! Link("$(XSPRESS3_PREFIX,undefined):C6_AttrResetFanIn.FLNK","$(XSPRESS3_PREFIX,undefined):C6_AttrReset")
#! Visibility("$(XSPRESS3_PREFIX,undefined):C6_AttrResetFanIn.DOL",1)
#####################################################################
#
# Records to do an array update on all the NDAttribute plugins for a channel.
# This will call array callbacks to update the array with any 
# remaining points.
#
# This should be processed at the end of each acqusition.
#
#####################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_AttrUpdateFanIn") {
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_AttrUpdate")
  field(VAL, "1")
  field(OMSL, "closed_loop")
  field(DOL, "$(XSPRESS3_PREFIX,undefined):UPDATE_AttrUpdate CPP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_AttrUpdate")
{
   field(PINI, "YES")
   field(VAL, "1")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Update PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Update PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Update PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Update PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Update PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Update PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Update PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Update PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_AttrUpdate_2")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_AttrUpdate_2")
{
   field(VAL, "1")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Update PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Update PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Update PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Update PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Update PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Update PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Update PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Update PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_AttrUpdate_3")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_AttrUpdate_3")
{
   field(VAL, "1")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Update PP")
   field(OUTB, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Update PP")
   field(OUTC, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Update PP")
   field(OUTD, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Update PP")
   field(OUTE, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Update PP")
   field(OUTF, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Update PP")
   field(OUTG, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Update PP")
   field(OUTH, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Update PP")
}
##########################################################################
# Add in records to set SCA related parameters.
# Note: the actual SCA data is displayed to the user using 
# the NDAttribute plugin.
##########################################################################

#All good SCA

# ///
# /// Set the SCA 4 threshold on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA4_THRESHOLD")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_SCA4_THRESHOLD")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 4 threshold on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA4_THRESHOLD_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_SCA4_THRESHOLD")
   field(SCAN, "I/O Intr")
}

#Window 1 SCA

# ///
# /// Set the SCA 5 high level window limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA5_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_SCA5_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 5 high level window limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA5_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_SCA5_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the SCA 5 low level window limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA5_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_SCA5_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 5 low level window limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA5_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_SCA5_LLM")
   field(SCAN, "I/O Intr")
}


#Window 2 SCA

# ///
# /// Set the SCA 6 high level window limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA6_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_SCA6_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 6 high level window limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA6_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_SCA6_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the SCA 6 low level window limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA6_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_SCA6_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the SCA 6 low level window limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA6_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_SCA6_LLM")
   field(SCAN, "I/O Intr")
}


##########################################################################
# Dead Time Correction Parameters Read At Connection Time
##########################################################################
# Event width from libx3
record(ai, "$(XSPRESS3_PREFIX,undefined):C6_EventWidth_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3,5,5)XSP3_EVENT_WIDTH")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(PREC, "1")
}

# Total deadtime = allevent*event width + time in reset
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_DeadTime_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Value_RBV NPP NMS") # All Event
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Value_RBV NPP NMS") # Reset Ticks
    field(INPC, "$(XSPRESS3_PREFIX,undefined):C6_EventWidth_RBV NPP NMS") # Event Width
    field(INPD, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Value_RBV NPP NMS") # Frame Time
    field(CALC, "(A*(C+1)+B)/D*100")
    field(PREC, "5")
    #field(SCAN, ".1 second")
    field(SCAN, "Passive")
    #field(SCAN, "I/O Intr")
}

# Deadtime Correction Factor
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_DTCFactor_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_DeadTime_RBV:Value_RBV NPP NMS") # All Event
    field(CALC, "100/(100-A)")
    field(PREC, "5")
    #field(SCAN, ".1 second")
    field(SCAN, "Passive")
}

# X3 Deadtime Correction Factor
record(ai, "$(XSPRESS3_PREFIX,undefined):C6_X3DTCFactor_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3,5,5)XSP3_DTC_FACTOR")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(PREC, "5")
}

# ///
# /// Read the Dead Time Correction Flags.
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_DTC_FLAGS_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_DTC_FLAGS")
   field(SCAN, "I/O Intr")
}

# ///
# /// Read the Dead Time Correction All Event Grad parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C6_DTC_AEG_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_DTC_AEG")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

# ///
# /// Read the Dead Time Correction All Event Offset parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C6_DTC_AEO_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_DTC_AEO")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

# ///
# /// Read the Dead Time Correction In Window Grad parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C6_DTC_IWG_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_DTC_IWG")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

# ///
# /// Read the Dead Time Correction In Window Offset parameter.
# ///
record(ai, "$(XSPRESS3_PREFIX,undefined):C6_DTC_IWO_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_DTC_IWO")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

##########################################################################
# Add in MCA ROI records.
# Note: the actual ROI data is displayed to the user using 
# the NDAttribute plugin.
##########################################################################

# ///
# /// Set the MCA ROI1 high level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI1_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI1_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI1 high level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI1_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI1_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI1 low level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI1_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI1_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI1 low level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI1_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI1_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI2 high level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI2_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI2_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI2 high level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI2_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI2_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI2 low level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI2_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI2_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI2 low level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI2_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI2_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI3 high level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI3_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI3_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI3 high level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI3_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI3_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI3 low level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI3_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI3_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI3 low level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI3_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI3_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI4 high level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI4_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI4_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI4 high level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI4_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI4_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI4 low level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI4_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI4_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI4 low level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI4_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI4_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI5 high level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI5_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI5_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI5 high level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI5_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI5_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI5 low level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI5_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI5_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI5 low level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI5_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI5_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI6 high level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI6_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI6_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI6 high level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI6_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI6_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI6 low level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI6_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI6_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI6 low level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI6_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI6_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI7 high level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI7_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI7_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI7 high level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI7_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI7_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI7 low level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI7_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI7_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI7 low level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI7_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI7_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI8 high level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI8_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI8_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI8 high level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI8_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI8_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI8 low level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI8_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI8_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI8 low level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI8_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI8_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI9 high level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI9_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI9_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI9 high level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI9_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI9_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI9 low level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI9_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI9_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI9 low level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI9_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI9_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI10 high level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI10_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI10_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI10 high level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI10_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI10_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI10 low level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI10_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI10_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI10 low level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI10_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI10_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI11 high level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI11_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI11_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI11 high level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI11_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI11_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI11 low level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI11_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI11_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI11 low level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI11_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI11_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI12 high level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI12_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI12_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI12 high level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI12_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI12_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI12 low level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI12_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI12_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI12 low level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI12_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI12_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI13 high level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI13_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI13_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI13 high level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI13_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI13_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI13 low level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI13_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI13_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI13 low level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI13_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI13_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI14 high level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI14_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI14_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI14 high level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI14_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI14_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI14 low level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI14_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI14_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI14 low level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI14_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI14_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI15 high level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI15_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI15_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI15 high level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI15_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI15_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI15 low level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI15_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI15_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI15 low level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI15_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI15_LLM")
   field(SCAN, "I/O Intr")
}



# ///
# /// Set the MCA ROI16 high level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI16_HLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI16_HLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI16 high level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI16_HLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI16_HLM")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the MCA ROI16 low level limit on channel 6
# ///
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI16_LLM")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI16_LLM")
   field(VAL,  "0")
}

# ///
# /// Get the MCA ROI16 low level limit on channel 6
# ///
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_MCA_ROI16_LLM_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3,5,5)XSP3_CHAN_ROI16_LLM")
   field(SCAN, "I/O Intr")
}


##########################################################################
# Add in all the NDAttributePlugin records.
##########################################################################
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA0,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA0,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA0,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA0,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA0,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA0,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA0,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_SCA0,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA0,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA1,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA1,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA1,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA1,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA1,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_SCA1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA2,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA2,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA2,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA2,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA2,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_SCA2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA3,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA3,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA3,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA3,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA3,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_SCA3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA4,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA4,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA4,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA4,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA4,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_SCA4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA5,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA5,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA5,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA5,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA5,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_SCA5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA6,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA6,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA6,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA6,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA6,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_SCA6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA7,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA7,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA7,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA7,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA7,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_SCA7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI1,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI1,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI1,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI1,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI1,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI1,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI1,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI2,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI2,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI2,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI2,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI2,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI2,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI2,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI3,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI3,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI3,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI3,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI3,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI3,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI3,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI4,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI4,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI4,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI4,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI4,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI4,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI4,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI5,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI5,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI5,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI5,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI5,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI5,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI5,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI6,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI6,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI6,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI6,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI6,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI6,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI6,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI7,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI7,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI7,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI7,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI7,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI7,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI7,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI8,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI8,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI8,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI8,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI8,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI8,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI8,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI8,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI8,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI9,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI9,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI9,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI9,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI9,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI9,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI9,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI9,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI9,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI10,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI10,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI10,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI10,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI10,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI10,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI10,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI10,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI10,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI11,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI11,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI11,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI11,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI11,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI11,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI11,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI11,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI11,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI12,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI12,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI12,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI12,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI12,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI12,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI12,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI12,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI12,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI13,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI13,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI13,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI13,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI13,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI13,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI13,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI13,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI13,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI14,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI14,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI14,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI14,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI14,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI14,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI14,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI14,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI14,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI15,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI15,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI15,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI15,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI15,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI15,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI15,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI15,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI15,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI16,0,5)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI16,0,5)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI16,0,5)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI16,0,5)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI16,0,5)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI16,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI16,0,5)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI16,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI16,0,5)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_SCA0,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_SCA0,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_SCA0,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA0,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA0,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA0,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA0,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA0,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_SCA0,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_SCA0,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA0,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA0,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA0,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA0,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA0,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA0,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA0,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA0:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA0:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA0:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA0,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA0,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA0,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA0,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA0,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA0,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA0,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_SCA0,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA0,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA0,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA0,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA0,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA0,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA0,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_SCA0:AsynIO")
{
    field(PORT, XSP3.C1_SCA0)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_SCA1,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_SCA1,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_SCA1,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA1,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA1,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA1,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_SCA1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_SCA1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA1,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA1,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA1,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA1,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA1,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA1:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA1:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA1:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA1,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA1,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA1,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA1,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA1,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA1,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA1,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_SCA1,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA1,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA1,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA1,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA1,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA1,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA1,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_SCA1:AsynIO")
{
    field(PORT, XSP3.C1_SCA1)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_SCA2,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_SCA2,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_SCA2,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA2,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA2,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA2,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_SCA2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_SCA2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA2,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA2,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA2,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA2,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA2,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA2:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA2:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA2:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA2,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA2,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA2,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA2,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA2,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA2,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA2,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_SCA2,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA2,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA2,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA2,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA2,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA2,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA2,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_SCA2:AsynIO")
{
    field(PORT, XSP3.C1_SCA2)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_SCA3,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_SCA3,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_SCA3,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA3,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA3,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA3,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_SCA3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_SCA3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA3,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA3,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA3,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA3,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA3,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA3:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA3:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA3:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA3,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA3,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA3,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA3,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA3,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA3,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA3,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_SCA3,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA3,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA3,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA3,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA3,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA3,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA3,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_SCA3:AsynIO")
{
    field(PORT, XSP3.C1_SCA3)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_SCA4,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_SCA4,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_SCA4,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA4,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA4,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA4,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_SCA4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_SCA4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA4,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA4,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA4,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA4,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA4,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA4:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA4:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA4:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA4,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA4,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA4,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA4,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA4,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA4,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA4,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_SCA4,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA4,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA4,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA4,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA4,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA4,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA4,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_SCA4:AsynIO")
{
    field(PORT, XSP3.C1_SCA4)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_SCA5,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_SCA5,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_SCA5,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA5,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA5,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA5,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_SCA5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_SCA5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA5,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA5,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA5,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA5,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA5,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA5:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA5:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA5:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA5,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA5,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA5,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA5,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA5,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA5,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA5,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_SCA5,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA5,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA5,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA5,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA5,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA5,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA5,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_SCA5:AsynIO")
{
    field(PORT, XSP3.C1_SCA5)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_SCA6,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_SCA6,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_SCA6,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA6,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA6,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA6,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_SCA6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_SCA6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA6,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA6,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA6,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA6,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA6,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA6:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA6:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA6:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA6,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA6,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA6,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA6,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA6,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA6,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA6,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_SCA6,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA6,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA6,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA6,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA6,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA6,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA6,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_SCA6:AsynIO")
{
    field(PORT, XSP3.C1_SCA6)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_SCA7,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_SCA7,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_SCA7,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA7,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA7,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA7,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_SCA7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_SCA7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA7,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA7,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_SCA7,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA7,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA7,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA7:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA7:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_SCA7:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA7,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA7,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA7,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA7,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA7,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA7,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_SCA7,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_SCA7,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA7,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA7,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA7,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA7,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA7,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_SCA7,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_SCA7:AsynIO")
{
    field(PORT, XSP3.C1_SCA7)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI1,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI1,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_ROI1,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI1,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI1,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI1,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_ROI1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI1,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI1,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI1,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI1,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI1,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI1:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI1:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI1:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI1,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI1,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI1,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI1,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI1,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI1,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI1,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI1,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI1,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI1,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI1,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI1,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI1,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI1,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_ROI1:AsynIO")
{
    field(PORT, XSP3.C1_ROI1)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI2,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI2,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_ROI2,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI2,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI2,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI2,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_ROI2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI2,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI2,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI2,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI2,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI2,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI2:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI2:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI2:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI2,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI2,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI2,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI2,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI2,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI2,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI2,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI2,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI2,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI2,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI2,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI2,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI2,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI2,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_ROI2:AsynIO")
{
    field(PORT, XSP3.C1_ROI2)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI3,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI3,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_ROI3,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI3,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI3,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI3,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_ROI3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI3,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI3,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI3,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI3,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI3,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI3:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI3:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI3:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI3,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI3,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI3,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI3,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI3,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI3,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI3,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI3,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI3,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI3,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI3,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI3,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI3,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI3,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_ROI3:AsynIO")
{
    field(PORT, XSP3.C1_ROI3)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI4,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI4,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_ROI4,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI4,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI4,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI4,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_ROI4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI4,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI4,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI4,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI4,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI4,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI4:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI4:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI4:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI4,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI4,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI4,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI4,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI4,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI4,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI4,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI4,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI4,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI4,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI4,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI4,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI4,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI4,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_ROI4:AsynIO")
{
    field(PORT, XSP3.C1_ROI4)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI5,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI5,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_ROI5,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI5,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI5,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI5,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_ROI5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI5,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI5,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI5,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI5,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI5,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI5:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI5:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI5:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI5,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI5,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI5,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI5,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI5,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI5,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI5,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI5,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI5,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI5,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI5,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI5,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI5,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI5,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_ROI5:AsynIO")
{
    field(PORT, XSP3.C1_ROI5)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI6,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI6,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_ROI6,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI6,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI6,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI6,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_ROI6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI6,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI6,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI6,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI6,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI6,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI6:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI6:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI6:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI6,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI6,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI6,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI6,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI6,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI6,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI6,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI6,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI6,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI6,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI6,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI6,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI6,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI6,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_ROI6:AsynIO")
{
    field(PORT, XSP3.C1_ROI6)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI7,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI7,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_ROI7,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI7,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI7,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI7,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_ROI7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI7,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI7,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI7,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI7,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI7,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI7:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI7:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI7:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI7,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI7,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI7,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI7,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI7,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI7,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI7,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI7,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI7,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI7,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI7,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI7,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI7,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI7,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_ROI7:AsynIO")
{
    field(PORT, XSP3.C1_ROI7)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI8,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI8,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_ROI8,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI8,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI8,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI8,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI8,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI8,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_ROI8,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI8,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI8,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI8,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI8,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI8,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI8,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI8,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI8,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI8:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI8:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI8:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI8,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI8,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI8,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI8,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI8,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI8,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI8,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI8,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI8,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI8,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI8,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI8,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI8,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI8,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_ROI8:AsynIO")
{
    field(PORT, XSP3.C1_ROI8)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI9,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI9,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_ROI9,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI9,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI9,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI9,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI9,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI9,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_ROI9,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI9,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI9,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI9,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI9,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI9,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI9,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI9,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI9,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI9:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI9:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI9:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI9,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI9,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI9,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI9,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI9,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI9,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI9,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI9,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI9,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI9,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI9,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI9,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI9,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI9,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_ROI9:AsynIO")
{
    field(PORT, XSP3.C1_ROI9)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI10,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI10,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_ROI10,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI10,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI10,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI10,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI10,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI10,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_ROI10,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI10,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI10,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI10,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI10,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI10,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI10,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI10,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI10,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI10:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI10:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI10:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI10,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI10,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI10,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI10,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI10,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI10,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI10,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI10,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI10,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI10,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI10,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI10,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI10,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI10,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_ROI10:AsynIO")
{
    field(PORT, XSP3.C1_ROI10)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI11,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI11,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_ROI11,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI11,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI11,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI11,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI11,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI11,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_ROI11,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI11,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI11,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI11,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI11,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI11,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI11,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI11,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI11,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI11:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI11:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI11:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI11,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI11,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI11,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI11,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI11,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI11,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI11,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI11,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI11,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI11,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI11,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI11,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI11,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI11,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_ROI11:AsynIO")
{
    field(PORT, XSP3.C1_ROI11)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI12,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI12,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_ROI12,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI12,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI12,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI12,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI12,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI12,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_ROI12,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI12,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI12,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI12,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI12,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI12,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI12,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI12,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI12,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI12:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI12:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI12:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI12,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI12,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI12,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI12,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI12,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI12,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI12,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI12,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI12,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI12,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI12,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI12,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI12,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI12,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_ROI12:AsynIO")
{
    field(PORT, XSP3.C1_ROI12)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI13,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI13,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_ROI13,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI13,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI13,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI13,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI13,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI13,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_ROI13,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI13,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI13,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI13,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI13,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI13,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI13,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI13,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI13,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI13:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI13:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI13:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI13,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI13,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI13,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI13,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI13,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI13,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI13,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI13,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI13,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI13,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI13,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI13,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI13,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI13,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_ROI13:AsynIO")
{
    field(PORT, XSP3.C1_ROI13)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI14,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI14,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_ROI14,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI14,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI14,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI14,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI14,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI14,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_ROI14,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI14,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI14,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI14,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI14,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI14,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI14,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI14,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI14,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI14:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI14:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI14:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI14,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI14,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI14,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI14,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI14,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI14,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI14,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI14,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI14,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI14,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI14,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI14,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI14,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI14,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_ROI14:AsynIO")
{
    field(PORT, XSP3.C1_ROI14)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI15,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI15,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_ROI15,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI15,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI15,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI15,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI15,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI15,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_ROI15,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI15,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI15,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI15,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI15,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI15,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI15,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI15,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI15,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI15:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI15:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI15:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI15,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI15,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI15,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI15,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI15,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI15,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI15,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI15,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI15,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI15,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI15,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI15,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI15,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI15,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_ROI15:AsynIO")
{
    field(PORT, XSP3.C1_ROI15)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI16,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C1_ROI16,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C1_ROI16,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI16,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI16,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI16,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI16,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI16,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C1_ROI16,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI16,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI16,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI16,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI16,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI16,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C1_ROI16,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI16,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI16,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI16:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI16:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C1_ROI16:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI16,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI16,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI16,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI16,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI16,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI16,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C1_ROI16,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C1_ROI16,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI16,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI16,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI16,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI16,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI16,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C1_ROI16,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C1_ROI16:AsynIO")
{
    field(PORT, XSP3.C1_ROI16)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI1:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROI1,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI1:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROI1,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROI1:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ROI1,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI1:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ROI1,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI1:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI1,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI1,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROI1:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI1:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROI1:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ROI1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI1:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROI1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROI1:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI1:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ROI1:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI1,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI1,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ROI1:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI1:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROI1:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI1:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI1,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI1,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI1,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI1:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ROI1:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI1:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROI1:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI1:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROI1:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROI1:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI1:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROI1:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROI1:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI1,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ROI1:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI1:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROI1:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI1,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ROI1:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ROI1,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI1:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ROI1:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI1:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI1:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI1:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROI1:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI1:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI1:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI1:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROI1:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI1:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI1:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI1:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI1:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI1:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI1:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI1,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI1:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROI1,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ROI1:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ROI1,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI1:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROI1,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI1:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROI1,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI1:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI1:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI1:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ROI1:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI1:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROI1:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ROI1:AsynIO")
{
    field(PORT, XSP3.ROI1)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROISUM1:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ROISUM1,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3.PROC")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ROISUM1,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM1:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM1,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM1,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM1:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM1:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROISUM1:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ROISUM1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM1:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROISUM1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM1:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM1:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM1:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM1,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM1,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ROISUM1:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM1:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROISUM1:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM1:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM1,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM1,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM1,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM1:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ROISUM1:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM1:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROISUM1:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM1:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROISUM1:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROISUM1:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM1:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROISUM1:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROISUM1:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM1,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ROISUM1:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM1:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROISUM1:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM1,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ROISUM1:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ROISUM1,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM1:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ROISUM1:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM1:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM1:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM1:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROISUM1:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM1:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM1:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM1:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROISUM1:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM1:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM1:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM1:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM1:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM1:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM1:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM1,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM1:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROISUM1,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ROISUM1:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ROISUM1,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM1:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM1:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM1:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM1:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM1:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ROISUM1:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM1:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROISUM1:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ROISUM1:AsynIO")
{
    field(PORT, XSP3.ROISUM1)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARR1:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARR1,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARR1:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARR1,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ARR1:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ARR1,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3.ROI1")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARR1:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ARR1,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARR1:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR1,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR1:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR1,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARR1:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARR1:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ARR1:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ARR1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR1:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARR1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARR1:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARR1:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ARR1:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR1,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR1:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR1,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ARR1:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR1:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARR1:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARR1:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR1,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR1:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR1,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR1:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR1,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR1:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ARR1:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR1:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARR1:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR1:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARR1:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARR1:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR1:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARR1:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARR1:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR1:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR1,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ARR1:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR1:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARR1:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ARR1:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR1,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARR1:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ARR1,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR1:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ARR1:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR1:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR1:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR1:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR1:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARR1:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR1:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR1:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR1:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR1:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARR1:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR1:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR1:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR1:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR1:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARR1:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR1,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARR1:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR1,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARR1:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR1,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ARR1:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR1,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR1:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARR1,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ARR1:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ARR1,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR1:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARR1,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR1:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR1,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR1:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARR1,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR1:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR1:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR1,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR1:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR1:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR1,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR1:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ARR1:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR1:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARR1:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ARR1:AsynIO")
{
    field(PORT, XSP3.ARR1)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARRSUM1,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARRSUM1,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ARRSUM1,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3.ROISUM1")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ARRSUM1,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM1,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM1,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ARRSUM1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARRSUM1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM1,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM1,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM1,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM1,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM1,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARRSUM1:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARRSUM1:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARRSUM1:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM1,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM1,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ARRSUM1,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM1:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM1:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM1:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM1,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM1,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM1,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM1,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARRSUM1,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ARRSUM1,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARRSUM1,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM1,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARRSUM1,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM1,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM1,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ARRSUM1:AsynIO")
{
    field(PORT, XSP3.ARRSUM1)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_SCA0,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_SCA0,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_SCA0,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA0,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA0,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA0,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA0,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA0,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_SCA0,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_SCA0,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA0,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA0,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA0,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA0,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA0,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA0,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA0,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA0:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA0:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA0:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA0,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA0,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA0,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA0,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA0,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA0,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA0,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_SCA0,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA0,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA0,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA0,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA0,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA0,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA0,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_SCA0:AsynIO")
{
    field(PORT, XSP3.C2_SCA0)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_SCA1,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_SCA1,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_SCA1,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA1,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA1,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA1,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_SCA1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_SCA1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA1,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA1,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA1,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA1,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA1,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA1:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA1:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA1:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA1,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA1,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA1,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA1,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA1,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA1,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA1,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_SCA1,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA1,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA1,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA1,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA1,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA1,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA1,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_SCA1:AsynIO")
{
    field(PORT, XSP3.C2_SCA1)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_SCA2,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_SCA2,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_SCA2,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA2,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA2,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA2,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_SCA2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_SCA2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA2,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA2,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA2,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA2,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA2,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA2:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA2:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA2:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA2,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA2,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA2,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA2,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA2,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA2,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA2,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_SCA2,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA2,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA2,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA2,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA2,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA2,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA2,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_SCA2:AsynIO")
{
    field(PORT, XSP3.C2_SCA2)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_SCA3,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_SCA3,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_SCA3,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA3,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA3,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA3,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_SCA3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_SCA3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA3,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA3,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA3,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA3,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA3,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA3:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA3:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA3:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA3,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA3,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA3,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA3,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA3,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA3,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA3,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_SCA3,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA3,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA3,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA3,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA3,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA3,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA3,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_SCA3:AsynIO")
{
    field(PORT, XSP3.C2_SCA3)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_SCA4,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_SCA4,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_SCA4,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA4,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA4,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA4,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_SCA4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_SCA4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA4,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA4,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA4,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA4,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA4,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA4:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA4:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA4:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA4,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA4,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA4,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA4,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA4,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA4,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA4,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_SCA4,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA4,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA4,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA4,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA4,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA4,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA4,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_SCA4:AsynIO")
{
    field(PORT, XSP3.C2_SCA4)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_SCA5,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_SCA5,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_SCA5,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA5,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA5,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA5,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_SCA5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_SCA5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA5,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA5,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA5,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA5,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA5,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA5:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA5:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA5:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA5,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA5,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA5,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA5,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA5,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA5,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA5,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_SCA5,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA5,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA5,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA5,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA5,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA5,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA5,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_SCA5:AsynIO")
{
    field(PORT, XSP3.C2_SCA5)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_SCA6,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_SCA6,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_SCA6,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA6,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA6,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA6,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_SCA6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_SCA6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA6,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA6,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA6,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA6,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA6,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA6:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA6:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA6:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA6,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA6,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA6,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA6,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA6,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA6,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA6,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_SCA6,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA6,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA6,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA6,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA6,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA6,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA6,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_SCA6:AsynIO")
{
    field(PORT, XSP3.C2_SCA6)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_SCA7,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_SCA7,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_SCA7,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA7,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA7,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA7,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_SCA7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_SCA7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA7,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA7,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_SCA7,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA7,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA7,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA7:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA7:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_SCA7:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA7,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA7,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA7,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA7,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA7,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA7,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_SCA7,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_SCA7,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA7,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA7,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA7,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA7,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA7,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_SCA7,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_SCA7:AsynIO")
{
    field(PORT, XSP3.C2_SCA7)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI1,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI1,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_ROI1,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI1,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI1,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI1,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_ROI1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI1,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI1,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI1,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI1,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI1,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI1:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI1:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI1:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI1,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI1,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI1,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI1,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI1,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI1,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI1,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI1,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI1,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI1,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI1,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI1,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI1,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI1,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_ROI1:AsynIO")
{
    field(PORT, XSP3.C2_ROI1)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI2,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI2,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_ROI2,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI2,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI2,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI2,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_ROI2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI2,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI2,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI2,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI2,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI2,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI2:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI2:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI2:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI2,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI2,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI2,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI2,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI2,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI2,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI2,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI2,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI2,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI2,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI2,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI2,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI2,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI2,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_ROI2:AsynIO")
{
    field(PORT, XSP3.C2_ROI2)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI3,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI3,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_ROI3,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI3,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI3,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI3,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_ROI3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI3,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI3,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI3,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI3,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI3,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI3:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI3:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI3:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI3,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI3,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI3,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI3,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI3,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI3,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI3,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI3,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI3,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI3,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI3,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI3,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI3,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI3,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_ROI3:AsynIO")
{
    field(PORT, XSP3.C2_ROI3)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI4,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI4,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_ROI4,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI4,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI4,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI4,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_ROI4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI4,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI4,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI4,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI4,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI4,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI4:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI4:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI4:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI4,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI4,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI4,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI4,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI4,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI4,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI4,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI4,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI4,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI4,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI4,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI4,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI4,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI4,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_ROI4:AsynIO")
{
    field(PORT, XSP3.C2_ROI4)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI5,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI5,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_ROI5,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI5,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI5,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI5,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_ROI5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI5,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI5,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI5,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI5,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI5,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI5:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI5:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI5:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI5,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI5,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI5,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI5,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI5,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI5,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI5,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI5,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI5,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI5,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI5,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI5,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI5,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI5,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_ROI5:AsynIO")
{
    field(PORT, XSP3.C2_ROI5)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI6,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI6,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_ROI6,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI6,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI6,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI6,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_ROI6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI6,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI6,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI6,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI6,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI6,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI6:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI6:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI6:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI6,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI6,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI6,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI6,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI6,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI6,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI6,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI6,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI6,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI6,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI6,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI6,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI6,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI6,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_ROI6:AsynIO")
{
    field(PORT, XSP3.C2_ROI6)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI7,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI7,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_ROI7,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI7,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI7,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI7,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_ROI7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI7,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI7,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI7,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI7,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI7,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI7:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI7:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI7:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI7,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI7,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI7,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI7,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI7,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI7,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI7,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI7,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI7,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI7,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI7,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI7,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI7,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI7,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_ROI7:AsynIO")
{
    field(PORT, XSP3.C2_ROI7)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI8,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI8,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_ROI8,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI8,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI8,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI8,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI8,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI8,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_ROI8,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI8,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI8,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI8,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI8,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI8,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI8,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI8,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI8,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI8:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI8:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI8:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI8,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI8,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI8,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI8,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI8,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI8,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI8,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI8,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI8,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI8,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI8,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI8,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI8,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI8,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_ROI8:AsynIO")
{
    field(PORT, XSP3.C2_ROI8)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI9,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI9,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_ROI9,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI9,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI9,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI9,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI9,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI9,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_ROI9,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI9,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI9,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI9,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI9,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI9,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI9,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI9,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI9,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI9:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI9:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI9:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI9,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI9,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI9,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI9,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI9,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI9,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI9,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI9,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI9,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI9,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI9,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI9,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI9,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI9,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_ROI9:AsynIO")
{
    field(PORT, XSP3.C2_ROI9)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI10,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI10,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_ROI10,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI10,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI10,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI10,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI10,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI10,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_ROI10,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI10,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI10,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI10,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI10,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI10,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI10,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI10,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI10,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI10:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI10:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI10:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI10,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI10,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI10,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI10,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI10,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI10,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI10,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI10,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI10,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI10,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI10,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI10,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI10,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI10,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_ROI10:AsynIO")
{
    field(PORT, XSP3.C2_ROI10)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI11,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI11,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_ROI11,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI11,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI11,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI11,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI11,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI11,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_ROI11,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI11,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI11,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI11,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI11,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI11,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI11,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI11,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI11,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI11:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI11:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI11:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI11,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI11,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI11,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI11,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI11,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI11,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI11,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI11,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI11,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI11,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI11,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI11,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI11,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI11,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_ROI11:AsynIO")
{
    field(PORT, XSP3.C2_ROI11)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI12,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI12,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_ROI12,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI12,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI12,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI12,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI12,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI12,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_ROI12,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI12,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI12,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI12,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI12,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI12,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI12,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI12,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI12,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI12:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI12:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI12:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI12,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI12,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI12,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI12,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI12,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI12,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI12,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI12,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI12,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI12,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI12,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI12,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI12,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI12,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_ROI12:AsynIO")
{
    field(PORT, XSP3.C2_ROI12)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI13,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI13,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_ROI13,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI13,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI13,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI13,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI13,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI13,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_ROI13,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI13,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI13,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI13,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI13,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI13,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI13,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI13,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI13,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI13:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI13:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI13:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI13,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI13,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI13,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI13,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI13,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI13,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI13,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI13,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI13,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI13,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI13,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI13,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI13,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI13,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_ROI13:AsynIO")
{
    field(PORT, XSP3.C2_ROI13)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI14,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI14,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_ROI14,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI14,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI14,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI14,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI14,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI14,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_ROI14,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI14,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI14,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI14,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI14,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI14,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI14,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI14,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI14,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI14:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI14:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI14:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI14,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI14,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI14,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI14,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI14,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI14,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI14,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI14,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI14,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI14,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI14,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI14,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI14,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI14,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_ROI14:AsynIO")
{
    field(PORT, XSP3.C2_ROI14)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI15,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI15,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_ROI15,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI15,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI15,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI15,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI15,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI15,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_ROI15,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI15,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI15,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI15,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI15,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI15,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI15,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI15,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI15,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI15:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI15:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI15:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI15,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI15,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI15,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI15,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI15,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI15,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI15,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI15,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI15,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI15,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI15,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI15,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI15,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI15,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_ROI15:AsynIO")
{
    field(PORT, XSP3.C2_ROI15)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI16,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C2_ROI16,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C2_ROI16,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI16,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI16,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI16,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI16,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI16,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C2_ROI16,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI16,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI16,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI16,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI16,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI16,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C2_ROI16,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI16,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI16,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI16:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI16:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C2_ROI16:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI16,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI16,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI16,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI16,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI16,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI16,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C2_ROI16,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C2_ROI16,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI16,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI16,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI16,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI16,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI16,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C2_ROI16,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C2_ROI16:AsynIO")
{
    field(PORT, XSP3.C2_ROI16)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI2:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROI2,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI2:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROI2,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROI2:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ROI2,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI2:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ROI2,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI2:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI2,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI2,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROI2:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI2:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROI2:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ROI2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI2:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROI2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROI2:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI2:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ROI2:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI2,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI2,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ROI2:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI2:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROI2:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI2:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI2,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI2,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI2,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI2:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ROI2:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI2:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROI2:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI2:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROI2:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROI2:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI2:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROI2:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROI2:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI2,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ROI2:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI2:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROI2:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI2,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ROI2:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ROI2,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI2:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ROI2:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI2:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI2:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI2:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROI2:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI2:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI2:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI2:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROI2:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI2:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI2:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI2:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI2:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI2:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI2:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI2,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI2:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROI2,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ROI2:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ROI2,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI2:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROI2,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI2:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROI2,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI2:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI2:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI2:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ROI2:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI2:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROI2:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ROI2:AsynIO")
{
    field(PORT, XSP3.ROI2)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROISUM2:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ROISUM2,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3.PROC")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ROISUM2,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM2:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM2,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM2,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM2:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM2:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROISUM2:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ROISUM2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM2:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROISUM2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM2:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM2:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM2:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM2,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM2,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ROISUM2:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM2:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROISUM2:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM2:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM2,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM2,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM2,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM2:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ROISUM2:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM2:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROISUM2:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM2:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROISUM2:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROISUM2:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM2:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROISUM2:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROISUM2:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM2,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ROISUM2:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM2:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROISUM2:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM2,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ROISUM2:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ROISUM2,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM2:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ROISUM2:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM2:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM2:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM2:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROISUM2:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM2:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM2:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM2:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROISUM2:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM2:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM2:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM2:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM2:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM2:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM2:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM2,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM2:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROISUM2,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ROISUM2:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ROISUM2,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM2:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM2:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM2:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM2:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM2:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ROISUM2:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM2:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROISUM2:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ROISUM2:AsynIO")
{
    field(PORT, XSP3.ROISUM2)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARR2:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARR2,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARR2:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARR2,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ARR2:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ARR2,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3.ROI2")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARR2:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ARR2,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARR2:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR2,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR2:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR2,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARR2:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARR2:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ARR2:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ARR2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR2:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARR2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARR2:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARR2:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ARR2:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR2,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR2:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR2,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ARR2:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR2:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARR2:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARR2:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR2,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR2:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR2,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR2:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR2,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR2:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ARR2:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR2:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARR2:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR2:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARR2:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARR2:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR2:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARR2:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARR2:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR2:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR2,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ARR2:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR2:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARR2:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ARR2:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR2,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARR2:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ARR2,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR2:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ARR2:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR2:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR2:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR2:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR2:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARR2:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR2:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR2:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR2:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR2:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARR2:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR2:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR2:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR2:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR2:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARR2:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR2,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARR2:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR2,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARR2:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR2,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ARR2:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR2,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR2:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARR2,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ARR2:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ARR2,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR2:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARR2,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR2:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR2,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR2:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARR2,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR2:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR2:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR2,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR2:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR2:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR2,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR2:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ARR2:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR2:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARR2:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ARR2:AsynIO")
{
    field(PORT, XSP3.ARR2)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARRSUM2,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARRSUM2,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ARRSUM2,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3.ROISUM2")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ARRSUM2,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM2,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM2,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ARRSUM2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARRSUM2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM2,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM2,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM2,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM2,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM2,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARRSUM2:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARRSUM2:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARRSUM2:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM2,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM2,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ARRSUM2,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM2:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM2:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM2:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM2,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM2,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM2,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM2,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARRSUM2,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ARRSUM2,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARRSUM2,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM2,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARRSUM2,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM2,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM2,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ARRSUM2:AsynIO")
{
    field(PORT, XSP3.ARRSUM2)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_SCA0,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_SCA0,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_SCA0,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA0,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA0,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA0,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA0,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA0,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_SCA0,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_SCA0,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA0,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA0,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA0,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA0,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA0,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA0,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA0,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA0:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA0:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA0:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA0,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA0,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA0,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA0,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA0,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA0,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA0,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_SCA0,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA0,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA0,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA0,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA0,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA0,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA0,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_SCA0:AsynIO")
{
    field(PORT, XSP3.C3_SCA0)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_SCA1,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_SCA1,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_SCA1,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA1,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA1,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA1,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_SCA1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_SCA1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA1,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA1,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA1,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA1,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA1,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA1:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA1:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA1:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA1,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA1,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA1,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA1,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA1,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA1,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA1,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_SCA1,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA1,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA1,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA1,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA1,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA1,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA1,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_SCA1:AsynIO")
{
    field(PORT, XSP3.C3_SCA1)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_SCA2,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_SCA2,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_SCA2,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA2,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA2,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA2,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_SCA2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_SCA2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA2,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA2,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA2,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA2,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA2,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA2:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA2:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA2:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA2,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA2,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA2,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA2,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA2,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA2,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA2,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_SCA2,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA2,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA2,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA2,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA2,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA2,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA2,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_SCA2:AsynIO")
{
    field(PORT, XSP3.C3_SCA2)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_SCA3,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_SCA3,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_SCA3,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA3,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA3,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA3,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_SCA3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_SCA3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA3,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA3,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA3,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA3,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA3,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA3:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA3:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA3:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA3,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA3,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA3,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA3,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA3,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA3,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA3,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_SCA3,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA3,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA3,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA3,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA3,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA3,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA3,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_SCA3:AsynIO")
{
    field(PORT, XSP3.C3_SCA3)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_SCA4,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_SCA4,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_SCA4,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA4,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA4,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA4,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_SCA4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_SCA4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA4,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA4,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA4,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA4,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA4,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA4:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA4:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA4:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA4,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA4,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA4,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA4,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA4,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA4,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA4,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_SCA4,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA4,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA4,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA4,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA4,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA4,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA4,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_SCA4:AsynIO")
{
    field(PORT, XSP3.C3_SCA4)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_SCA5,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_SCA5,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_SCA5,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA5,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA5,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA5,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_SCA5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_SCA5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA5,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA5,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA5,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA5,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA5,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA5:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA5:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA5:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA5,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA5,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA5,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA5,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA5,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA5,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA5,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_SCA5,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA5,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA5,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA5,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA5,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA5,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA5,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_SCA5:AsynIO")
{
    field(PORT, XSP3.C3_SCA5)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_SCA6,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_SCA6,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_SCA6,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA6,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA6,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA6,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_SCA6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_SCA6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA6,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA6,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA6,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA6,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA6,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA6:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA6:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA6:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA6,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA6,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA6,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA6,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA6,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA6,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA6,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_SCA6,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA6,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA6,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA6,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA6,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA6,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA6,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_SCA6:AsynIO")
{
    field(PORT, XSP3.C3_SCA6)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_SCA7,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_SCA7,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_SCA7,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA7,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA7,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA7,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_SCA7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_SCA7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA7,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA7,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_SCA7,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA7,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA7,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA7:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA7:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_SCA7:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA7,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA7,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA7,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA7,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA7,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA7,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_SCA7,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_SCA7,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA7,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA7,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA7,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA7,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA7,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_SCA7,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_SCA7:AsynIO")
{
    field(PORT, XSP3.C3_SCA7)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI1,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI1,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_ROI1,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI1,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI1,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI1,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_ROI1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI1,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI1,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI1,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI1,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI1,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI1:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI1:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI1:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI1,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI1,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI1,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI1,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI1,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI1,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI1,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI1,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI1,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI1,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI1,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI1,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI1,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI1,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_ROI1:AsynIO")
{
    field(PORT, XSP3.C3_ROI1)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI2,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI2,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_ROI2,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI2,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI2,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI2,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_ROI2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI2,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI2,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI2,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI2,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI2,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI2:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI2:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI2:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI2,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI2,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI2,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI2,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI2,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI2,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI2,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI2,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI2,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI2,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI2,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI2,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI2,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI2,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_ROI2:AsynIO")
{
    field(PORT, XSP3.C3_ROI2)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI3,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI3,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_ROI3,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI3,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI3,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI3,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_ROI3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI3,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI3,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI3,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI3,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI3,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI3:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI3:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI3:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI3,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI3,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI3,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI3,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI3,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI3,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI3,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI3,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI3,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI3,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI3,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI3,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI3,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI3,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_ROI3:AsynIO")
{
    field(PORT, XSP3.C3_ROI3)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI4,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI4,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_ROI4,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI4,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI4,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI4,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_ROI4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI4,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI4,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI4,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI4,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI4,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI4:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI4:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI4:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI4,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI4,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI4,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI4,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI4,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI4,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI4,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI4,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI4,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI4,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI4,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI4,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI4,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI4,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_ROI4:AsynIO")
{
    field(PORT, XSP3.C3_ROI4)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI5,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI5,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_ROI5,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI5,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI5,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI5,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_ROI5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI5,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI5,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI5,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI5,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI5,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI5:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI5:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI5:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI5,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI5,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI5,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI5,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI5,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI5,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI5,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI5,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI5,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI5,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI5,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI5,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI5,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI5,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_ROI5:AsynIO")
{
    field(PORT, XSP3.C3_ROI5)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI6,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI6,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_ROI6,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI6,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI6,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI6,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_ROI6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI6,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI6,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI6,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI6,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI6,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI6:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI6:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI6:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI6,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI6,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI6,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI6,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI6,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI6,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI6,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI6,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI6,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI6,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI6,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI6,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI6,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI6,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_ROI6:AsynIO")
{
    field(PORT, XSP3.C3_ROI6)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI7,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI7,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_ROI7,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI7,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI7,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI7,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_ROI7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI7,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI7,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI7,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI7,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI7,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI7:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI7:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI7:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI7,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI7,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI7,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI7,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI7,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI7,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI7,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI7,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI7,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI7,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI7,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI7,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI7,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI7,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_ROI7:AsynIO")
{
    field(PORT, XSP3.C3_ROI7)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI8,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI8,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_ROI8,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI8,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI8,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI8,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI8,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI8,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_ROI8,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI8,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI8,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI8,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI8,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI8,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI8,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI8,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI8,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI8:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI8:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI8:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI8,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI8,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI8,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI8,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI8,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI8,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI8,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI8,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI8,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI8,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI8,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI8,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI8,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI8,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_ROI8:AsynIO")
{
    field(PORT, XSP3.C3_ROI8)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI9,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI9,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_ROI9,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI9,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI9,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI9,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI9,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI9,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_ROI9,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI9,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI9,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI9,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI9,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI9,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI9,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI9,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI9,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI9:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI9:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI9:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI9,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI9,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI9,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI9,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI9,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI9,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI9,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI9,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI9,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI9,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI9,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI9,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI9,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI9,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_ROI9:AsynIO")
{
    field(PORT, XSP3.C3_ROI9)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI10,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI10,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_ROI10,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI10,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI10,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI10,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI10,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI10,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_ROI10,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI10,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI10,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI10,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI10,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI10,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI10,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI10,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI10,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI10:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI10:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI10:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI10,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI10,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI10,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI10,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI10,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI10,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI10,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI10,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI10,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI10,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI10,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI10,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI10,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI10,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_ROI10:AsynIO")
{
    field(PORT, XSP3.C3_ROI10)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI11,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI11,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_ROI11,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI11,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI11,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI11,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI11,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI11,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_ROI11,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI11,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI11,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI11,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI11,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI11,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI11,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI11,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI11,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI11:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI11:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI11:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI11,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI11,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI11,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI11,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI11,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI11,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI11,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI11,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI11,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI11,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI11,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI11,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI11,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI11,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_ROI11:AsynIO")
{
    field(PORT, XSP3.C3_ROI11)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI12,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI12,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_ROI12,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI12,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI12,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI12,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI12,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI12,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_ROI12,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI12,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI12,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI12,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI12,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI12,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI12,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI12,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI12,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI12:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI12:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI12:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI12,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI12,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI12,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI12,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI12,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI12,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI12,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI12,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI12,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI12,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI12,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI12,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI12,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI12,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_ROI12:AsynIO")
{
    field(PORT, XSP3.C3_ROI12)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI13,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI13,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_ROI13,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI13,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI13,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI13,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI13,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI13,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_ROI13,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI13,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI13,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI13,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI13,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI13,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI13,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI13,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI13,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI13:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI13:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI13:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI13,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI13,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI13,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI13,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI13,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI13,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI13,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI13,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI13,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI13,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI13,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI13,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI13,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI13,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_ROI13:AsynIO")
{
    field(PORT, XSP3.C3_ROI13)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI14,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI14,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_ROI14,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI14,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI14,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI14,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI14,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI14,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_ROI14,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI14,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI14,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI14,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI14,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI14,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI14,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI14,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI14,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI14:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI14:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI14:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI14,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI14,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI14,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI14,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI14,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI14,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI14,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI14,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI14,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI14,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI14,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI14,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI14,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI14,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_ROI14:AsynIO")
{
    field(PORT, XSP3.C3_ROI14)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI15,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI15,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_ROI15,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI15,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI15,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI15,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI15,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI15,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_ROI15,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI15,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI15,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI15,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI15,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI15,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI15,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI15,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI15,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI15:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI15:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI15:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI15,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI15,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI15,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI15,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI15,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI15,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI15,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI15,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI15,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI15,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI15,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI15,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI15,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI15,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_ROI15:AsynIO")
{
    field(PORT, XSP3.C3_ROI15)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI16,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C3_ROI16,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C3_ROI16,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI16,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI16,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI16,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI16,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI16,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C3_ROI16,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI16,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI16,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI16,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI16,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI16,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C3_ROI16,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI16,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI16,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI16:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI16:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C3_ROI16:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI16,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI16,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI16,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI16,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI16,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI16,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C3_ROI16,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C3_ROI16,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI16,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI16,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI16,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI16,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI16,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C3_ROI16,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C3_ROI16:AsynIO")
{
    field(PORT, XSP3.C3_ROI16)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI3:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROI3,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI3:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROI3,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROI3:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ROI3,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI3:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ROI3,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI3:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI3,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI3,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROI3:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI3:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROI3:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ROI3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI3:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROI3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROI3:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI3:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ROI3:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI3,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI3,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ROI3:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI3:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROI3:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI3:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI3,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI3,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI3,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI3:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ROI3:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI3:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROI3:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI3:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROI3:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROI3:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI3:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROI3:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROI3:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI3,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ROI3:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI3:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROI3:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI3,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ROI3:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ROI3,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI3:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ROI3:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI3:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI3:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI3:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROI3:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI3:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI3:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI3:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROI3:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI3:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI3:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI3:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI3:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI3:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI3:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI3,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI3:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROI3,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ROI3:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ROI3,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI3:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROI3,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI3:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROI3,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI3:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI3:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI3:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ROI3:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI3:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROI3:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ROI3:AsynIO")
{
    field(PORT, XSP3.ROI3)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROISUM3:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ROISUM3,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3.PROC")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ROISUM3,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM3:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM3,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM3,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM3:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM3:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROISUM3:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ROISUM3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM3:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROISUM3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM3:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM3:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM3:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM3,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM3,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ROISUM3:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM3:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROISUM3:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM3:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM3,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM3,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM3,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM3:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ROISUM3:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM3:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROISUM3:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM3:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROISUM3:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROISUM3:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM3:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROISUM3:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROISUM3:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM3,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ROISUM3:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM3:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROISUM3:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM3,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ROISUM3:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ROISUM3,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM3:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ROISUM3:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM3:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM3:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM3:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROISUM3:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM3:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM3:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM3:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROISUM3:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM3:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM3:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM3:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM3:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM3:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM3:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM3,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM3:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROISUM3,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ROISUM3:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ROISUM3,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM3:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM3:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM3:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM3:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM3:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ROISUM3:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM3:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROISUM3:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ROISUM3:AsynIO")
{
    field(PORT, XSP3.ROISUM3)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARR3:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARR3,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARR3:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARR3,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ARR3:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ARR3,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3.ROI3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARR3:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ARR3,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARR3:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR3,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR3:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR3,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARR3:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARR3:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ARR3:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ARR3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR3:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARR3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARR3:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARR3:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ARR3:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR3,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR3:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR3,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ARR3:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR3:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARR3:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARR3:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR3,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR3:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR3,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR3:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR3,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR3:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ARR3:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR3:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARR3:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR3:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARR3:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARR3:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR3:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARR3:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARR3:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR3:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR3,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ARR3:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR3:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARR3:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ARR3:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR3,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARR3:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ARR3,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR3:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ARR3:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR3:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR3:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR3:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR3:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARR3:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR3:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR3:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR3:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR3:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARR3:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR3:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR3:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR3:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR3:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARR3:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR3,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARR3:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR3,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARR3:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR3,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ARR3:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR3,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR3:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARR3,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ARR3:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ARR3,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR3:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARR3,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR3:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR3,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR3:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARR3,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR3:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR3:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR3,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR3:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR3:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR3,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR3:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ARR3:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR3:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARR3:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ARR3:AsynIO")
{
    field(PORT, XSP3.ARR3)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARRSUM3,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARRSUM3,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ARRSUM3,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3.ROISUM3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ARRSUM3,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM3,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM3,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ARRSUM3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARRSUM3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM3,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM3,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM3,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM3,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM3,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARRSUM3:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARRSUM3:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARRSUM3:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM3,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM3,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ARRSUM3,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM3:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM3:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM3:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM3,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM3,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM3,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM3,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARRSUM3,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ARRSUM3,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARRSUM3,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM3,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARRSUM3,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM3,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM3,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ARRSUM3:AsynIO")
{
    field(PORT, XSP3.ARRSUM3)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_SCA0,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_SCA0,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_SCA0,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA0,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA0,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA0,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA0,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA0,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_SCA0,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_SCA0,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA0,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA0,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA0,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA0,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA0,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA0,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA0,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA0:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA0:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA0:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA0,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA0,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA0,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA0,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA0,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA0,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA0,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_SCA0,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA0,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA0,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA0,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA0,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA0,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA0,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_SCA0:AsynIO")
{
    field(PORT, XSP3.C4_SCA0)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_SCA1,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_SCA1,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_SCA1,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA1,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA1,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA1,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_SCA1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_SCA1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA1,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA1,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA1,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA1,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA1,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA1:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA1:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA1:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA1,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA1,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA1,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA1,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA1,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA1,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA1,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_SCA1,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA1,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA1,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA1,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA1,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA1,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA1,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_SCA1:AsynIO")
{
    field(PORT, XSP3.C4_SCA1)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_SCA2,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_SCA2,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_SCA2,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA2,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA2,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA2,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_SCA2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_SCA2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA2,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA2,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA2,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA2,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA2,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA2:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA2:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA2:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA2,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA2,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA2,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA2,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA2,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA2,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA2,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_SCA2,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA2,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA2,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA2,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA2,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA2,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA2,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_SCA2:AsynIO")
{
    field(PORT, XSP3.C4_SCA2)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_SCA3,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_SCA3,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_SCA3,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA3,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA3,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA3,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_SCA3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_SCA3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA3,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA3,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA3,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA3,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA3,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA3:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA3:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA3:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA3,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA3,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA3,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA3,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA3,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA3,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA3,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_SCA3,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA3,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA3,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA3,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA3,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA3,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA3,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_SCA3:AsynIO")
{
    field(PORT, XSP3.C4_SCA3)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_SCA4,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_SCA4,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_SCA4,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA4,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA4,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA4,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_SCA4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_SCA4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA4,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA4,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA4,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA4,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA4,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA4:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA4:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA4:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA4,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA4,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA4,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA4,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA4,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA4,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA4,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_SCA4,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA4,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA4,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA4,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA4,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA4,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA4,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_SCA4:AsynIO")
{
    field(PORT, XSP3.C4_SCA4)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_SCA5,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_SCA5,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_SCA5,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA5,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA5,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA5,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_SCA5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_SCA5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA5,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA5,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA5,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA5,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA5,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA5:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA5:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA5:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA5,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA5,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA5,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA5,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA5,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA5,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA5,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_SCA5,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA5,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA5,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA5,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA5,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA5,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA5,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_SCA5:AsynIO")
{
    field(PORT, XSP3.C4_SCA5)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_SCA6,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_SCA6,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_SCA6,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA6,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA6,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA6,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_SCA6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_SCA6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA6,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA6,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA6,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA6,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA6,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA6:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA6:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA6:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA6,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA6,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA6,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA6,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA6,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA6,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA6,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_SCA6,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA6,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA6,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA6,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA6,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA6,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA6,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_SCA6:AsynIO")
{
    field(PORT, XSP3.C4_SCA6)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_SCA7,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_SCA7,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_SCA7,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA7,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA7,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA7,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_SCA7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_SCA7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA7,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA7,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_SCA7,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA7,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA7,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA7:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA7:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_SCA7:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA7,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA7,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA7,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA7,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA7,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA7,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_SCA7,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_SCA7,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA7,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA7,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA7,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA7,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA7,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_SCA7,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_SCA7:AsynIO")
{
    field(PORT, XSP3.C4_SCA7)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI1,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI1,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_ROI1,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI1,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI1,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI1,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_ROI1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI1,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI1,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI1,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI1,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI1,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI1:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI1:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI1:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI1,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI1,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI1,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI1,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI1,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI1,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI1,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI1,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI1,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI1,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI1,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI1,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI1,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI1,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_ROI1:AsynIO")
{
    field(PORT, XSP3.C4_ROI1)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI2,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI2,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_ROI2,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI2,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI2,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI2,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_ROI2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI2,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI2,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI2,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI2,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI2,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI2:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI2:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI2:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI2,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI2,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI2,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI2,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI2,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI2,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI2,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI2,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI2,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI2,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI2,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI2,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI2,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI2,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_ROI2:AsynIO")
{
    field(PORT, XSP3.C4_ROI2)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI3,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI3,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_ROI3,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI3,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI3,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI3,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_ROI3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI3,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI3,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI3,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI3,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI3,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI3:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI3:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI3:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI3,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI3,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI3,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI3,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI3,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI3,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI3,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI3,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI3,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI3,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI3,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI3,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI3,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI3,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_ROI3:AsynIO")
{
    field(PORT, XSP3.C4_ROI3)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI4,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI4,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_ROI4,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI4,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI4,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI4,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_ROI4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI4,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI4,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI4,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI4,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI4,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI4:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI4:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI4:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI4,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI4,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI4,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI4,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI4,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI4,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI4,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI4,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI4,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI4,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI4,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI4,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI4,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI4,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_ROI4:AsynIO")
{
    field(PORT, XSP3.C4_ROI4)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI5,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI5,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_ROI5,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI5,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI5,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI5,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_ROI5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI5,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI5,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI5,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI5,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI5,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI5:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI5:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI5:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI5,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI5,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI5,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI5,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI5,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI5,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI5,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI5,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI5,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI5,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI5,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI5,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI5,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI5,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_ROI5:AsynIO")
{
    field(PORT, XSP3.C4_ROI5)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI6,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI6,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_ROI6,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI6,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI6,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI6,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_ROI6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI6,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI6,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI6,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI6,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI6,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI6:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI6:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI6:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI6,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI6,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI6,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI6,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI6,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI6,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI6,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI6,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI6,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI6,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI6,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI6,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI6,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI6,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_ROI6:AsynIO")
{
    field(PORT, XSP3.C4_ROI6)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI7,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI7,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_ROI7,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI7,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI7,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI7,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_ROI7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI7,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI7,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI7,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI7,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI7,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI7:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI7:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI7:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI7,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI7,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI7,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI7,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI7,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI7,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI7,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI7,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI7,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI7,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI7,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI7,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI7,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI7,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_ROI7:AsynIO")
{
    field(PORT, XSP3.C4_ROI7)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI8,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI8,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_ROI8,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI8,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI8,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI8,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI8,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI8,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_ROI8,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI8,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI8,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI8,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI8,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI8,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI8,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI8,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI8,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI8:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI8:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI8:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI8,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI8,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI8,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI8,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI8,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI8,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI8,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI8,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI8,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI8,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI8,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI8,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI8,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI8,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_ROI8:AsynIO")
{
    field(PORT, XSP3.C4_ROI8)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI9,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI9,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_ROI9,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI9,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI9,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI9,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI9,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI9,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_ROI9,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI9,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI9,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI9,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI9,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI9,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI9,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI9,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI9,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI9:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI9:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI9:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI9,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI9,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI9,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI9,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI9,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI9,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI9,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI9,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI9,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI9,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI9,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI9,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI9,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI9,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_ROI9:AsynIO")
{
    field(PORT, XSP3.C4_ROI9)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI10,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI10,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_ROI10,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI10,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI10,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI10,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI10,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI10,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_ROI10,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI10,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI10,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI10,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI10,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI10,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI10,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI10,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI10,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI10:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI10:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI10:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI10,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI10,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI10,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI10,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI10,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI10,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI10,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI10,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI10,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI10,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI10,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI10,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI10,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI10,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_ROI10:AsynIO")
{
    field(PORT, XSP3.C4_ROI10)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI11,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI11,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_ROI11,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI11,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI11,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI11,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI11,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI11,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_ROI11,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI11,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI11,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI11,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI11,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI11,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI11,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI11,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI11,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI11:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI11:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI11:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI11,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI11,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI11,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI11,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI11,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI11,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI11,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI11,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI11,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI11,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI11,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI11,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI11,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI11,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_ROI11:AsynIO")
{
    field(PORT, XSP3.C4_ROI11)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI12,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI12,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_ROI12,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI12,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI12,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI12,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI12,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI12,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_ROI12,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI12,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI12,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI12,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI12,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI12,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI12,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI12,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI12,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI12:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI12:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI12:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI12,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI12,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI12,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI12,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI12,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI12,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI12,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI12,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI12,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI12,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI12,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI12,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI12,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI12,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_ROI12:AsynIO")
{
    field(PORT, XSP3.C4_ROI12)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI13,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI13,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_ROI13,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI13,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI13,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI13,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI13,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI13,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_ROI13,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI13,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI13,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI13,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI13,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI13,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI13,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI13,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI13,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI13:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI13:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI13:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI13,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI13,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI13,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI13,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI13,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI13,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI13,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI13,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI13,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI13,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI13,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI13,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI13,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI13,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_ROI13:AsynIO")
{
    field(PORT, XSP3.C4_ROI13)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI14,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI14,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_ROI14,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI14,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI14,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI14,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI14,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI14,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_ROI14,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI14,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI14,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI14,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI14,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI14,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI14,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI14,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI14,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI14:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI14:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI14:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI14,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI14,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI14,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI14,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI14,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI14,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI14,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI14,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI14,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI14,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI14,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI14,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI14,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI14,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_ROI14:AsynIO")
{
    field(PORT, XSP3.C4_ROI14)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI15,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI15,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_ROI15,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI15,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI15,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI15,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI15,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI15,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_ROI15,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI15,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI15,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI15,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI15,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI15,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI15,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI15,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI15,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI15:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI15:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI15:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI15,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI15,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI15,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI15,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI15,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI15,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI15,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI15,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI15,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI15,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI15,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI15,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI15,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI15,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_ROI15:AsynIO")
{
    field(PORT, XSP3.C4_ROI15)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI16,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C4_ROI16,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C4_ROI16,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI16,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI16,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI16,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI16,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI16,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C4_ROI16,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI16,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI16,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI16,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI16,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI16,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C4_ROI16,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI16,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI16,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI16:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI16:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C4_ROI16:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI16,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI16,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI16,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI16,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI16,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI16,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C4_ROI16,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C4_ROI16,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI16,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI16,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI16,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI16,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI16,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C4_ROI16,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C4_ROI16:AsynIO")
{
    field(PORT, XSP3.C4_ROI16)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI4:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROI4,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI4:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROI4,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROI4:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ROI4,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI4:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ROI4,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI4:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI4,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI4,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROI4:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI4:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROI4:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ROI4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI4:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROI4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROI4:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI4:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ROI4:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI4,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI4,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ROI4:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI4:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROI4:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI4:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI4,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI4,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI4,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI4:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ROI4:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI4:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROI4:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI4:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROI4:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROI4:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI4:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROI4:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROI4:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI4,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ROI4:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI4:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROI4:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI4,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ROI4:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ROI4,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI4:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ROI4:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI4:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI4:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI4:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROI4:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI4:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI4:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI4:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROI4:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI4:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI4:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI4:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI4:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI4:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI4:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI4,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI4:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROI4,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ROI4:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ROI4,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI4:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROI4,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI4:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROI4,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI4:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI4:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI4:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ROI4:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI4:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROI4:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ROI4:AsynIO")
{
    field(PORT, XSP3.ROI4)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROISUM4:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ROISUM4,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3.PROC")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ROISUM4,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM4:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM4,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM4,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM4:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM4:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROISUM4:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ROISUM4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM4:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROISUM4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM4:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM4:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM4:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM4,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM4,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ROISUM4:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM4:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROISUM4:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM4:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM4,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM4,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM4,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM4:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ROISUM4:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM4:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROISUM4:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM4:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROISUM4:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROISUM4:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM4:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROISUM4:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROISUM4:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM4,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ROISUM4:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM4:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROISUM4:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM4,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ROISUM4:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ROISUM4,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM4:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ROISUM4:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM4:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM4:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM4:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROISUM4:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM4:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM4:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM4:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROISUM4:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM4:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM4:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM4:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM4:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM4:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM4:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM4,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM4:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROISUM4,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ROISUM4:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ROISUM4,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM4:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM4:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM4:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM4:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM4:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ROISUM4:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM4:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROISUM4:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ROISUM4:AsynIO")
{
    field(PORT, XSP3.ROISUM4)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARR4:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARR4,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARR4:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARR4,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ARR4:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ARR4,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3.ROI4")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARR4:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ARR4,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARR4:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR4,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR4:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR4,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARR4:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARR4:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ARR4:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ARR4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR4:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARR4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARR4:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARR4:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ARR4:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR4,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR4:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR4,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ARR4:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR4:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARR4:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARR4:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR4,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR4:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR4,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR4:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR4,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR4:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ARR4:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR4:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARR4:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR4:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARR4:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARR4:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR4:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARR4:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARR4:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR4:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR4,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ARR4:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR4:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARR4:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ARR4:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR4,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARR4:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ARR4,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR4:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ARR4:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR4:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR4:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR4:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR4:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARR4:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR4:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR4:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR4:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR4:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARR4:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR4:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR4:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR4:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR4:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARR4:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR4,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARR4:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR4,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARR4:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR4,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ARR4:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR4,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR4:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARR4,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ARR4:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ARR4,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR4:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARR4,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR4:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR4,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR4:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARR4,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR4:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR4:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR4,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR4:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR4:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR4,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR4:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ARR4:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR4:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARR4:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ARR4:AsynIO")
{
    field(PORT, XSP3.ARR4)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARRSUM4,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARRSUM4,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ARRSUM4,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3.ROISUM4")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ARRSUM4,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM4,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM4,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ARRSUM4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARRSUM4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM4,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM4,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM4,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM4,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM4,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARRSUM4:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARRSUM4:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARRSUM4:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM4,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM4,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ARRSUM4,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM4:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM4:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM4:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM4,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM4,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM4,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM4,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARRSUM4,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ARRSUM4,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARRSUM4,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM4,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARRSUM4,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM4,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM4,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ARRSUM4:AsynIO")
{
    field(PORT, XSP3.ARRSUM4)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_SCA0,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_SCA0,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_SCA0,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA0,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA0,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA0,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA0,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA0,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_SCA0,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_SCA0,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA0,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA0,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA0,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA0,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA0,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA0,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA0,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA0:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA0:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA0:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA0,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA0,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA0,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA0,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA0,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA0,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA0,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_SCA0,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA0,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA0,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA0,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA0,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA0,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA0,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_SCA0:AsynIO")
{
    field(PORT, XSP3.C5_SCA0)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_SCA1,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_SCA1,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_SCA1,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA1,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA1,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA1,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_SCA1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_SCA1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA1,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA1,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA1,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA1,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA1,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA1:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA1:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA1:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA1,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA1,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA1,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA1,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA1,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA1,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA1,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_SCA1,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA1,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA1,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA1,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA1,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA1,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA1,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_SCA1:AsynIO")
{
    field(PORT, XSP3.C5_SCA1)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_SCA2,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_SCA2,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_SCA2,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA2,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA2,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA2,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_SCA2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_SCA2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA2,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA2,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA2,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA2,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA2,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA2:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA2:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA2:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA2,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA2,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA2,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA2,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA2,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA2,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA2,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_SCA2,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA2,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA2,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA2,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA2,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA2,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA2,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_SCA2:AsynIO")
{
    field(PORT, XSP3.C5_SCA2)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_SCA3,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_SCA3,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_SCA3,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA3,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA3,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA3,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_SCA3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_SCA3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA3,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA3,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA3,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA3,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA3,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA3:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA3:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA3:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA3,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA3,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA3,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA3,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA3,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA3,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA3,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_SCA3,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA3,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA3,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA3,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA3,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA3,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA3,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_SCA3:AsynIO")
{
    field(PORT, XSP3.C5_SCA3)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_SCA4,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_SCA4,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_SCA4,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA4,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA4,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA4,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_SCA4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_SCA4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA4,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA4,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA4,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA4,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA4,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA4:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA4:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA4:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA4,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA4,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA4,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA4,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA4,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA4,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA4,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_SCA4,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA4,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA4,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA4,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA4,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA4,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA4,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_SCA4:AsynIO")
{
    field(PORT, XSP3.C5_SCA4)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_SCA5,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_SCA5,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_SCA5,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA5,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA5,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA5,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_SCA5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_SCA5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA5,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA5,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA5,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA5,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA5,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA5:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA5:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA5:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA5,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA5,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA5,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA5,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA5,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA5,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA5,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_SCA5,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA5,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA5,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA5,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA5,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA5,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA5,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_SCA5:AsynIO")
{
    field(PORT, XSP3.C5_SCA5)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_SCA6,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_SCA6,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_SCA6,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA6,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA6,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA6,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_SCA6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_SCA6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA6,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA6,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA6,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA6,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA6,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA6:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA6:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA6:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA6,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA6,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA6,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA6,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA6,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA6,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA6,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_SCA6,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA6,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA6,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA6,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA6,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA6,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA6,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_SCA6:AsynIO")
{
    field(PORT, XSP3.C5_SCA6)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_SCA7,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_SCA7,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_SCA7,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA7,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA7,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA7,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_SCA7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_SCA7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA7,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA7,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_SCA7,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA7,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA7,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA7:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA7:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_SCA7:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA7,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA7,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA7,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA7,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA7,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA7,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_SCA7,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_SCA7,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA7,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA7,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA7,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA7,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA7,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_SCA7,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_SCA7:AsynIO")
{
    field(PORT, XSP3.C5_SCA7)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI1,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI1,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_ROI1,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI1,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI1,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI1,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_ROI1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI1,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI1,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI1,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI1,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI1,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI1:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI1:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI1:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI1,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI1,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI1,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI1,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI1,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI1,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI1,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI1,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI1,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI1,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI1,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI1,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI1,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI1,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_ROI1:AsynIO")
{
    field(PORT, XSP3.C5_ROI1)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI2,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI2,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_ROI2,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI2,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI2,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI2,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_ROI2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI2,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI2,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI2,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI2,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI2,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI2:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI2:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI2:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI2,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI2,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI2,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI2,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI2,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI2,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI2,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI2,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI2,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI2,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI2,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI2,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI2,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI2,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_ROI2:AsynIO")
{
    field(PORT, XSP3.C5_ROI2)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI3,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI3,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_ROI3,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI3,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI3,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI3,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_ROI3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI3,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI3,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI3,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI3,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI3,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI3:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI3:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI3:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI3,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI3,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI3,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI3,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI3,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI3,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI3,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI3,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI3,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI3,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI3,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI3,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI3,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI3,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_ROI3:AsynIO")
{
    field(PORT, XSP3.C5_ROI3)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI4,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI4,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_ROI4,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI4,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI4,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI4,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_ROI4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI4,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI4,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI4,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI4,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI4,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI4:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI4:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI4:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI4,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI4,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI4,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI4,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI4,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI4,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI4,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI4,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI4,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI4,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI4,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI4,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI4,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI4,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_ROI4:AsynIO")
{
    field(PORT, XSP3.C5_ROI4)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI5,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI5,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_ROI5,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI5,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI5,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI5,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_ROI5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI5,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI5,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI5,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI5,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI5,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI5:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI5:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI5:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI5,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI5,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI5,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI5,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI5,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI5,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI5,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI5,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI5,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI5,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI5,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI5,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI5,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI5,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_ROI5:AsynIO")
{
    field(PORT, XSP3.C5_ROI5)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI6,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI6,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_ROI6,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI6,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI6,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI6,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_ROI6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI6,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI6,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI6,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI6,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI6,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI6:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI6:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI6:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI6,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI6,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI6,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI6,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI6,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI6,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI6,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI6,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI6,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI6,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI6,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI6,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI6,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI6,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_ROI6:AsynIO")
{
    field(PORT, XSP3.C5_ROI6)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI7,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI7,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_ROI7,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI7,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI7,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI7,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_ROI7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI7,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI7,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI7,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI7,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI7,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI7:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI7:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI7:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI7,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI7,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI7,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI7,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI7,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI7,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI7,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI7,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI7,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI7,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI7,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI7,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI7,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI7,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_ROI7:AsynIO")
{
    field(PORT, XSP3.C5_ROI7)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI8,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI8,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_ROI8,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI8,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI8,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI8,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI8,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI8,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_ROI8,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI8,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI8,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI8,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI8,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI8,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI8,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI8,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI8,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI8:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI8:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI8:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI8,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI8,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI8,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI8,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI8,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI8,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI8,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI8,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI8,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI8,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI8,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI8,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI8,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI8,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_ROI8:AsynIO")
{
    field(PORT, XSP3.C5_ROI8)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI9,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI9,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_ROI9,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI9,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI9,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI9,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI9,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI9,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_ROI9,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI9,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI9,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI9,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI9,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI9,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI9,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI9,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI9,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI9:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI9:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI9:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI9,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI9,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI9,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI9,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI9,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI9,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI9,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI9,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI9,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI9,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI9,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI9,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI9,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI9,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_ROI9:AsynIO")
{
    field(PORT, XSP3.C5_ROI9)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI10,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI10,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_ROI10,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI10,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI10,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI10,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI10,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI10,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_ROI10,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI10,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI10,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI10,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI10,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI10,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI10,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI10,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI10,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI10:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI10:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI10:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI10,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI10,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI10,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI10,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI10,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI10,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI10,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI10,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI10,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI10,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI10,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI10,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI10,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI10,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_ROI10:AsynIO")
{
    field(PORT, XSP3.C5_ROI10)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI11,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI11,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_ROI11,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI11,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI11,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI11,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI11,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI11,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_ROI11,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI11,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI11,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI11,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI11,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI11,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI11,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI11,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI11,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI11:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI11:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI11:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI11,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI11,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI11,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI11,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI11,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI11,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI11,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI11,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI11,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI11,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI11,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI11,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI11,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI11,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_ROI11:AsynIO")
{
    field(PORT, XSP3.C5_ROI11)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI12,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI12,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_ROI12,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI12,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI12,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI12,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI12,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI12,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_ROI12,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI12,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI12,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI12,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI12,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI12,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI12,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI12,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI12,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI12:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI12:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI12:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI12,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI12,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI12,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI12,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI12,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI12,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI12,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI12,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI12,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI12,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI12,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI12,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI12,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI12,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_ROI12:AsynIO")
{
    field(PORT, XSP3.C5_ROI12)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI13,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI13,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_ROI13,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI13,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI13,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI13,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI13,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI13,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_ROI13,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI13,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI13,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI13,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI13,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI13,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI13,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI13,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI13,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI13:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI13:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI13:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI13,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI13,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI13,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI13,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI13,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI13,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI13,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI13,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI13,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI13,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI13,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI13,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI13,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI13,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_ROI13:AsynIO")
{
    field(PORT, XSP3.C5_ROI13)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI14,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI14,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_ROI14,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI14,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI14,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI14,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI14,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI14,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_ROI14,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI14,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI14,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI14,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI14,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI14,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI14,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI14,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI14,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI14:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI14:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI14:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI14,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI14,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI14,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI14,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI14,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI14,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI14,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI14,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI14,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI14,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI14,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI14,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI14,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI14,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_ROI14:AsynIO")
{
    field(PORT, XSP3.C5_ROI14)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI15,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI15,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_ROI15,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI15,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI15,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI15,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI15,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI15,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_ROI15,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI15,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI15,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI15,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI15,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI15,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI15,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI15,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI15,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI15:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI15:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI15:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI15,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI15,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI15,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI15,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI15,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI15,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI15,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI15,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI15,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI15,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI15,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI15,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI15,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI15,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_ROI15:AsynIO")
{
    field(PORT, XSP3.C5_ROI15)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI16,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C5_ROI16,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C5_ROI16,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI16,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI16,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI16,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI16,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI16,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C5_ROI16,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI16,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI16,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI16,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI16,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI16,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C5_ROI16,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI16,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI16,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI16:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI16:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C5_ROI16:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI16,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI16,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI16,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI16,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI16,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI16,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C5_ROI16,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C5_ROI16,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI16,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI16,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI16,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI16,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI16,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C5_ROI16,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C5_ROI16:AsynIO")
{
    field(PORT, XSP3.C5_ROI16)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI5:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROI5,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI5:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROI5,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROI5:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ROI5,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI5:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ROI5,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI5:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI5,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI5,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROI5:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI5:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROI5:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ROI5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI5:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROI5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROI5:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI5:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ROI5:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI5,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI5,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ROI5:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI5:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROI5:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI5:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI5,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI5,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI5,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI5:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ROI5:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI5:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROI5:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI5:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROI5:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROI5:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI5:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROI5:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROI5:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI5,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ROI5:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI5:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROI5:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI5,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ROI5:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ROI5,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI5:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ROI5:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI5:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI5:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI5:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROI5:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI5:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI5:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI5:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROI5:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI5:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI5:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI5:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI5:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI5:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI5:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI5,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI5:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROI5,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ROI5:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ROI5,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI5:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROI5,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI5:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROI5,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI5:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI5:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI5:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ROI5:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI5:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROI5:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ROI5:AsynIO")
{
    field(PORT, XSP3.ROI5)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROISUM5:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ROISUM5,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3.PROC")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ROISUM5,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM5:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM5,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM5,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM5:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM5:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROISUM5:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ROISUM5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM5:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROISUM5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM5:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM5:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM5:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM5,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM5,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ROISUM5:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM5:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROISUM5:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM5:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM5,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM5,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM5,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM5:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ROISUM5:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM5:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROISUM5:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM5:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROISUM5:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROISUM5:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM5:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROISUM5:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROISUM5:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM5,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ROISUM5:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM5:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROISUM5:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM5,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ROISUM5:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ROISUM5,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM5:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ROISUM5:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM5:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM5:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM5:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROISUM5:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM5:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM5:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM5:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROISUM5:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM5:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM5:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM5:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM5:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM5:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM5:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM5,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM5:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROISUM5,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ROISUM5:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ROISUM5,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM5:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM5:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM5:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM5:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM5:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ROISUM5:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM5:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROISUM5:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ROISUM5:AsynIO")
{
    field(PORT, XSP3.ROISUM5)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARR5:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARR5,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARR5:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARR5,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ARR5:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ARR5,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3.ROI5")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARR5:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ARR5,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARR5:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR5,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR5:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR5,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARR5:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARR5:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ARR5:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ARR5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR5:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARR5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARR5:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARR5:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ARR5:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR5,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR5:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR5,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ARR5:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR5:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARR5:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARR5:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR5,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR5:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR5,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR5:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR5,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR5:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ARR5:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR5:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARR5:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR5:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARR5:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARR5:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR5:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARR5:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARR5:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR5:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR5,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ARR5:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR5:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARR5:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ARR5:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR5,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARR5:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ARR5,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR5:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ARR5:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR5:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR5:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR5:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR5:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARR5:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR5:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR5:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR5:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR5:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARR5:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR5:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR5:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR5:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR5:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARR5:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR5,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARR5:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR5,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARR5:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR5,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ARR5:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR5,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR5:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARR5,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ARR5:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ARR5,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR5:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARR5,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR5:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR5,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR5:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARR5,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR5:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR5:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR5,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR5:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR5:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR5,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR5:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ARR5:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR5:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARR5:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ARR5:AsynIO")
{
    field(PORT, XSP3.ARR5)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARRSUM5,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARRSUM5,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ARRSUM5,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3.ROISUM5")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ARRSUM5,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM5,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM5,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ARRSUM5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARRSUM5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM5,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM5,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM5,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM5,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM5,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARRSUM5:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARRSUM5:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARRSUM5:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM5,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM5,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ARRSUM5,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM5:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM5:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM5:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM5,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM5,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM5,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM5,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARRSUM5,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ARRSUM5,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARRSUM5,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM5,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARRSUM5,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM5,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM5,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ARRSUM5:AsynIO")
{
    field(PORT, XSP3.ARRSUM5)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_SCA0,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_SCA0,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_SCA0,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA0,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA0,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA0,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA0,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA0,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_SCA0,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_SCA0,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA0,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA0,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA0,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA0,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA0,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA0,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA0,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA0:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA0:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA0:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA0,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA0,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA0,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA0,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA0,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA0,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA0,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_SCA0,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA0,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA0,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA0,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA0,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA0,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA0,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_SCA0:AsynIO")
{
    field(PORT, XSP3.C6_SCA0)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_SCA1,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_SCA1,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_SCA1,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA1,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA1,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA1,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_SCA1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_SCA1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA1,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA1,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA1,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA1,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA1,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA1:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA1:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA1:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA1,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA1,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA1,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA1,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA1,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA1,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA1,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_SCA1,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA1,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA1,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA1,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA1,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA1,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA1,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_SCA1:AsynIO")
{
    field(PORT, XSP3.C6_SCA1)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_SCA2,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_SCA2,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_SCA2,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA2,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA2,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA2,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_SCA2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_SCA2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA2,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA2,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA2,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA2,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA2,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA2:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA2:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA2:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA2,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA2,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA2,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA2,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA2,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA2,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA2,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_SCA2,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA2,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA2,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA2,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA2,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA2,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA2,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_SCA2:AsynIO")
{
    field(PORT, XSP3.C6_SCA2)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_SCA3,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_SCA3,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_SCA3,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA3,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA3,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA3,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_SCA3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_SCA3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA3,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA3,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA3,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA3,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA3,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA3:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA3:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA3:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA3,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA3,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA3,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA3,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA3,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA3,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA3,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_SCA3,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA3,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA3,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA3,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA3,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA3,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA3,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_SCA3:AsynIO")
{
    field(PORT, XSP3.C6_SCA3)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_SCA4,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_SCA4,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_SCA4,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA4,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA4,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA4,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_SCA4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_SCA4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA4,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA4,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA4,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA4,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA4,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA4:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA4:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA4:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA4,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA4,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA4,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA4,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA4,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA4,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA4,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_SCA4,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA4,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA4,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA4,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA4,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA4,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA4,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_SCA4:AsynIO")
{
    field(PORT, XSP3.C6_SCA4)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_SCA5,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_SCA5,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_SCA5,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA5,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA5,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA5,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_SCA5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_SCA5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA5,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA5,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA5,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA5,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA5,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA5:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA5:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA5:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA5,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA5,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA5,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA5,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA5,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA5,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA5,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_SCA5,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA5,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA5,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA5,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA5,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA5,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA5,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_SCA5:AsynIO")
{
    field(PORT, XSP3.C6_SCA5)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_SCA6,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_SCA6,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_SCA6,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA6,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA6,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA6,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_SCA6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_SCA6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA6,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA6,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA6,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA6,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA6,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA6:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA6:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA6:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA6,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA6,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA6,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA6,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA6,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA6,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA6,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_SCA6,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA6,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA6,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA6,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA6,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA6,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA6,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_SCA6:AsynIO")
{
    field(PORT, XSP3.C6_SCA6)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_SCA7,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_SCA7,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_SCA7,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA7,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA7,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA7,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_SCA7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_SCA7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA7,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA7,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_SCA7,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA7,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA7,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA7:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA7:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_SCA7:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA7,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA7,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA7,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA7,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA7,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA7,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_SCA7,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_SCA7,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA7,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA7,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA7,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA7,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA7,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_SCA7,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_SCA7:AsynIO")
{
    field(PORT, XSP3.C6_SCA7)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI1,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI1,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_ROI1,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI1,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI1,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI1,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI1,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_ROI1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI1,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI1,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI1,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI1,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI1,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI1,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI1,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI1:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI1:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI1:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI1,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI1,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI1,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI1,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI1,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI1,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI1,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI1,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI1,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI1,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI1,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI1,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI1,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI1,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_ROI1:AsynIO")
{
    field(PORT, XSP3.C6_ROI1)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI2,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI2,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_ROI2,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI2,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI2,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI2,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI2,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_ROI2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI2,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI2,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI2,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI2,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI2,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI2,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI2,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI2:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI2:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI2:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI2,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI2,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI2,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI2,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI2,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI2,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI2,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI2,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI2,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI2,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI2,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI2,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI2,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI2,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_ROI2:AsynIO")
{
    field(PORT, XSP3.C6_ROI2)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI3,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI3,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_ROI3,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI3,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI3,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI3,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI3,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_ROI3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI3,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI3,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI3,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI3,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI3,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI3,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI3,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI3:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI3:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI3:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI3,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI3,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI3,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI3,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI3,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI3,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI3,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI3,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI3,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI3,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI3,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI3,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI3,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI3,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_ROI3:AsynIO")
{
    field(PORT, XSP3.C6_ROI3)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI4,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI4,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_ROI4,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI4,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI4,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI4,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI4,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_ROI4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI4,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI4,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI4,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI4,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI4,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI4,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI4,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI4:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI4:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI4:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI4,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI4,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI4,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI4,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI4,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI4,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI4,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI4,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI4,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI4,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI4,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI4,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI4,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI4,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_ROI4:AsynIO")
{
    field(PORT, XSP3.C6_ROI4)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI5,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI5,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_ROI5,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI5,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI5,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI5,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_ROI5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI5,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI5,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI5,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI5,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI5,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI5:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI5:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI5:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI5,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI5,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI5,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI5,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI5,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI5,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI5,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI5,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI5,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI5,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI5,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI5,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI5,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI5,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_ROI5:AsynIO")
{
    field(PORT, XSP3.C6_ROI5)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI6,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI6,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_ROI6,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI6,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI6,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI6,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_ROI6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI6,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI6,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI6,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI6,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI6,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI6:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI6:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI6:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI6,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI6,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI6,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI6,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI6,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI6,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI6,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI6,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI6,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI6,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI6,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI6,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI6,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI6,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_ROI6:AsynIO")
{
    field(PORT, XSP3.C6_ROI6)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI7,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI7,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_ROI7,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI7,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI7,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI7,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI7,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_ROI7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI7,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI7,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI7,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI7,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI7,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI7,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI7,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI7:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI7:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI7:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI7,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI7,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI7,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI7,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI7,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI7,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI7,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI7,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI7,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI7,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI7,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI7,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI7,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI7,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_ROI7:AsynIO")
{
    field(PORT, XSP3.C6_ROI7)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI8,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI8,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_ROI8,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI8,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI8,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI8,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI8,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI8,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_ROI8,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI8,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI8,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI8,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI8,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI8,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI8,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI8,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI8,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI8:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI8:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI8:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI8,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI8,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI8,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI8,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI8,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI8,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI8,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI8,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI8,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI8,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI8,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI8,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI8,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI8,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_ROI8:AsynIO")
{
    field(PORT, XSP3.C6_ROI8)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI9,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI9,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_ROI9,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI9,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI9,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI9,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI9,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI9,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_ROI9,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI9,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI9,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI9,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI9,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI9,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI9,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI9,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI9,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI9:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI9:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI9:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI9,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI9,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI9,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI9,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI9,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI9,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI9,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI9,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI9,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI9,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI9,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI9,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI9,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI9,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_ROI9:AsynIO")
{
    field(PORT, XSP3.C6_ROI9)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI10,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI10,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_ROI10,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI10,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI10,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI10,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI10,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI10,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_ROI10,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI10,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI10,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI10,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI10,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI10,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI10,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI10,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI10,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI10:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI10:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI10:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI10,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI10,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI10,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI10,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI10,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI10,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI10,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI10,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI10,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI10,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI10,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI10,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI10,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI10,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_ROI10:AsynIO")
{
    field(PORT, XSP3.C6_ROI10)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI11,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI11,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_ROI11,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI11,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI11,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI11,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI11,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI11,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_ROI11,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI11,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI11,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI11,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI11,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI11,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI11,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI11,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI11,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI11:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI11:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI11:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI11,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI11,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI11,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI11,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI11,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI11,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI11,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI11,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI11,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI11,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI11,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI11,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI11,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI11,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_ROI11:AsynIO")
{
    field(PORT, XSP3.C6_ROI11)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI12,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI12,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_ROI12,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI12,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI12,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI12,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI12,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI12,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_ROI12,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI12,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI12,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI12,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI12,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI12,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI12,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI12,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI12,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI12:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI12:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI12:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI12,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI12,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI12,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI12,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI12,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI12,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI12,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI12,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI12,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI12,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI12,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI12,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI12,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI12,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_ROI12:AsynIO")
{
    field(PORT, XSP3.C6_ROI12)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI13,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI13,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_ROI13,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI13,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI13,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI13,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI13,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI13,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_ROI13,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI13,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI13,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI13,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI13,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI13,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI13,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI13,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI13,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI13:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI13:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI13:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI13,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI13,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI13,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI13,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI13,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI13,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI13,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI13,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI13,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI13,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI13,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI13,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI13,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI13,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_ROI13:AsynIO")
{
    field(PORT, XSP3.C6_ROI13)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI14,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI14,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_ROI14,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI14,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI14,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI14,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI14,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI14,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_ROI14,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI14,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI14,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI14,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI14,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI14,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI14,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI14,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI14,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI14:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI14:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI14:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI14,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI14,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI14,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI14,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI14,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI14,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI14,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI14,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI14,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI14,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI14,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI14,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI14,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI14,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_ROI14:AsynIO")
{
    field(PORT, XSP3.C6_ROI14)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI15,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI15,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_ROI15,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI15,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI15,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI15,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI15,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI15,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_ROI15,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI15,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI15,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI15,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI15,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI15,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI15,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI15,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI15,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI15:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI15:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI15:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI15,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI15,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI15,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI15,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI15,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI15,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI15,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI15,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI15,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI15,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI15,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI15,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI15,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI15,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_ROI15:AsynIO")
{
    field(PORT, XSP3.C6_ROI15)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI16,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.C6_ROI16,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.C6_ROI16,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI16,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI16,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI16,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI16,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI16,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.C6_ROI16,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI16,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI16,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI16,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI16,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI16,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.C6_ROI16,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI16,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI16,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI16:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI16:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):C6_ROI16:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI16,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI16,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI16,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI16,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI16,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI16,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.C6_ROI16,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.C6_ROI16,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI16,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI16,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI16,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI16,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI16,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.C6_ROI16,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):C6_ROI16:AsynIO")
{
    field(PORT, XSP3.C6_ROI16)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI6:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROI6,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI6:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROI6,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROI6:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ROI6,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI6:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ROI6,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI6:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI6,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI6,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROI6:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI6:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROI6:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ROI6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI6:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROI6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROI6:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI6:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ROI6:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI6,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI6,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ROI6:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI6:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROI6:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI6:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROI6,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI6,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI6,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI6:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ROI6:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI6:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROI6:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI6:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROI6:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROI6:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI6:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROI6:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROI6:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI6,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ROI6:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI6:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROI6:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI6,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ROI6:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ROI6,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI6:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ROI6:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI6:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI6:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI6:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROI6:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI6:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI6:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI6:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROI6:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI6:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI6:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI6:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI6:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI6:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI6:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROI6,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI6:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROI6,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ROI6:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ROI6,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI6:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROI6,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI6:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROI6,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI6:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI6:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI6:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ROI6:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROI6:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROI6:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ROI6:AsynIO")
{
    field(PORT, XSP3.ROI6)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROISUM6:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ROISUM6,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3.PROC")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ROISUM6,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM6:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM6,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM6,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM6:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM6:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROISUM6:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ROISUM6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM6:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROISUM6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM6:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM6:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM6:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM6,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM6,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ROISUM6:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM6:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROISUM6:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM6:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROISUM6,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM6,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM6,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM6:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ROISUM6:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM6:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROISUM6:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM6:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROISUM6:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROISUM6:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM6:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROISUM6:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROISUM6:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM6,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ROISUM6:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM6:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROISUM6:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM6,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ROISUM6:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ROISUM6,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM6:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ROISUM6:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM6:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM6:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM6:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROISUM6:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM6:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM6:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM6:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROISUM6:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM6:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM6:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM6:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM6:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM6:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM6:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROISUM6,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM6:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROISUM6,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ROISUM6:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ROISUM6,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM6:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM6:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM6:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM6:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM6:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ROISUM6:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROISUM6:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROISUM6:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ROISUM6:AsynIO")
{
    field(PORT, XSP3.ROISUM6)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARR6:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARR6,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARR6:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARR6,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ARR6:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ARR6,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3.ROI6")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARR6:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ARR6,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARR6:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR6,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR6:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR6,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARR6:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARR6:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ARR6:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ARR6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR6:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARR6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARR6:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARR6:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ARR6:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR6,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR6:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR6,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ARR6:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR6:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARR6:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARR6:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARR6,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR6:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR6,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR6:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR6,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR6:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ARR6:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR6:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARR6:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR6:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARR6:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARR6:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR6:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARR6:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARR6:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR6:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR6,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ARR6:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR6:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARR6:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ARR6:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR6,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARR6:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ARR6,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR6:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ARR6:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR6:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR6:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR6:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR6:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARR6:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR6:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR6:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR6:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR6:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARR6:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR6:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR6:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARR6:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR6:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARR6:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR6,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARR6:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR6,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARR6:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR6,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ARR6:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARR6,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR6:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARR6,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ARR6:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ARR6,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR6:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARR6,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR6:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR6,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARR6:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARR6,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR6:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR6:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR6,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR6:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARR6:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARR6,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARR6:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ARR6:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARR6:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARR6:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ARR6:AsynIO")
{
    field(PORT, XSP3.ARR6)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARRSUM6,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ARRSUM6,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ARRSUM6,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3.ROISUM6")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ARRSUM6,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM6,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM6,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM6,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ARRSUM6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARRSUM6,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM6,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM6,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM6,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ARRSUM6,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM6,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM6,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARRSUM6:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARRSUM6:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ARRSUM6:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM6,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM6,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ARRSUM6,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM6:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM6:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM6:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ARRSUM6:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM6,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM6,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM6,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ARRSUM6,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ARRSUM6,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ARRSUM6,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARRSUM6,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM6,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ARRSUM6,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM6,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ARRSUM6,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ARRSUM6:AsynIO")
{
    field(PORT, XSP3.ARRSUM6)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):PROC:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.PROC,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):PROC:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.PROC,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):PROC:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.PROC,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):PROC:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.PROC,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):PROC:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.PROC,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):PROC:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):PROC:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.PROC,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):PROC:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):PROC:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.PROC,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):PROC:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.PROC,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):PROC:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):PROC:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.PROC,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):PROC:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):PROC:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):PROC:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):PROC:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):PROC:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.PROC,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):PROC:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):PROC:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):PROC:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):PROC:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):PROC:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):PROC:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):PROC:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):PROC:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):PROC:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):PROC:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):PROC:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):PROC:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):PROC:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):PROC:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):PROC:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):PROC:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):PROC:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):PROC:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):PROC:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):PROC:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.PROC,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):PROC:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):PROC:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):PROC:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):PROC:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):PROC:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):PROC:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):PROC:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):PROC:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):PROC:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):PROC:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):PROC:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):PROC:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):PROC:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):PROC:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):PROC:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):PROC:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):PROC:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):PROC:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):PROC:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):PROC:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.PROC,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):PROC:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.PROC,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):PROC:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.PROC,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):PROC:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):PROC:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.PROC,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.PROC,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):PROC:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.PROC,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.PROC,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):PROC:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):PROC:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.PROC,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):PROC:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):PROC:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.PROC,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):PROC:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):PROC:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):PROC:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):PROC:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):PROC:AsynIO")
{
    field(PORT, XSP3.PROC)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROIDATA:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.ROIDATA,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.ROIDATA,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROIDATA:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROIDATA,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROIDATA,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROIDATA:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROIDATA,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROIDATA:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROIDATA,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROIDATA:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.ROIDATA,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROIDATA:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROIDATA,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):ROIDATA:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROIDATA,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROIDATA:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROIDATA,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):ROIDATA:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROIDATA,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROIDATA,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):ROIDATA:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROIDATA:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROIDATA:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROIDATA:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.ROIDATA,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROIDATA,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROIDATA,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROIDATA:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):ROIDATA:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROIDATA:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROIDATA:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROIDATA:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROIDATA:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROIDATA:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROIDATA:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROIDATA:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):ROIDATA:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):ROIDATA:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):ROIDATA:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROIDATA,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):ROIDATA:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROIDATA:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROIDATA:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROIDATA,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):ROIDATA:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.ROIDATA,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROIDATA:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):ROIDATA:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROIDATA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROIDATA:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROIDATA:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROIDATA:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROIDATA:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROIDATA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROIDATA:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROIDATA:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROIDATA:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):ROIDATA:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROIDATA:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROIDATA:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROIDATA:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROIDATA:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROIDATA:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROIDATA:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROIDATA:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.ROIDATA,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROIDATA:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.ROIDATA,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):ROIDATA:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.ROIDATA,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):ROIDATA:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROIDATA:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROIDATA:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROIDATA:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROIDATA:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):ROIDATA:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):ROIDATA:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):ROIDATA:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):ROIDATA:AsynIO")
{
    field(PORT, XSP3.ROIDATA)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):HDF5:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.HDF5,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(XSPRESS3_PREFIX,undefined):HDF5:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.HDF5,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(XSPRESS3_PREFIX,undefined):HDF5:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(XSP3.HDF5,0,1)NDARRAY_PORT")
    field(VAL,  "XSP3.ROIDATA")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):HDF5:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.HDF5,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):HDF5:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.HDF5,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):HDF5:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.HDF5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):HDF5:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):HDF5:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.HDF5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):HDF5:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.HDF5,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):HDF5:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.HDF5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):HDF5:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(XSPRESS3_PREFIX,undefined):HDF5:ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.HDF5,0,1)ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(XSPRESS3_PREFIX,undefined):HDF5:ArrayRate_RBV")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):HDF5:ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(XSPRESS3_PREFIX,undefined):HDF5:ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):HDF5:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.HDF5,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:QueueSize")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)QUEUE_SIZE")
    field(PINI, "YES")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):HDF5:QueueFreeLow")
}

record(calcout, "$(XSPRESS3_PREFIX,undefined):HDF5:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):HDF5:QueueSize")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):HDF5:QueueFree.LOW")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):HDF5:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "$(XSPRESS3_PREFIX,undefined):HDF5:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):HDF5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):HDF5:QueueUse.HIGH")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):HDF5:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "$(XSPRESS3_PREFIX,undefined):HDF5:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "$(XSPRESS3_PREFIX,undefined):HDF5:QueueSize")
   field(OUT,  "$(XSPRESS3_PREFIX,undefined):HDF5:QueueUse.HIHI")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "$(XSPRESS3_PREFIX,undefined):HDF5:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):HDF5:QueueSize")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):HDF5:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}


###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(XSPRESS3_PREFIX,undefined):HDF5:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(XSP3.HDF5,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):HDF5:Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(XSPRESS3_PREFIX,undefined):HDF5:Dim0SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):HDF5:ArraySize0_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:ArraySize0_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):HDF5:Dim0SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):HDF5:Dim1SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):HDF5:Dim1SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):HDF5:ArraySize1_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:ArraySize1_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):HDF5:Dim1SA")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):HDF5:Dim2SA")
}

record(subArray, "$(XSPRESS3_PREFIX,undefined):HDF5:Dim2SA")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):HDF5:ArraySize2_RBV")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:ArraySize2_RBV")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):HDF5:Dim2SA")
#    field(FLNK, "$(XSPRESS3_PREFIX,undefined):HDF5:Dim3SA")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):HDF5:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.HDF5,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):HDF5:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.HDF5,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):HDF5:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.HDF5,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):HDF5:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.HDF5,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(XSPRESS3_PREFIX,undefined):HDF5:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.HDF5,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}


###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
#  This is only really useful information for plugins that        #
#  produce output (callbacks) that other plugins can attach to    #
###################################################################

record(ai, "$(XSPRESS3_PREFIX,undefined):HDF5:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.HDF5,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:PoolMaxBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.HDF5,0,1)POOL_MAX_BUFFERS")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):HDF5:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.HDF5,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):HDF5:PoolAllocBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.HDF5,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):HDF5:PoolFreeBuffers")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.HDF5,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):HDF5:PoolUsedBuffers")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):HDF5:PoolUsedBuffers")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):HDF5:PoolAllocBuffers NPP MS")
    field(INPB, "$(XSPRESS3_PREFIX,undefined):HDF5:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(XSPRESS3_PREFIX,undefined):HDF5:AsynIO")
{
    field(PORT, XSP3.HDF5)
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA0,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA0,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA0,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA0,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA0,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA0,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA0,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_SCA0,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA0:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA0,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA1,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA1,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA1,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA1,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA1,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_SCA1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA2,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA2,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA2,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA2,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA2,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_SCA2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA3,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA3,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA3,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA3,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA3,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_SCA3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA4,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA4,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA4,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA4,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA4,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_SCA4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA5,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA5,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA5,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA5,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA5,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_SCA5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA6,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA6,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA6,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA6,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA6,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_SCA6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_SCA7,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA7,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA7,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA7,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_SCA7,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_SCA7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_SCA7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_SCA7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_SCA7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_SCA7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI1,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI1,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI1,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI1,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI1,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI2,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI2,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI2,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI2,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI2,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI3,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI3,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI3,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI3,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI3,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI4,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI4,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI4,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI4,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI4,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI5,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI5,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI5,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI5,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI5,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI6,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI6,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI6,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI6,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI6,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI7,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI7,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI7,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI7,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI7,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI8,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI8,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI8,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI8,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI8,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI8,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI8,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI8,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI8:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI8,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI9,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI9,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI9,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI9,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI9,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI9,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI9,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI9,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI9:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI9,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI10,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI10,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI10,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI10,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI10,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI10,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI10,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI10,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI10:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI10,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI11,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI11,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI11,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI11,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI11,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI11,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI11,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI11,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI11:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI11,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI12,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI12,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI12,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI12,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI12,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI12,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI12,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI12,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI12:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI12,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI13,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI13,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI13,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI13,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI13,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI13,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI13,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI13,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI13:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI13,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI14,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI14,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI14,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI14,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI14,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI14,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI14,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI14,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI14:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI14,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI15,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI15,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI15,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI15,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI15,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI15,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI15,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI15,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI15:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI15,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C1_ROI16,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI16,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI16,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI16,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C1_ROI16,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C1_ROI16,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C1_ROI16,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C1_ROI16,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C1_ROI16:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C1_ROI16,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA0,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA0,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA0,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA0,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA0,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA0,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA0,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_SCA0,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA0:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA0,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA1,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA1,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA1,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA1,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA1,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_SCA1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA2,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA2,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA2,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA2,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA2,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_SCA2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA3,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA3,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA3,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA3,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA3,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_SCA3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA4,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA4,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA4,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA4,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA4,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_SCA4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA5,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA5,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA5,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA5,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA5,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_SCA5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA6,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA6,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA6,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA6,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA6,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_SCA6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_SCA7,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA7,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA7,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA7,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_SCA7,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_SCA7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_SCA7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_SCA7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_SCA7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_SCA7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI1,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI1,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI1,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI1,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI1,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI2,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI2,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI2,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI2,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI2,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI3,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI3,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI3,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI3,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI3,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI4,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI4,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI4,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI4,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI4,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI5,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI5,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI5,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI5,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI5,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI6,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI6,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI6,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI6,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI6,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI7,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI7,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI7,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI7,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI7,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI8,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI8,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI8,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI8,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI8,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI8,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI8,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI8,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI8:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI8,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI9,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI9,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI9,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI9,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI9,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI9,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI9,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI9,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI9:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI9,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI10,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI10,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI10,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI10,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI10,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI10,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI10,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI10,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI10:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI10,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI11,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI11,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI11,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI11,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI11,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI11,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI11,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI11,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI11:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI11,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI12,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI12,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI12,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI12,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI12,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI12,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI12,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI12,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI12:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI12,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI13,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI13,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI13,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI13,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI13,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI13,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI13,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI13,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI13:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI13,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI14,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI14,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI14,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI14,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI14,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI14,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI14,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI14,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI14:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI14,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI15,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI15,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI15,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI15,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI15,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI15,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI15,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI15,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI15:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI15,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C2_ROI16,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI16,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI16,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI16,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C2_ROI16,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C2_ROI16,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C2_ROI16,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C2_ROI16,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C2_ROI16:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C2_ROI16,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA0,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA0,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA0,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA0,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA0,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA0,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA0,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_SCA0,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA0:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA0,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA1,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA1,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA1,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA1,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA1,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_SCA1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA2,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA2,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA2,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA2,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA2,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_SCA2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA3,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA3,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA3,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA3,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA3,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_SCA3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA4,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA4,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA4,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA4,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA4,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_SCA4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA5,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA5,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA5,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA5,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA5,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_SCA5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA6,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA6,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA6,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA6,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA6,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_SCA6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_SCA7,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA7,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA7,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA7,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_SCA7,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_SCA7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_SCA7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_SCA7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_SCA7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_SCA7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI1,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI1,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI1,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI1,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI1,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI2,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI2,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI2,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI2,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI2,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI3,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI3,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI3,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI3,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI3,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI4,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI4,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI4,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI4,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI4,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI5,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI5,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI5,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI5,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI5,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI6,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI6,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI6,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI6,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI6,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI7,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI7,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI7,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI7,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI7,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI8,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI8,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI8,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI8,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI8,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI8,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI8,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI8,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI8:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI8,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI9,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI9,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI9,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI9,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI9,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI9,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI9,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI9,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI9:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI9,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI10,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI10,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI10,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI10,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI10,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI10,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI10,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI10,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI10:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI10,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI11,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI11,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI11,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI11,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI11,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI11,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI11,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI11,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI11:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI11,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI12,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI12,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI12,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI12,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI12,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI12,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI12,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI12,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI12:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI12,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI13,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI13,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI13,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI13,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI13,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI13,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI13,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI13,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI13:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI13,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI14,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI14,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI14,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI14,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI14,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI14,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI14,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI14,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI14:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI14,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI15,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI15,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI15,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI15,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI15,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI15,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI15,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI15,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI15:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI15,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C3_ROI16,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI16,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI16,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI16,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C3_ROI16,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C3_ROI16,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C3_ROI16,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C3_ROI16,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C3_ROI16:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C3_ROI16,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA0,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA0,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA0,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA0,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA0,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA0,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA0,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_SCA0,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA0:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA0,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA1,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA1,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA1,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA1,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA1,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_SCA1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA2,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA2,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA2,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA2,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA2,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_SCA2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA3,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA3,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA3,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA3,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA3,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_SCA3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA4,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA4,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA4,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA4,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA4,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_SCA4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA5,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA5,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA5,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA5,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA5,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_SCA5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA6,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA6,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA6,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA6,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA6,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_SCA6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_SCA7,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA7,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA7,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA7,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_SCA7,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_SCA7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_SCA7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_SCA7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_SCA7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_SCA7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI1,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI1,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI1,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI1,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI1,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI2,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI2,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI2,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI2,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI2,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI3,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI3,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI3,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI3,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI3,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI4,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI4,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI4,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI4,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI4,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI5,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI5,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI5,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI5,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI5,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI6,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI6,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI6,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI6,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI6,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI7,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI7,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI7,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI7,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI7,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI8,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI8,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI8,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI8,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI8,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI8,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI8,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI8,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI8:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI8,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI9,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI9,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI9,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI9,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI9,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI9,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI9,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI9,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI9:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI9,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI10,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI10,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI10,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI10,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI10,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI10,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI10,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI10,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI10:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI10,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI11,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI11,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI11,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI11,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI11,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI11,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI11,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI11,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI11:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI11,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI12,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI12,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI12,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI12,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI12,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI12,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI12,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI12,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI12:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI12,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI13,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI13,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI13,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI13,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI13,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI13,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI13,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI13,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI13:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI13,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI14,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI14,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI14,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI14,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI14,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI14,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI14,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI14,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI14:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI14,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI15,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI15,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI15,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI15,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI15,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI15,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI15,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI15,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI15:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI15,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C4_ROI16,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI16,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI16,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI16,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C4_ROI16,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C4_ROI16,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C4_ROI16,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C4_ROI16,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C4_ROI16:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C4_ROI16,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA0,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA0,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA0,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA0,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA0,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA0,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA0,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_SCA0,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA0:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA0,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA1,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA1,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA1,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA1,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA1,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_SCA1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA2,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA2,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA2,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA2,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA2,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_SCA2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA3,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA3,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA3,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA3,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA3,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_SCA3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA4,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA4,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA4,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA4,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA4,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_SCA4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA5,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA5,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA5,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA5,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA5,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_SCA5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA6,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA6,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA6,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA6,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA6,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_SCA6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_SCA7,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA7,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA7,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA7,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_SCA7,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_SCA7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_SCA7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_SCA7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_SCA7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_SCA7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI1,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI1,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI1,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI1,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI1,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI2,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI2,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI2,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI2,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI2,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI3,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI3,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI3,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI3,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI3,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI4,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI4,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI4,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI4,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI4,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI5,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI5,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI5,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI5,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI5,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI6,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI6,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI6,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI6,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI6,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI7,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI7,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI7,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI7,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI7,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI8,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI8,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI8,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI8,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI8,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI8,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI8,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI8,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI8:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI8,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI9,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI9,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI9,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI9,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI9,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI9,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI9,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI9,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI9:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI9,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI10,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI10,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI10,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI10,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI10,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI10,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI10,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI10,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI10:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI10,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI11,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI11,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI11,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI11,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI11,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI11,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI11,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI11,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI11:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI11,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI12,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI12,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI12,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI12,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI12,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI12,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI12,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI12,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI12:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI12,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI13,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI13,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI13,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI13,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI13,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI13,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI13,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI13,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI13:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI13,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI14,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI14,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI14,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI14,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI14,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI14,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI14,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI14,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI14:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI14,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI15,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI15,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI15,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI15,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI15,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI15,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI15,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI15,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI15:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI15,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C5_ROI16,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI16,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI16,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI16,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C5_ROI16,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C5_ROI16,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C5_ROI16,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C5_ROI16,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C5_ROI16:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C5_ROI16,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA0,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA0,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA0,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA0,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA0,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA0,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA0,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_SCA0,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA0:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA0,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA1,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA1,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA1,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA1,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA1,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_SCA1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA2,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA2,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA2,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA2,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA2,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_SCA2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA3,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA3,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA3,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA3,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA3,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_SCA3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA4,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA4,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA4,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA4,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA4,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_SCA4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA5,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA5,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA5,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA5,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA5,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_SCA5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA6,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA6,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA6,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA6,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA6,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_SCA6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_SCA7,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA7,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA7,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA7,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_SCA7,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_SCA7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_SCA7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_SCA7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_SCA7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_SCA7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI1,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI1,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI1,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI1,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI1,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI1,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI1:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI1,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI2,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI2,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI2,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI2,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI2,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI2,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI2:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI2,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI3,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI3,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI3,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI3,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI3,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI3,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI3:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI3,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI4,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI4,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI4,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI4,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI4,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI4,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI4:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI4,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI5,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI5,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI5,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI5,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI5,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI5,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI5:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI5,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI6,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI6,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI6,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI6,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI6,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI6,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI6:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI6,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI7,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI7,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI7,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI7,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI7,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI7,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI7:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI7,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI8,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI8,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI8,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI8,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI8,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI8,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI8,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI8,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI8:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI8,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI9,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI9,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI9,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI9,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI9,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI9,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI9,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI9,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI9:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI9,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI10,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI10,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI10,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI10,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI10,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI10,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI10,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI10,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI10:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI10,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI11,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI11,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI11,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI11,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI11,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI11,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI11,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI11,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI11:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI11,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI12,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI12,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI12,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI12,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI12,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI12,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI12,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI12,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI12:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI12,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI13,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI13,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI13,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI13,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI13,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI13,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI13,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI13,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI13:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI13,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI14,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI14,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI14,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI14,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI14,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI14,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI14,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI14,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI14:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI14,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI15,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI15,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI15,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI15,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI15,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI15,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI15,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI15,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI15:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI15,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# The asyn port name should match what you have
# written in your startup script
# % macro, NELEMENTS, Number of elements in attribute waveform
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ArrayData_RBV")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.C6_ROI16,0,1)ATTR_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Value_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI16,0,1)ATTR_VAL")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ValueSum_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI16,0,1)ATTR_VAL_SUM")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}


record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI16,0,1)ATTR_RESET")
   field(ZNAM, "Done Reset")
   field(ONAM, "Reset")
   field(VAL,  "0")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ResetArrayCounter.PROC")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:Update")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.C6_ROI16,0,1)ATTR_UPDATE")
   field(ZNAM, "Done Update Array")
   field(ONAM, "Update Array")
   field(VAL,  "0")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ResetArrayCounter")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:ArrayCounter PP")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:AttrName")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.C6_ROI16,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:AttrName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.C6_ROI16,0,1)ATTR_ATTRNAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:UpdatePeriod")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(XSP3.C6_ROI16,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(VAL, "100")
   field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):C6_ROI16:UpdatePeriod_RBV")
{
   field(DESC, "Array Update Period")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.C6_ROI16,0,1)ATTR_UPDATE_PERIOD")
   field(PREC, "0")
   field(SCAN, "I/O Intr")
   field(EGU, "ms")	
}# Database for ND ROIs
# Mark Rivers
# April 22, 2008

###################################################################
#  These records control the label for the ROI                    #
###################################################################
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROI1:Name")
{
   field(PINI, "YES")
   field(DTYP, "asynOctetWrite")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)NAME")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI1:Name_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROI1,0,1)NAME")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the ROI definition                       #
#  including binning, region start and size                       # 
###################################################################

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI1:BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)DIM0_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DIM0_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI1:BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)DIM1_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DIM1_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI1:BinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)DIM2_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:BinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DIM2_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI1:MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)DIM0_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DIM0_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI1:MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)DIM1_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DIM1_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI1:MinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)DIM2_MIN")
   field(LOPR, "1")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:MinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DIM2_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI1:SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)DIM0_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DIM0_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI1:SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)DIM1_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DIM1_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI1:SizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)DIM2_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:SizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DIM2_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI1:AutoSizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)DIM0_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI1:AutoSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DIM0_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI1:AutoSizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)DIM1_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI1:AutoSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DIM1_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI1:AutoSizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)DIM2_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI1:AutoSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DIM2_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DIM0_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DIM1_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:MaxSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DIM2_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI1:ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)DIM0_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI1:ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DIM0_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI1:ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)DIM1_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI1:ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DIM1_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI1:ReverseZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)DIM2_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI1:ReverseZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DIM2_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI1:EnableX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)DIM0_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI1:EnableX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DIM0_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI1:EnableY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)DIM1_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI1:EnableY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DIM1_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI1:EnableZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)DIM2_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI1:EnableZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)DIM2_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the scaling of the data.  Useful when    #
#  binning or converting data types                               # 
###################################################################

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI1:EnableScale")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)ENABLE_SCALE")
   field(VAL,  "0")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI1:EnableScale_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)ENABLE_SCALE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROI1:Scale")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(VAL,  "1")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)SCALE_VALUE")
   field(VAL,  "1")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI1:Scale_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROI1,0,1)SCALE_VALUE")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the data type of the array data          # 
#  The last entry is "Automatic" meaning preserve the data type   #
#  of the input array.                                            # 
###################################################################

record(mbbo, "$(XSPRESS3_PREFIX,undefined):ROI1:DataTypeOut")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI1,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(VAL,  "8")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI1:DataTypeOut_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI1,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records set the HOPR and LOPR values for the position    #
#  and size to the maximum for the input array                    #
###################################################################

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:MaxX")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI1:MaxSizeX_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI1:SetXHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROI1:SetXHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROI1:MaxX NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROI1:MinX.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROI1:SizeX.HOPR NPP")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI1:MaxY")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI1:MaxSizeY_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI1:SetYHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROI1:SetYHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROI1:MaxY NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROI1:MinY.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROI1:SizeY.HOPR NPP")
}


# Database for ND ROIs
# Mark Rivers
# April 22, 2008

###################################################################
#  These records control the label for the ROI                    #
###################################################################
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROISUM1:Name")
{
   field(PINI, "YES")
   field(DTYP, "asynOctetWrite")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)NAME")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:Name_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)NAME")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the ROI definition                       #
#  including binning, region start and size                       # 
###################################################################

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM1:BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)DIM0_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DIM0_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM1:BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)DIM1_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DIM1_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM1:BinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)DIM2_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:BinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DIM2_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM1:MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)DIM0_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DIM0_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM1:MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)DIM1_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DIM1_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM1:MinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)DIM2_MIN")
   field(LOPR, "1")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:MinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DIM2_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM1:SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)DIM0_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DIM0_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM1:SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)DIM1_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DIM1_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM1:SizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)DIM2_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:SizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DIM2_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM1:AutoSizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)DIM0_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM1:AutoSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DIM0_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM1:AutoSizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)DIM1_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM1:AutoSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DIM1_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM1:AutoSizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)DIM2_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM1:AutoSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DIM2_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DIM0_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DIM1_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:MaxSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DIM2_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM1:ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)DIM0_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM1:ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DIM0_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM1:ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)DIM1_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM1:ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DIM1_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM1:ReverseZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)DIM2_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM1:ReverseZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DIM2_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM1:EnableX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)DIM0_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM1:EnableX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DIM0_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM1:EnableY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)DIM1_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM1:EnableY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DIM1_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM1:EnableZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)DIM2_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM1:EnableZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)DIM2_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the scaling of the data.  Useful when    #
#  binning or converting data types                               # 
###################################################################

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM1:EnableScale")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)ENABLE_SCALE")
   field(VAL,  "0")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM1:EnableScale_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)ENABLE_SCALE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROISUM1:Scale")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(VAL,  "1")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)SCALE_VALUE")
   field(VAL,  "1")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM1:Scale_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)SCALE_VALUE")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the data type of the array data          # 
#  The last entry is "Automatic" meaning preserve the data type   #
#  of the input array.                                            # 
###################################################################

record(mbbo, "$(XSPRESS3_PREFIX,undefined):ROISUM1:DataTypeOut")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM1,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(VAL,  "8")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM1:DataTypeOut_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM1,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records set the HOPR and LOPR values for the position    #
#  and size to the maximum for the input array                    #
###################################################################

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:MaxX")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM1:MaxSizeX_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM1:SetXHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROISUM1:SetXHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROISUM1:MaxX NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROISUM1:MinX.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROISUM1:SizeX.HOPR NPP")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM1:MaxY")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM1:MaxSizeY_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM1:SetYHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROISUM1:SetYHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROISUM1:MaxY NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROISUM1:MinY.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROISUM1:SizeY.HOPR NPP")
}


# Database for ND ROIs
# Mark Rivers
# April 22, 2008

###################################################################
#  These records control the label for the ROI                    #
###################################################################
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROI2:Name")
{
   field(PINI, "YES")
   field(DTYP, "asynOctetWrite")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)NAME")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI2:Name_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROI2,0,1)NAME")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the ROI definition                       #
#  including binning, region start and size                       # 
###################################################################

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI2:BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)DIM0_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DIM0_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI2:BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)DIM1_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DIM1_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI2:BinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)DIM2_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:BinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DIM2_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI2:MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)DIM0_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DIM0_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI2:MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)DIM1_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DIM1_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI2:MinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)DIM2_MIN")
   field(LOPR, "1")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:MinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DIM2_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI2:SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)DIM0_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DIM0_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI2:SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)DIM1_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DIM1_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI2:SizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)DIM2_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:SizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DIM2_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI2:AutoSizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)DIM0_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI2:AutoSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DIM0_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI2:AutoSizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)DIM1_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI2:AutoSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DIM1_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI2:AutoSizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)DIM2_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI2:AutoSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DIM2_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DIM0_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DIM1_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:MaxSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DIM2_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI2:ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)DIM0_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI2:ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DIM0_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI2:ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)DIM1_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI2:ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DIM1_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI2:ReverseZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)DIM2_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI2:ReverseZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DIM2_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI2:EnableX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)DIM0_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI2:EnableX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DIM0_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI2:EnableY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)DIM1_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI2:EnableY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DIM1_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI2:EnableZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)DIM2_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI2:EnableZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)DIM2_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the scaling of the data.  Useful when    #
#  binning or converting data types                               # 
###################################################################

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI2:EnableScale")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)ENABLE_SCALE")
   field(VAL,  "0")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI2:EnableScale_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)ENABLE_SCALE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROI2:Scale")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(VAL,  "1")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)SCALE_VALUE")
   field(VAL,  "1")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI2:Scale_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROI2,0,1)SCALE_VALUE")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the data type of the array data          # 
#  The last entry is "Automatic" meaning preserve the data type   #
#  of the input array.                                            # 
###################################################################

record(mbbo, "$(XSPRESS3_PREFIX,undefined):ROI2:DataTypeOut")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI2,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(VAL,  "8")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI2:DataTypeOut_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI2,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records set the HOPR and LOPR values for the position    #
#  and size to the maximum for the input array                    #
###################################################################

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:MaxX")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI2:MaxSizeX_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI2:SetXHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROI2:SetXHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROI2:MaxX NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROI2:MinX.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROI2:SizeX.HOPR NPP")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI2:MaxY")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI2:MaxSizeY_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI2:SetYHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROI2:SetYHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROI2:MaxY NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROI2:MinY.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROI2:SizeY.HOPR NPP")
}


# Database for ND ROIs
# Mark Rivers
# April 22, 2008

###################################################################
#  These records control the label for the ROI                    #
###################################################################
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROISUM2:Name")
{
   field(PINI, "YES")
   field(DTYP, "asynOctetWrite")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)NAME")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:Name_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)NAME")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the ROI definition                       #
#  including binning, region start and size                       # 
###################################################################

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM2:BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)DIM0_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DIM0_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM2:BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)DIM1_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DIM1_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM2:BinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)DIM2_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:BinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DIM2_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM2:MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)DIM0_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DIM0_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM2:MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)DIM1_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DIM1_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM2:MinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)DIM2_MIN")
   field(LOPR, "1")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:MinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DIM2_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM2:SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)DIM0_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DIM0_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM2:SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)DIM1_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DIM1_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM2:SizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)DIM2_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:SizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DIM2_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM2:AutoSizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)DIM0_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM2:AutoSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DIM0_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM2:AutoSizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)DIM1_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM2:AutoSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DIM1_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM2:AutoSizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)DIM2_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM2:AutoSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DIM2_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DIM0_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DIM1_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:MaxSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DIM2_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM2:ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)DIM0_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM2:ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DIM0_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM2:ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)DIM1_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM2:ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DIM1_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM2:ReverseZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)DIM2_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM2:ReverseZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DIM2_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM2:EnableX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)DIM0_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM2:EnableX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DIM0_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM2:EnableY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)DIM1_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM2:EnableY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DIM1_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM2:EnableZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)DIM2_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM2:EnableZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)DIM2_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the scaling of the data.  Useful when    #
#  binning or converting data types                               # 
###################################################################

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM2:EnableScale")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)ENABLE_SCALE")
   field(VAL,  "0")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM2:EnableScale_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)ENABLE_SCALE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROISUM2:Scale")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(VAL,  "1")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)SCALE_VALUE")
   field(VAL,  "1")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM2:Scale_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)SCALE_VALUE")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the data type of the array data          # 
#  The last entry is "Automatic" meaning preserve the data type   #
#  of the input array.                                            # 
###################################################################

record(mbbo, "$(XSPRESS3_PREFIX,undefined):ROISUM2:DataTypeOut")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM2,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(VAL,  "8")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM2:DataTypeOut_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM2,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records set the HOPR and LOPR values for the position    #
#  and size to the maximum for the input array                    #
###################################################################

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:MaxX")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM2:MaxSizeX_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM2:SetXHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROISUM2:SetXHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROISUM2:MaxX NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROISUM2:MinX.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROISUM2:SizeX.HOPR NPP")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM2:MaxY")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM2:MaxSizeY_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM2:SetYHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROISUM2:SetYHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROISUM2:MaxY NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROISUM2:MinY.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROISUM2:SizeY.HOPR NPP")
}


# Database for ND ROIs
# Mark Rivers
# April 22, 2008

###################################################################
#  These records control the label for the ROI                    #
###################################################################
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROI3:Name")
{
   field(PINI, "YES")
   field(DTYP, "asynOctetWrite")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)NAME")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI3:Name_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROI3,0,1)NAME")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the ROI definition                       #
#  including binning, region start and size                       # 
###################################################################

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI3:BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)DIM0_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DIM0_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI3:BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)DIM1_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DIM1_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI3:BinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)DIM2_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:BinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DIM2_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI3:MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)DIM0_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DIM0_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI3:MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)DIM1_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DIM1_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI3:MinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)DIM2_MIN")
   field(LOPR, "1")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:MinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DIM2_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI3:SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)DIM0_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DIM0_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI3:SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)DIM1_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DIM1_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI3:SizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)DIM2_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:SizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DIM2_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI3:AutoSizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)DIM0_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI3:AutoSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DIM0_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI3:AutoSizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)DIM1_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI3:AutoSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DIM1_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI3:AutoSizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)DIM2_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI3:AutoSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DIM2_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DIM0_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DIM1_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:MaxSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DIM2_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI3:ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)DIM0_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI3:ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DIM0_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI3:ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)DIM1_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI3:ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DIM1_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI3:ReverseZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)DIM2_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI3:ReverseZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DIM2_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI3:EnableX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)DIM0_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI3:EnableX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DIM0_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI3:EnableY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)DIM1_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI3:EnableY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DIM1_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI3:EnableZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)DIM2_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI3:EnableZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)DIM2_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the scaling of the data.  Useful when    #
#  binning or converting data types                               # 
###################################################################

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI3:EnableScale")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)ENABLE_SCALE")
   field(VAL,  "0")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI3:EnableScale_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)ENABLE_SCALE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROI3:Scale")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(VAL,  "1")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)SCALE_VALUE")
   field(VAL,  "1")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI3:Scale_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROI3,0,1)SCALE_VALUE")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the data type of the array data          # 
#  The last entry is "Automatic" meaning preserve the data type   #
#  of the input array.                                            # 
###################################################################

record(mbbo, "$(XSPRESS3_PREFIX,undefined):ROI3:DataTypeOut")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI3,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(VAL,  "8")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI3:DataTypeOut_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI3,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records set the HOPR and LOPR values for the position    #
#  and size to the maximum for the input array                    #
###################################################################

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:MaxX")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI3:MaxSizeX_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI3:SetXHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROI3:SetXHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROI3:MaxX NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROI3:MinX.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROI3:SizeX.HOPR NPP")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI3:MaxY")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI3:MaxSizeY_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI3:SetYHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROI3:SetYHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROI3:MaxY NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROI3:MinY.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROI3:SizeY.HOPR NPP")
}


# Database for ND ROIs
# Mark Rivers
# April 22, 2008

###################################################################
#  These records control the label for the ROI                    #
###################################################################
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROISUM3:Name")
{
   field(PINI, "YES")
   field(DTYP, "asynOctetWrite")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)NAME")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:Name_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)NAME")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the ROI definition                       #
#  including binning, region start and size                       # 
###################################################################

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM3:BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)DIM0_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DIM0_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM3:BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)DIM1_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DIM1_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM3:BinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)DIM2_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:BinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DIM2_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM3:MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)DIM0_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DIM0_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM3:MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)DIM1_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DIM1_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM3:MinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)DIM2_MIN")
   field(LOPR, "1")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:MinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DIM2_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM3:SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)DIM0_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DIM0_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM3:SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)DIM1_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DIM1_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM3:SizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)DIM2_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:SizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DIM2_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM3:AutoSizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)DIM0_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM3:AutoSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DIM0_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM3:AutoSizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)DIM1_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM3:AutoSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DIM1_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM3:AutoSizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)DIM2_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM3:AutoSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DIM2_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DIM0_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DIM1_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:MaxSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DIM2_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM3:ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)DIM0_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM3:ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DIM0_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM3:ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)DIM1_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM3:ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DIM1_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM3:ReverseZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)DIM2_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM3:ReverseZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DIM2_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM3:EnableX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)DIM0_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM3:EnableX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DIM0_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM3:EnableY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)DIM1_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM3:EnableY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DIM1_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM3:EnableZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)DIM2_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM3:EnableZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)DIM2_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the scaling of the data.  Useful when    #
#  binning or converting data types                               # 
###################################################################

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM3:EnableScale")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)ENABLE_SCALE")
   field(VAL,  "0")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM3:EnableScale_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)ENABLE_SCALE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROISUM3:Scale")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(VAL,  "1")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)SCALE_VALUE")
   field(VAL,  "1")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM3:Scale_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)SCALE_VALUE")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the data type of the array data          # 
#  The last entry is "Automatic" meaning preserve the data type   #
#  of the input array.                                            # 
###################################################################

record(mbbo, "$(XSPRESS3_PREFIX,undefined):ROISUM3:DataTypeOut")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM3,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(VAL,  "8")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM3:DataTypeOut_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM3,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records set the HOPR and LOPR values for the position    #
#  and size to the maximum for the input array                    #
###################################################################

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:MaxX")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM3:MaxSizeX_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM3:SetXHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROISUM3:SetXHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROISUM3:MaxX NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROISUM3:MinX.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROISUM3:SizeX.HOPR NPP")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM3:MaxY")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM3:MaxSizeY_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM3:SetYHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROISUM3:SetYHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROISUM3:MaxY NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROISUM3:MinY.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROISUM3:SizeY.HOPR NPP")
}


# Database for ND ROIs
# Mark Rivers
# April 22, 2008

###################################################################
#  These records control the label for the ROI                    #
###################################################################
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROI4:Name")
{
   field(PINI, "YES")
   field(DTYP, "asynOctetWrite")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)NAME")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI4:Name_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROI4,0,1)NAME")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the ROI definition                       #
#  including binning, region start and size                       # 
###################################################################

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI4:BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)DIM0_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DIM0_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI4:BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)DIM1_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DIM1_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI4:BinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)DIM2_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:BinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DIM2_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI4:MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)DIM0_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DIM0_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI4:MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)DIM1_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DIM1_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI4:MinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)DIM2_MIN")
   field(LOPR, "1")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:MinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DIM2_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI4:SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)DIM0_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DIM0_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI4:SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)DIM1_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DIM1_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI4:SizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)DIM2_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:SizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DIM2_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI4:AutoSizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)DIM0_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI4:AutoSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DIM0_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI4:AutoSizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)DIM1_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI4:AutoSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DIM1_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI4:AutoSizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)DIM2_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI4:AutoSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DIM2_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DIM0_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DIM1_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:MaxSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DIM2_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI4:ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)DIM0_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI4:ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DIM0_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI4:ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)DIM1_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI4:ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DIM1_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI4:ReverseZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)DIM2_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI4:ReverseZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DIM2_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI4:EnableX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)DIM0_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI4:EnableX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DIM0_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI4:EnableY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)DIM1_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI4:EnableY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DIM1_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI4:EnableZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)DIM2_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI4:EnableZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)DIM2_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the scaling of the data.  Useful when    #
#  binning or converting data types                               # 
###################################################################

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI4:EnableScale")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)ENABLE_SCALE")
   field(VAL,  "0")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI4:EnableScale_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)ENABLE_SCALE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROI4:Scale")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(VAL,  "1")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)SCALE_VALUE")
   field(VAL,  "1")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI4:Scale_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROI4,0,1)SCALE_VALUE")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the data type of the array data          # 
#  The last entry is "Automatic" meaning preserve the data type   #
#  of the input array.                                            # 
###################################################################

record(mbbo, "$(XSPRESS3_PREFIX,undefined):ROI4:DataTypeOut")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI4,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(VAL,  "8")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI4:DataTypeOut_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI4,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records set the HOPR and LOPR values for the position    #
#  and size to the maximum for the input array                    #
###################################################################

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:MaxX")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI4:MaxSizeX_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI4:SetXHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROI4:SetXHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROI4:MaxX NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROI4:MinX.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROI4:SizeX.HOPR NPP")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI4:MaxY")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI4:MaxSizeY_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI4:SetYHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROI4:SetYHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROI4:MaxY NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROI4:MinY.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROI4:SizeY.HOPR NPP")
}


# Database for ND ROIs
# Mark Rivers
# April 22, 2008

###################################################################
#  These records control the label for the ROI                    #
###################################################################
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROISUM4:Name")
{
   field(PINI, "YES")
   field(DTYP, "asynOctetWrite")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)NAME")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:Name_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)NAME")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the ROI definition                       #
#  including binning, region start and size                       # 
###################################################################

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM4:BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)DIM0_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DIM0_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM4:BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)DIM1_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DIM1_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM4:BinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)DIM2_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:BinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DIM2_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM4:MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)DIM0_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DIM0_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM4:MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)DIM1_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DIM1_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM4:MinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)DIM2_MIN")
   field(LOPR, "1")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:MinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DIM2_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM4:SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)DIM0_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DIM0_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM4:SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)DIM1_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DIM1_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM4:SizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)DIM2_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:SizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DIM2_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM4:AutoSizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)DIM0_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM4:AutoSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DIM0_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM4:AutoSizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)DIM1_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM4:AutoSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DIM1_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM4:AutoSizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)DIM2_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM4:AutoSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DIM2_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DIM0_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DIM1_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:MaxSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DIM2_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM4:ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)DIM0_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM4:ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DIM0_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM4:ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)DIM1_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM4:ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DIM1_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM4:ReverseZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)DIM2_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM4:ReverseZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DIM2_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM4:EnableX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)DIM0_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM4:EnableX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DIM0_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM4:EnableY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)DIM1_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM4:EnableY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DIM1_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM4:EnableZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)DIM2_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM4:EnableZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)DIM2_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the scaling of the data.  Useful when    #
#  binning or converting data types                               # 
###################################################################

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM4:EnableScale")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)ENABLE_SCALE")
   field(VAL,  "0")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM4:EnableScale_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)ENABLE_SCALE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROISUM4:Scale")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(VAL,  "1")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)SCALE_VALUE")
   field(VAL,  "1")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM4:Scale_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)SCALE_VALUE")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the data type of the array data          # 
#  The last entry is "Automatic" meaning preserve the data type   #
#  of the input array.                                            # 
###################################################################

record(mbbo, "$(XSPRESS3_PREFIX,undefined):ROISUM4:DataTypeOut")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM4,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(VAL,  "8")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM4:DataTypeOut_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM4,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records set the HOPR and LOPR values for the position    #
#  and size to the maximum for the input array                    #
###################################################################

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:MaxX")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM4:MaxSizeX_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM4:SetXHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROISUM4:SetXHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROISUM4:MaxX NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROISUM4:MinX.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROISUM4:SizeX.HOPR NPP")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM4:MaxY")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM4:MaxSizeY_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM4:SetYHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROISUM4:SetYHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROISUM4:MaxY NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROISUM4:MinY.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROISUM4:SizeY.HOPR NPP")
}


# Database for ND ROIs
# Mark Rivers
# April 22, 2008

###################################################################
#  These records control the label for the ROI                    #
###################################################################
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROI5:Name")
{
   field(PINI, "YES")
   field(DTYP, "asynOctetWrite")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)NAME")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI5:Name_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROI5,0,1)NAME")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the ROI definition                       #
#  including binning, region start and size                       # 
###################################################################

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI5:BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)DIM0_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DIM0_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI5:BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)DIM1_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DIM1_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI5:BinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)DIM2_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:BinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DIM2_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI5:MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)DIM0_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DIM0_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI5:MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)DIM1_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DIM1_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI5:MinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)DIM2_MIN")
   field(LOPR, "1")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:MinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DIM2_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI5:SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)DIM0_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DIM0_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI5:SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)DIM1_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DIM1_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI5:SizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)DIM2_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:SizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DIM2_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI5:AutoSizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)DIM0_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI5:AutoSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DIM0_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI5:AutoSizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)DIM1_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI5:AutoSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DIM1_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI5:AutoSizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)DIM2_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI5:AutoSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DIM2_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DIM0_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DIM1_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:MaxSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DIM2_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI5:ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)DIM0_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI5:ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DIM0_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI5:ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)DIM1_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI5:ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DIM1_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI5:ReverseZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)DIM2_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI5:ReverseZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DIM2_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI5:EnableX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)DIM0_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI5:EnableX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DIM0_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI5:EnableY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)DIM1_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI5:EnableY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DIM1_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI5:EnableZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)DIM2_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI5:EnableZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)DIM2_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the scaling of the data.  Useful when    #
#  binning or converting data types                               # 
###################################################################

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI5:EnableScale")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)ENABLE_SCALE")
   field(VAL,  "0")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI5:EnableScale_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)ENABLE_SCALE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROI5:Scale")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(VAL,  "1")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)SCALE_VALUE")
   field(VAL,  "1")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI5:Scale_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROI5,0,1)SCALE_VALUE")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the data type of the array data          # 
#  The last entry is "Automatic" meaning preserve the data type   #
#  of the input array.                                            # 
###################################################################

record(mbbo, "$(XSPRESS3_PREFIX,undefined):ROI5:DataTypeOut")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI5,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(VAL,  "8")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI5:DataTypeOut_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI5,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records set the HOPR and LOPR values for the position    #
#  and size to the maximum for the input array                    #
###################################################################

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:MaxX")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI5:MaxSizeX_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI5:SetXHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROI5:SetXHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROI5:MaxX NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROI5:MinX.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROI5:SizeX.HOPR NPP")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI5:MaxY")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI5:MaxSizeY_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI5:SetYHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROI5:SetYHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROI5:MaxY NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROI5:MinY.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROI5:SizeY.HOPR NPP")
}


# Database for ND ROIs
# Mark Rivers
# April 22, 2008

###################################################################
#  These records control the label for the ROI                    #
###################################################################
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROISUM5:Name")
{
   field(PINI, "YES")
   field(DTYP, "asynOctetWrite")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)NAME")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:Name_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)NAME")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the ROI definition                       #
#  including binning, region start and size                       # 
###################################################################

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM5:BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)DIM0_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DIM0_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM5:BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)DIM1_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DIM1_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM5:BinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)DIM2_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:BinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DIM2_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM5:MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)DIM0_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DIM0_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM5:MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)DIM1_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DIM1_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM5:MinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)DIM2_MIN")
   field(LOPR, "1")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:MinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DIM2_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM5:SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)DIM0_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DIM0_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM5:SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)DIM1_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DIM1_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM5:SizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)DIM2_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:SizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DIM2_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM5:AutoSizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)DIM0_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM5:AutoSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DIM0_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM5:AutoSizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)DIM1_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM5:AutoSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DIM1_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM5:AutoSizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)DIM2_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM5:AutoSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DIM2_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DIM0_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DIM1_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:MaxSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DIM2_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM5:ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)DIM0_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM5:ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DIM0_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM5:ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)DIM1_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM5:ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DIM1_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM5:ReverseZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)DIM2_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM5:ReverseZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DIM2_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM5:EnableX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)DIM0_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM5:EnableX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DIM0_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM5:EnableY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)DIM1_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM5:EnableY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DIM1_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM5:EnableZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)DIM2_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM5:EnableZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)DIM2_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the scaling of the data.  Useful when    #
#  binning or converting data types                               # 
###################################################################

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM5:EnableScale")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)ENABLE_SCALE")
   field(VAL,  "0")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM5:EnableScale_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)ENABLE_SCALE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROISUM5:Scale")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(VAL,  "1")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)SCALE_VALUE")
   field(VAL,  "1")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM5:Scale_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)SCALE_VALUE")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the data type of the array data          # 
#  The last entry is "Automatic" meaning preserve the data type   #
#  of the input array.                                            # 
###################################################################

record(mbbo, "$(XSPRESS3_PREFIX,undefined):ROISUM5:DataTypeOut")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM5,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(VAL,  "8")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM5:DataTypeOut_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM5,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records set the HOPR and LOPR values for the position    #
#  and size to the maximum for the input array                    #
###################################################################

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:MaxX")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM5:MaxSizeX_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM5:SetXHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROISUM5:SetXHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROISUM5:MaxX NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROISUM5:MinX.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROISUM5:SizeX.HOPR NPP")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM5:MaxY")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM5:MaxSizeY_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM5:SetYHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROISUM5:SetYHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROISUM5:MaxY NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROISUM5:MinY.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROISUM5:SizeY.HOPR NPP")
}


# Database for ND ROIs
# Mark Rivers
# April 22, 2008

###################################################################
#  These records control the label for the ROI                    #
###################################################################
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROI6:Name")
{
   field(PINI, "YES")
   field(DTYP, "asynOctetWrite")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)NAME")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROI6:Name_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROI6,0,1)NAME")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the ROI definition                       #
#  including binning, region start and size                       # 
###################################################################

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI6:BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)DIM0_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DIM0_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI6:BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)DIM1_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DIM1_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI6:BinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)DIM2_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:BinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DIM2_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI6:MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)DIM0_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DIM0_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI6:MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)DIM1_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DIM1_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI6:MinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)DIM2_MIN")
   field(LOPR, "1")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:MinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DIM2_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI6:SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)DIM0_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DIM0_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI6:SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)DIM1_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DIM1_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROI6:SizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)DIM2_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:SizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DIM2_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI6:AutoSizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)DIM0_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI6:AutoSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DIM0_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI6:AutoSizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)DIM1_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI6:AutoSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DIM1_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI6:AutoSizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)DIM2_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI6:AutoSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DIM2_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DIM0_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DIM1_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:MaxSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DIM2_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI6:ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)DIM0_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI6:ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DIM0_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI6:ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)DIM1_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI6:ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DIM1_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI6:ReverseZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)DIM2_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI6:ReverseZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DIM2_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI6:EnableX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)DIM0_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI6:EnableX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DIM0_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI6:EnableY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)DIM1_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI6:EnableY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DIM1_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI6:EnableZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)DIM2_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI6:EnableZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)DIM2_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the scaling of the data.  Useful when    #
#  binning or converting data types                               # 
###################################################################

record(bo, "$(XSPRESS3_PREFIX,undefined):ROI6:EnableScale")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)ENABLE_SCALE")
   field(VAL,  "0")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROI6:EnableScale_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)ENABLE_SCALE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROI6:Scale")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(VAL,  "1")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)SCALE_VALUE")
   field(VAL,  "1")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROI6:Scale_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROI6,0,1)SCALE_VALUE")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the data type of the array data          # 
#  The last entry is "Automatic" meaning preserve the data type   #
#  of the input array.                                            # 
###################################################################

record(mbbo, "$(XSPRESS3_PREFIX,undefined):ROI6:DataTypeOut")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROI6,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(VAL,  "8")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROI6:DataTypeOut_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROI6,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records set the HOPR and LOPR values for the position    #
#  and size to the maximum for the input array                    #
###################################################################

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:MaxX")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI6:MaxSizeX_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI6:SetXHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROI6:SetXHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROI6:MaxX NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROI6:MinX.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROI6:SizeX.HOPR NPP")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROI6:MaxY")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROI6:MaxSizeY_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROI6:SetYHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROI6:SetYHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROI6:MaxY NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROI6:MinY.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROI6:SizeY.HOPR NPP")
}


# Database for ND ROIs
# Mark Rivers
# April 22, 2008

###################################################################
#  These records control the label for the ROI                    #
###################################################################
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROISUM6:Name")
{
   field(PINI, "YES")
   field(DTYP, "asynOctetWrite")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)NAME")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:Name_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)NAME")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the ROI definition                       #
#  including binning, region start and size                       # 
###################################################################

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM6:BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)DIM0_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DIM0_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM6:BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)DIM1_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DIM1_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM6:BinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)DIM2_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:BinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DIM2_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM6:MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)DIM0_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DIM0_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM6:MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)DIM1_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DIM1_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM6:MinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)DIM2_MIN")
   field(LOPR, "1")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:MinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DIM2_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM6:SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)DIM0_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DIM0_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM6:SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)DIM1_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DIM1_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROISUM6:SizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)DIM2_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:SizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DIM2_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM6:AutoSizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)DIM0_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM6:AutoSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DIM0_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM6:AutoSizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)DIM1_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM6:AutoSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DIM1_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM6:AutoSizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)DIM2_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM6:AutoSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DIM2_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DIM0_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DIM1_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:MaxSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DIM2_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM6:ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)DIM0_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM6:ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DIM0_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM6:ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)DIM1_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM6:ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DIM1_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM6:ReverseZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)DIM2_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM6:ReverseZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DIM2_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM6:EnableX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)DIM0_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM6:EnableX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DIM0_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM6:EnableY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)DIM1_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM6:EnableY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DIM1_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM6:EnableZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)DIM2_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM6:EnableZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)DIM2_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the scaling of the data.  Useful when    #
#  binning or converting data types                               # 
###################################################################

record(bo, "$(XSPRESS3_PREFIX,undefined):ROISUM6:EnableScale")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)ENABLE_SCALE")
   field(VAL,  "0")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROISUM6:EnableScale_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)ENABLE_SCALE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROISUM6:Scale")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(VAL,  "1")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)SCALE_VALUE")
   field(VAL,  "1")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROISUM6:Scale_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)SCALE_VALUE")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the data type of the array data          # 
#  The last entry is "Automatic" meaning preserve the data type   #
#  of the input array.                                            # 
###################################################################

record(mbbo, "$(XSPRESS3_PREFIX,undefined):ROISUM6:DataTypeOut")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROISUM6,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(VAL,  "8")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROISUM6:DataTypeOut_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROISUM6,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records set the HOPR and LOPR values for the position    #
#  and size to the maximum for the input array                    #
###################################################################

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:MaxX")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM6:MaxSizeX_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM6:SetXHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROISUM6:SetXHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROISUM6:MaxX NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROISUM6:MinX.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROISUM6:SizeX.HOPR NPP")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROISUM6:MaxY")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROISUM6:MaxSizeY_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROISUM6:SetYHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROISUM6:SetYHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROISUM6:MaxY NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROISUM6:MinY.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROISUM6:SizeY.HOPR NPP")
}


# Database for ND ROIs
# Mark Rivers
# April 22, 2008

###################################################################
#  These records control the label for the ROI                    #
###################################################################
record(stringout, "$(XSPRESS3_PREFIX,undefined):ROIDATA:Name")
{
   field(PINI, "YES")
   field(DTYP, "asynOctetWrite")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)NAME")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:Name_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)NAME")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the ROI definition                       #
#  including binning, region start and size                       # 
###################################################################

record(longout, "$(XSPRESS3_PREFIX,undefined):ROIDATA:BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)DIM0_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DIM0_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROIDATA:BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)DIM1_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DIM1_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROIDATA:BinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)DIM2_BIN")
   field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:BinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DIM2_BIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROIDATA:MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)DIM0_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DIM0_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROIDATA:MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)DIM1_MIN")
   field(LOPR, "0")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DIM1_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROIDATA:MinZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)DIM2_MIN")
   field(LOPR, "1")
   field(VAL,  "0")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:MinZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DIM2_MIN")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROIDATA:SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)DIM0_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DIM0_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROIDATA:SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)DIM1_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DIM1_SIZE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):ROIDATA:SizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)DIM2_SIZE")
   field(VAL,  "1000000")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:SizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DIM2_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROIDATA:AutoSizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)DIM0_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROIDATA:AutoSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DIM0_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROIDATA:AutoSizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)DIM1_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROIDATA:AutoSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DIM1_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROIDATA:AutoSizeZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)DIM2_AUTO_SIZE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROIDATA:AutoSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DIM2_AUTO_SIZE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DIM0_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DIM1_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:MaxSizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DIM2_MAX_SIZE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROIDATA:ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)DIM0_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROIDATA:ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DIM0_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROIDATA:ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)DIM1_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROIDATA:ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DIM1_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROIDATA:ReverseZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)DIM2_REVERSE")
   field(VAL,  "0")
   field(ZNAM, "No")
   field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROIDATA:ReverseZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DIM2_REVERSE")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROIDATA:EnableX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)DIM0_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROIDATA:EnableX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DIM0_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROIDATA:EnableY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)DIM1_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROIDATA:EnableY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DIM1_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):ROIDATA:EnableZ")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)DIM2_ENABLE")
   field(VAL,  "1")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROIDATA:EnableZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)DIM2_ENABLE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the scaling of the data.  Useful when    #
#  binning or converting data types                               # 
###################################################################

record(bo, "$(XSPRESS3_PREFIX,undefined):ROIDATA:EnableScale")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)ENABLE_SCALE")
   field(VAL,  "0")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):ROIDATA:EnableScale_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)ENABLE_SCALE")
   field(ZNAM, "Disable")
   field(ONAM, "Enable")
   field(ZSV,  "NO_ALARM")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):ROIDATA:Scale")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(VAL,  "1")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)SCALE_VALUE")
   field(VAL,  "1")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):ROIDATA:Scale_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)SCALE_VALUE")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the data type of the array data          # 
#  The last entry is "Automatic" meaning preserve the data type   #
#  of the input array.                                            # 
###################################################################

record(mbbo, "$(XSPRESS3_PREFIX,undefined):ROIDATA:DataTypeOut")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(XSP3.ROIDATA,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(VAL,  "8")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):ROIDATA:DataTypeOut_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(XSP3.ROIDATA,0,1)ROI_DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(EIST, "Automatic")
   field(EIVL, "-1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records set the HOPR and LOPR values for the position    #
#  and size to the maximum for the input array                    #
###################################################################

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:MaxX")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROIDATA:MaxSizeX_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROIDATA:SetXHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROIDATA:SetXHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROIDATA:MaxX NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROIDATA:MinX.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROIDATA:SizeX.HOPR NPP")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):ROIDATA:MaxY")
{
    field(INP,  "$(XSPRESS3_PREFIX,undefined):ROIDATA:MaxSizeY_RBV CP")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):ROIDATA:SetYHOPR.PROC PP")
}

record(dfanout, "$(XSPRESS3_PREFIX,undefined):ROIDATA:SetYHOPR")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):ROIDATA:MaxY NPP")
    field(OMSL, "closed_loop")
    field(OUTA, "$(XSPRESS3_PREFIX,undefined):ROIDATA:MinY.HOPR NPP")
    field(OUTB, "$(XSPRESS3_PREFIX,undefined):ROIDATA:SizeY.HOPR NPP")
}


# Database for NDStdArrays asyn driver and standard asyn device support
# Mark Rivers
# April 14, 2008

###################################################################
#  This record is the array waveform data                         #
###################################################################
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARR1:ArrayData")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.ARR1,0,1)STD_ARRAY_DATA")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}
# Database for NDStdArrays asyn driver and standard asyn device support
# Mark Rivers
# April 14, 2008

###################################################################
#  This record is the array waveform data                         #
###################################################################
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARRSUM1:ArrayData")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.ARRSUM1,0,1)STD_ARRAY_DATA")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}
# Database for NDStdArrays asyn driver and standard asyn device support
# Mark Rivers
# April 14, 2008

###################################################################
#  This record is the array waveform data                         #
###################################################################
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARR2:ArrayData")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.ARR2,0,1)STD_ARRAY_DATA")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}
# Database for NDStdArrays asyn driver and standard asyn device support
# Mark Rivers
# April 14, 2008

###################################################################
#  This record is the array waveform data                         #
###################################################################
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARRSUM2:ArrayData")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.ARRSUM2,0,1)STD_ARRAY_DATA")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}
# Database for NDStdArrays asyn driver and standard asyn device support
# Mark Rivers
# April 14, 2008

###################################################################
#  This record is the array waveform data                         #
###################################################################
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARR3:ArrayData")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.ARR3,0,1)STD_ARRAY_DATA")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}
# Database for NDStdArrays asyn driver and standard asyn device support
# Mark Rivers
# April 14, 2008

###################################################################
#  This record is the array waveform data                         #
###################################################################
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARRSUM3:ArrayData")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.ARRSUM3,0,1)STD_ARRAY_DATA")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}
# Database for NDStdArrays asyn driver and standard asyn device support
# Mark Rivers
# April 14, 2008

###################################################################
#  This record is the array waveform data                         #
###################################################################
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARR4:ArrayData")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.ARR4,0,1)STD_ARRAY_DATA")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}
# Database for NDStdArrays asyn driver and standard asyn device support
# Mark Rivers
# April 14, 2008

###################################################################
#  This record is the array waveform data                         #
###################################################################
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARRSUM4:ArrayData")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.ARRSUM4,0,1)STD_ARRAY_DATA")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}
# Database for NDStdArrays asyn driver and standard asyn device support
# Mark Rivers
# April 14, 2008

###################################################################
#  This record is the array waveform data                         #
###################################################################
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARR5:ArrayData")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.ARR5,0,1)STD_ARRAY_DATA")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}
# Database for NDStdArrays asyn driver and standard asyn device support
# Mark Rivers
# April 14, 2008

###################################################################
#  This record is the array waveform data                         #
###################################################################
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARRSUM5:ArrayData")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.ARRSUM5,0,1)STD_ARRAY_DATA")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}
# Database for NDStdArrays asyn driver and standard asyn device support
# Mark Rivers
# April 14, 2008

###################################################################
#  This record is the array waveform data                         #
###################################################################
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARR6:ArrayData")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.ARR6,0,1)STD_ARRAY_DATA")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}
# Database for NDStdArrays asyn driver and standard asyn device support
# Mark Rivers
# April 14, 2008

###################################################################
#  This record is the array waveform data                         #
###################################################################
record(waveform, "$(XSPRESS3_PREFIX,undefined):ARRSUM6:ArrayData")
{
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn(XSP3.ARRSUM6,0,1)STD_ARRAY_DATA")
    field(FTVL, "DOUBLE")
    field(NELM, "4096")
    field(SCAN, "I/O Intr")
}
# Database for ND PluginProcess
# Mark Rivers
# March 14, 2010

###################################################################
#  These records control the data type of the array data          # 
#  The last entry is "Automatic" meaning preserve the data type   #
#  of the input array.                                            # 
###################################################################

record(mbbo, "$(XSPRESS3_PREFIX,undefined):PROC:DataTypeOut")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.PROC,0,1)PROCESS_DATA_TYPE")
    field(ZRST, "Int8")
    field(ZRVL, "0")
    field(ONST, "UInt8")
    field(ONVL, "1")
    field(TWST, "Int16")
    field(TWVL, "2")
    field(THST, "UInt16")
    field(THVL, "3")
    field(FRST, "Int32")
    field(FRVL, "4")
    field(FVST, "UInt32")
    field(FVVL, "5")
    field(SXST, "Float32")
    field(SXVL, "6")
    field(SVST, "Float64")
    field(SVVL, "7")
    field(EIST, "Automatic")
    field(EIVL, "-1")
    field(VAL,  "8")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):PROC:DataTypeOut_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)PROCESS_DATA_TYPE")
    field(ZRST, "Int8")
    field(ZRVL, "0")
    field(ONST, "UInt8")
    field(ONVL, "1")
    field(TWST, "Int16")
    field(TWVL, "2")
    field(THST, "UInt16")
    field(THVL, "3")
    field(FRST, "Int32")
    field(FRVL, "4")
    field(FVST, "UInt32")
    field(FVVL, "5")
    field(SXST, "Float32")
    field(SXVL, "6")
    field(SVST, "Float64")
    field(SVVL, "7")
    field(EIST, "Automatic")
    field(EIVL, "-1")
    field(SCAN, "I/O Intr")
}

###################################################################
# These records control the background array processing           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):PROC:SaveBackground")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.PROC,0,1)SAVE_BACKGROUND")
    field(VAL,  "1")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):PROC:SaveBackground_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)SAVE_BACKGROUND")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):PROC:EnableBackground")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.PROC,0,1)ENABLE_BACKGROUND")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):PROC:EnableBackground_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)ENABLE_BACKGROUND")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):PROC:ValidBackground_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)VALID_BACKGROUND")
    field(ZNAM, "Invalid")
    field(ONAM, "Valid")
    field(SCAN, "I/O Intr")
}

###################################################################
# These records control the flat field array processing           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):PROC:SaveFlatField")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.PROC,0,1)SAVE_FLAT_FIELD")
    field(VAL,  "1")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):PROC:SaveFlatField_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)SAVE_FLAT_FIELD")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):PROC:EnableFlatField")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.PROC,0,1)ENABLE_FLAT_FIELD")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):PROC:EnableFlatField_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)ENABLE_FLAT_FIELD")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):PROC:ValidFlatField_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)VALID_FLAT_FIELD")
    field(ZNAM, "Invalid")
    field(ONAM, "Valid")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):PROC:ScaleFlatField")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.PROC,0,1)SCALE_FLAT_FIELD")
    field(VAL,  "255.")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:ScaleFlatField_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)SCALE_FLAT_FIELD")
    field(SCAN, "I/O Intr")
}

###################################################################
# These records control the offset and scale                      #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):PROC:EnableOffsetScale")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.PROC,0,1)ENABLE_OFFSET_SCALE")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
}

# Oneshot record for calculating scale and offset
record(busy, "$(XSPRESS3_PREFIX,undefined):PROC:AutoOffsetScale")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.PROC,0,1)AUTO_OFFSET_SCALE")
    field(ZNAM, "Done")
    field(ONAM, "Calculating")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):PROC:EnableOffsetScale_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)ENABLE_OFFSET_SCALE")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):PROC:Offset")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.PROC,0,1)OFFSET")
    field(PREC, "2")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:Offset_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)OFFSET")
    field(PREC, "2")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):PROC:Scale")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.PROC,0,1)SCALE")
    field(PREC, "2")
    field(VAL,  "1.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:Scale_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)SCALE")
    field(PREC, "2")
    field(SCAN, "I/O Intr")
}

###################################################################
# These records control the high and low clipping                 #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):PROC:EnableLowClip")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.PROC,0,1)ENABLE_LOW_CLIP")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):PROC:EnableLowClip_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)ENABLE_LOW_CLIP")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):PROC:LowClip")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.PROC,0,1)LOW_CLIP")
    field(VAL,  "0.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:LowClip_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)LOW_CLIP")
    field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):PROC:EnableHighClip")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.PROC,0,1)ENABLE_HIGH_CLIP")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):PROC:EnableHighClip_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)ENABLE_HIGH_CLIP")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):PROC:HighClip")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.PROC,0,1)HIGH_CLIP")
    field(VAL,  "100.0")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:HighClip_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)HIGH_CLIP")
    field(SCAN, "I/O Intr")
}

###################################################################
# These records control frame filtering                           #
###################################################################
record(bo, "$(XSPRESS3_PREFIX,undefined):PROC:EnableFilter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.PROC,0,1)ENABLE_FILTER")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):PROC:EnableFilter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)ENABLE_FILTER")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):PROC:ResetFilter")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.PROC,0,1)RESET_FILTER")
    field(VAL,  "1")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):PROC:ResetFilter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)RESET_FILTER")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):PROC:AutoResetFilter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.PROC,0,1)AUTO_RESET_FILTER")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):PROC:AutoResetFilter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)AUTO_RESET_FILTER")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):PROC:FilterCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.PROC,0,1)FILTER_CALLBACKS")
    field(ZNAM, "Every array")
    field(ONAM, "Array N only")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):PROC:FilterCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)FILTER_CALLBACKS")
    field(ZNAM, "Every array")
    field(ONAM, "Array N only")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):PROC:NumFilter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.PROC,0,1)NUM_FILTER")
    field(VAL,  "1")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):PROC:NumFilterRecip.PROC PP")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):PROC:NumFilter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)NUM_FILTER")
    field(SCAN, "I/O Intr")
}

# This is 1/NumFilter, used in RecursiveSum filter
# If this value changes we need to process FilterType to make it update filter coefficients
record(calc, "$(XSPRESS3_PREFIX,undefined):PROC:NumFilterRecip")
{
    field(INPA, "$(XSPRESS3_PREFIX,undefined):PROC:NumFilter.VAL NPP")
    field(CALC, "1./A")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):PROC:FilterType.PROC PP")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):PROC:NumFiltered_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.PROC,0,1)NUM_FILTERED")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):PROC:OOffset")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.PROC,0,1)FILTER_OOFFSET")
    field(VAL,  "0.0")
    field(PREC, "2")
}
record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:OOffset_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)FILTER_OOFFSET")
    field(PREC,  "2")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):PROC:OScale")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.PROC,0,1)FILTER_OSCALE")
    field(VAL,  "1.0")
    field(PREC, "2")
}
record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:OScale_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)FILTER_OSCALE")
    field(PREC,  "2")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):PROC:OC1")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.PROC,0,1)FILTER_OC1")
    field(VAL,  "1.0")
    field(PREC, "2")
}
record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:OC1_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)FILTER_OC1")
    field(PREC,  "2")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):PROC:OC2")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.PROC,0,1)FILTER_OC2")
    field(VAL,  "-1.0")
    field(PREC, "2")
}
record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:OC2_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)FILTER_OC2")
    field(PREC,  "2")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):PROC:OC3")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.PROC,0,1)FILTER_OC3")
    field(VAL,  "0.0")
    field(PREC, "2")
}
record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:OC3_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)FILTER_OC3")
    field(PREC,  "2")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):PROC:OC4")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.PROC,0,1)FILTER_OC4")
    field(VAL,  "1.0")
    field(PREC, "2")
}
record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:OC4_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)FILTER_OC4")
    field(PREC,  "2")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):PROC:FOffset")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.PROC,0,1)FILTER_FOFFSET")
    field(VAL,  "0.0")
    field(PREC, "2")
}
record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:FOffset_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)FILTER_FOFFSET")
    field(PREC,  "2")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):PROC:FScale")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.PROC,0,1)FILTER_FSCALE")
    field(VAL,  "1.0")
    field(PREC, "2")
}
record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:FScale_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)FILTER_FSCALE")
    field(PREC,  "2")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):PROC:FC1")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.PROC,0,1)FILTER_FC1")
    field(VAL,  "1.0")
    field(PREC, "2")
}
record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:FC1_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)FILTER_FC1")
    field(PREC,  "2")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):PROC:FC2")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.PROC,0,1)FILTER_FC2")
    field(VAL,  "-1.0")
    field(PREC, "2")
}
record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:FC2_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)FILTER_FC2")
    field(PREC,  "2")
    field(SCAN, "I/O Intr")
}
record(ao, "$(XSPRESS3_PREFIX,undefined):PROC:FC3")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.PROC,0,1)FILTER_FC3")
    field(VAL,  "0.0")
    field(PREC, "2")
}
record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:FC3_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)FILTER_FC3")
    field(PREC,  "2")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):PROC:FC4")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.PROC,0,1)FILTER_FC4")
    field(VAL,  "1.0")
    field(PREC, "2")
}
record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:FC4_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)FILTER_FC4")
    field(PREC,  "2")
    field(SCAN, "I/O Intr")
}
record(ao, "$(XSPRESS3_PREFIX,undefined):PROC:ROffset")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.PROC,0,1)FILTER_ROFFSET")
    field(VAL,  "0.0")
    field(PREC, "2")
}
record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:ROffset_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)FILTER_ROFFSET")
    field(PREC,  "2")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):PROC:RC1")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.PROC,0,1)FILTER_RC1")
    field(VAL,  "1.0")
    field(PREC, "2")
}
record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:RC1_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)FILTER_RC1")
    field(PREC,  "2")
    field(SCAN, "I/O Intr")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):PROC:RC2")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(XSP3.PROC,0,1)FILTER_RC2")
    field(VAL,  "1.0")
    field(PREC, "2")
}
record(ai, "$(XSPRESS3_PREFIX,undefined):PROC:RC2_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.PROC,0,1)FILTER_RC2")
    field(PREC,  "2")
    field(SCAN, "I/O Intr")
}

# We don't see PINI=YES for FilterType because we want to restore the actual coefficients
# We do restore this record, but we don't process it
record(mbbo, "$(XSPRESS3_PREFIX,undefined):PROC:FilterType")
{
    field(ZRST, "RecursiveAve")
    field(ZRVL, "1")
    field(ONST, "Average")
    field(ONVL, "2")
    field(TWST, "Sum")
    field(TWVL, "3")
    field(THST, "Difference")
    field(THVL, "4")
    field(FRST, "RecursiveAveDiff")
    field(FRVL, "5")
    field(FVST, "CopyToFilter")
    field(FVVL, "6")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):PROC:FilterTypeSeq PP MS")
}

record(seq, "$(XSPRESS3_PREFIX,undefined):PROC:FilterTypeSeq")
{
    field(SELL, "$(XSPRESS3_PREFIX,undefined):PROC:FilterType.RVAL NPP")
    field(SELM, "Specified")
    field(DOL1, "1")
    field(LNK1, "$(XSPRESS3_PREFIX,undefined):PROC:RecursiveAveSeq.PROC PP MS")
    field(DOL2, "1")
    field(LNK2, "$(XSPRESS3_PREFIX,undefined):PROC:AverageSeq.PROC PP MS")
    field(DOL3, "1")
    field(LNK3, "$(XSPRESS3_PREFIX,undefined):PROC:SumSeq.PROC PP MS")
    field(DOL4, "1")
    field(LNK4, "$(XSPRESS3_PREFIX,undefined):PROC:DifferenceSeq.PROC PP MS")
    field(DOL5, "1")
    field(LNK5, "$(XSPRESS3_PREFIX,undefined):PROC:RecursiveAveDiffSeq.PROC PP MS")
    field(DOL6, "1")
    field(LNK6, "$(XSPRESS3_PREFIX,undefined):PROC:CopyToFilterSeq.PROC PP MS")
}

record(seq, "$(XSPRESS3_PREFIX,undefined):PROC:RecursiveAveSeq")
{
    field(DOL1, "1")
    field(LNK1, "$(XSPRESS3_PREFIX,undefined):PROC:OC1 PP MS")
    field(DOL2, "-1")
    field(LNK2, "$(XSPRESS3_PREFIX,undefined):PROC:OC2 PP MS")
    field(DOL3, "0")
    field(LNK3, "$(XSPRESS3_PREFIX,undefined):PROC:OC3 PP MS")
    field(DOL4, "1")
    field(LNK4, "$(XSPRESS3_PREFIX,undefined):PROC:OC4 PP MS")
    field(DOL5, "1")
    field(LNK5, "$(XSPRESS3_PREFIX,undefined):PROC:FC1 PP MS")
    field(DOL6, "-1")
    field(LNK6, "$(XSPRESS3_PREFIX,undefined):PROC:FC2 PP MS")
    field(DOL7, "0")
    field(LNK7, "$(XSPRESS3_PREFIX,undefined):PROC:FC3 PP MS")
    field(DOL8, "1")
    field(LNK8, "$(XSPRESS3_PREFIX,undefined):PROC:FC4 PP MS")
    field(DOL9, "0")
    field(LNK9, "$(XSPRESS3_PREFIX,undefined):PROC:RC1 PP MS")
    field(DOLA, "1")
    field(LNKA, "$(XSPRESS3_PREFIX,undefined):PROC:RC2 PP MS")
}

record(seq, "$(XSPRESS3_PREFIX,undefined):PROC:AverageSeq")
{
    field(DOL1, "1")
    field(LNK1, "$(XSPRESS3_PREFIX,undefined):PROC:OC1 PP MS")
    field(DOL2, "0")
    field(LNK2, "$(XSPRESS3_PREFIX,undefined):PROC:OC2 PP MS")
    field(DOL3, "$(XSPRESS3_PREFIX,undefined):PROC:NumFilterRecip NPP")
    field(LNK3, "$(XSPRESS3_PREFIX,undefined):PROC:OC3 PP MS")
    field(DOL4, "0")
    field(LNK4, "$(XSPRESS3_PREFIX,undefined):PROC:OC4 PP MS")
    field(DOL5, "1")
    field(LNK5, "$(XSPRESS3_PREFIX,undefined):PROC:FC1 PP MS")
    field(DOL6, "0")
    field(LNK6, "$(XSPRESS3_PREFIX,undefined):PROC:FC2 PP MS")
    field(DOL7, "$(XSPRESS3_PREFIX,undefined):PROC:NumFilterRecip NPP")
    field(LNK7, "$(XSPRESS3_PREFIX,undefined):PROC:FC3 PP MS")
    field(DOL8, "0")
    field(LNK8, "$(XSPRESS3_PREFIX,undefined):PROC:FC4 PP MS")
    field(DOL9, "0")
    field(LNK9, "$(XSPRESS3_PREFIX,undefined):PROC:RC1 PP MS")
    field(DOLA, "0")
    field(LNKA, "$(XSPRESS3_PREFIX,undefined):PROC:RC2 PP MS")
}

record(seq, "$(XSPRESS3_PREFIX,undefined):PROC:SumSeq")
{
    field(DOL1, "1")
    field(LNK1, "$(XSPRESS3_PREFIX,undefined):PROC:OC1 PP MS")
    field(DOL2, "0")
    field(LNK2, "$(XSPRESS3_PREFIX,undefined):PROC:OC2 PP MS")
    field(DOL3, "1")
    field(LNK3, "$(XSPRESS3_PREFIX,undefined):PROC:OC3 PP MS")
    field(DOL4, "0")
    field(LNK4, "$(XSPRESS3_PREFIX,undefined):PROC:OC4 PP MS")
    field(DOL5, "1")
    field(LNK5, "$(XSPRESS3_PREFIX,undefined):PROC:FC1 PP MS")
    field(DOL6, "0")
    field(LNK6, "$(XSPRESS3_PREFIX,undefined):PROC:FC2 PP MS")
    field(DOL7, "1")
    field(LNK7, "$(XSPRESS3_PREFIX,undefined):PROC:FC3 PP MS")
    field(DOL8, "0")
    field(LNK8, "$(XSPRESS3_PREFIX,undefined):PROC:FC4 PP MS")
    field(DOL9, "0")
    field(LNK9, "$(XSPRESS3_PREFIX,undefined):PROC:RC1 PP MS")
    field(DOLA, "0")
    field(LNKA, "$(XSPRESS3_PREFIX,undefined):PROC:RC2 PP MS")
}

record(seq, "$(XSPRESS3_PREFIX,undefined):PROC:DifferenceSeq")
{
    field(DOL1, "-1")
    field(LNK1, "$(XSPRESS3_PREFIX,undefined):PROC:OC1 PP MS")
    field(DOL2, "0")
    field(LNK2, "$(XSPRESS3_PREFIX,undefined):PROC:OC2 PP MS")
    field(DOL3, "1")
    field(LNK3, "$(XSPRESS3_PREFIX,undefined):PROC:OC3 PP MS")
    field(DOL4, "0")
    field(LNK4, "$(XSPRESS3_PREFIX,undefined):PROC:OC4 PP MS")
    field(DOL5, "0")
    field(LNK5, "$(XSPRESS3_PREFIX,undefined):PROC:FC1 PP MS")
    field(DOL6, "0")
    field(LNK6, "$(XSPRESS3_PREFIX,undefined):PROC:FC2 PP MS")
    field(DOL7, "1")
    field(LNK7, "$(XSPRESS3_PREFIX,undefined):PROC:FC3 PP MS")
    field(DOL8, "0")
    field(LNK8, "$(XSPRESS3_PREFIX,undefined):PROC:FC4 PP MS")
    field(DOL9, "0")
    field(LNK9, "$(XSPRESS3_PREFIX,undefined):PROC:RC1 PP MS")
    field(DOLA, "1")
    field(LNKA, "$(XSPRESS3_PREFIX,undefined):PROC:RC2 PP MS")
}

record(seq, "$(XSPRESS3_PREFIX,undefined):PROC:RecursiveAveDiffSeq")
{
    field(DOL1, "-1")
    field(LNK1, "$(XSPRESS3_PREFIX,undefined):PROC:OC1 PP MS")
    field(DOL2, "0")
    field(LNK2, "$(XSPRESS3_PREFIX,undefined):PROC:OC2 PP MS")
    field(DOL3, "1")
    field(LNK3, "$(XSPRESS3_PREFIX,undefined):PROC:OC3 PP MS")
    field(DOL4, "0")
    field(LNK4, "$(XSPRESS3_PREFIX,undefined):PROC:OC4 PP MS")
    field(DOL5, "1")
    field(LNK5, "$(XSPRESS3_PREFIX,undefined):PROC:FC1 PP MS")
    field(DOL6, "-1")
    field(LNK6, "$(XSPRESS3_PREFIX,undefined):PROC:FC2 PP MS")
    field(DOL7, "0")
    field(LNK7, "$(XSPRESS3_PREFIX,undefined):PROC:FC3 PP MS")
    field(DOL8, "1")
    field(LNK8, "$(XSPRESS3_PREFIX,undefined):PROC:FC4 PP MS")
    field(DOL9, "0")
    field(LNK9, "$(XSPRESS3_PREFIX,undefined):PROC:RC1 PP MS")
    field(DOLA, "1")
    field(LNKA, "$(XSPRESS3_PREFIX,undefined):PROC:RC2 PP MS")
}

record(seq, "$(XSPRESS3_PREFIX,undefined):PROC:CopyToFilterSeq")
{
    field(DOL1, "0")
    field(LNK1, "$(XSPRESS3_PREFIX,undefined):PROC:OC1 PP MS")
    field(DOL2, "0")
    field(LNK2, "$(XSPRESS3_PREFIX,undefined):PROC:OC2 PP MS")
    field(DOL3, "1")
    field(LNK3, "$(XSPRESS3_PREFIX,undefined):PROC:OC3 PP MS")
    field(DOL4, "0")
    field(LNK4, "$(XSPRESS3_PREFIX,undefined):PROC:OC4 PP MS")
    field(DOL5, "0")
    field(LNK5, "$(XSPRESS3_PREFIX,undefined):PROC:FC1 PP MS")
    field(DOL6, "0")
    field(LNK6, "$(XSPRESS3_PREFIX,undefined):PROC:FC2 PP MS")
    field(DOL7, "1")
    field(LNK7, "$(XSPRESS3_PREFIX,undefined):PROC:FC3 PP MS")
    field(DOL8, "0")
    field(LNK8, "$(XSPRESS3_PREFIX,undefined):PROC:FC4 PP MS")
    field(DOL9, "0")
    field(LNK9, "$(XSPRESS3_PREFIX,undefined):PROC:RC1 PP MS")
    field(DOLA, "1")
    field(LNKA, "$(XSPRESS3_PREFIX,undefined):PROC:RC2 PP MS")
}
# Database for NDFile driver, which saves files for NDArray data.
# Mark Rivers
# April 7, 2008

###################################################################
#  These records control file I/O                                 # 
###################################################################

# File path.
record(waveform, "$(XSPRESS3_PREFIX,undefined):HDF5:FilePath")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.HDF5,0,1)FILE_PATH")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):HDF5:FilePath_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.HDF5,0,1)FILE_PATH")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):HDF5:FilePathExists_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)FILE_PATH_EXISTS")
    field(ZNAM, "No")
    field(ZSV,  "MAJOR")
    field(ONAM, "Yes")
    field(OSV,  "NO_ALARM")
    field(SCAN, "I/O Intr")
}

# Filename
record(waveform, "$(XSPRESS3_PREFIX,undefined):HDF5:FileName")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.HDF5,0,1)FILE_NAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):HDF5:FileName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.HDF5,0,1)FILE_NAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):HDF5:FileNumber")
{
    field(PINI, "YES")
    field(OUT, "$(XSPRESS3_PREFIX,undefined):HDF5:FileNumber_write PP")
    field(VAL, "1")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):HDF5:FileNumber_write")
{
    field(SDIS, "$(XSPRESS3_PREFIX,undefined):HDF5:FileNumber_Sync.PACT")
    field(DISV, "1")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(XSP3.HDF5,0,1)FILE_NUMBER")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:FileNumber_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)FILE_NUMBER")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(XSPRESS3_PREFIX,undefined):HDF5:FileNumber_Sync")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):HDF5:FileNumber_Sync")
{
    field(DOL,  "$(XSPRESS3_PREFIX,undefined):HDF5:FileNumber_RBV NPP")
    field(OMSL, "closed_loop")
    field(OUT,  "$(XSPRESS3_PREFIX,undefined):HDF5:FileNumber PP")
}

# Autoincrement flag
record(bo, "$(XSPRESS3_PREFIX,undefined):HDF5:AutoIncrement")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.HDF5,0,1)AUTO_INCREMENT")
    field(VAL,  "1")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):HDF5:AutoIncrement_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)AUTO_INCREMENT")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

# File template
record(waveform, "$(XSPRESS3_PREFIX,undefined):HDF5:FileTemplate")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(XSP3.HDF5,0,1)FILE_TEMPLATE")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):HDF5:FileTemplate_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.HDF5,0,1)FILE_TEMPLATE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

# Full filename, including path
record(waveform, "$(XSPRESS3_PREFIX,undefined):HDF5:FullFileName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.HDF5,0,1)FULL_FILE_NAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

# Autosave flag
record(bo, "$(XSPRESS3_PREFIX,undefined):HDF5:AutoSave")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.HDF5,0,1)AUTO_SAVE")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):HDF5:AutoSave_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)AUTO_SAVE")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

# Write file
record(busy, "$(XSPRESS3_PREFIX,undefined):HDF5:WriteFile")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.HDF5,0,1)WRITE_FILE")
    field(ZNAM, "Done")
    field(ONAM, "Write")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):HDF5:WriteFile_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)WRITE_FILE")
    field(ZNAM, "Done")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Writing")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}


# Read file
record(busy, "$(XSPRESS3_PREFIX,undefined):HDF5:ReadFile")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.HDF5,0,1)READ_FILE")
    field(ZNAM, "Done")
    field(ONAM, "Read")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):HDF5:ReadFile_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)READ_FILE")
    field(ZNAM, "Done")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Reading")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

# File data format 
record(mbbo, "$(XSPRESS3_PREFIX,undefined):HDF5:FileFormat")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.HDF5,0,1)FILE_FORMAT")
    field(VAL,  "0")
    field(ZRST, "Undefined")
    field(ZRVL, "0")
    field(ONST, "Invalid")
    field(ONVL, "1")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):HDF5:FileFormat_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)FILE_FORMAT")
    field(ZRST, "netCDF")
    field(ZRVL, "0")
    field(ONST, "Undefined")
    field(ONVL, "1")
    field(SCAN, "I/O Intr")
}

# File save mode 
record(mbbo, "$(XSPRESS3_PREFIX,undefined):HDF5:FileWriteMode")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.HDF5,0,1)WRITE_MODE")
    field(VAL,  "0")
    field(ZRST, "Single")
    field(ZRVL, "0")
    field(ONST, "Capture")
    field(ONVL, "1")
    field(TWST, "Stream")
    field(TWVL, "2")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):HDF5:FileWriteMode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)WRITE_MODE")
    field(ZRST, "Single")
    field(ZRVL, "0")
    field(ONST, "Capture")
    field(ONVL, "1")
    field(TWST, "Stream")
    field(TWVL, "2")
    field(SCAN, "I/O Intr")
}

# Capture data
record(busy, "$(XSPRESS3_PREFIX,undefined):HDF5:Capture")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.HDF5,0,1)CAPTURE")
    field(ZNAM, "Done")
    field(ONAM, "Capture")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):HDF5:Capture_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)CAPTURE")
    field(ZNAM, "Done")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Capturing")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):HDF5:NumCapture")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.HDF5,0,1)NUM_CAPTURE")
    field(VAL,  "1")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:NumCapture_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)NUM_CAPTURE")
    field(SCAN, "I/O Intr")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:NumCaptured_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)NUM_CAPTURED")
    field(SCAN, "I/O Intr")
}

# Delete driver file flag
record(bo, "$(XSPRESS3_PREFIX,undefined):HDF5:DeleteDriverFile")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(XSP3.HDF5,0,1)DELETE_DRIVER_FILE")
    field(VAL,  "0")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):HDF5:DeleteDriverFile_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)DELETE_DRIVER_FILE")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):HDF5:WriteStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(XSP3.HDF5,0,1)WRITE_STATUS")
    field(ZNAM, "Write OK")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Write error")
    field(OSV,  "MAJOR")
    field(SCAN, "I/O Intr")
}

record(waveform, "$(XSPRESS3_PREFIX,undefined):HDF5:WriteMessage")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(XSP3.HDF5,0,1)WRITE_MESSAGE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}


# Database for NDFileHDF5 driver, which saves files for NDArray data.

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name

# % gdatag, template, NDFileHDF5, XSP3.HDF5_NDFileHDF5, XSP3.HDF5 NDFileHDF5 class instance

# This associates the template with an edm screen
# % gui, XSP3.HDF5, edmtab, NDFileHDF5.edl, P=$(XSPRESS3_PREFIX,undefined):,R=HDF5:

# We replace some fields in records defined in NDFile.template
# File data format 
record(mbbo, "$(XSPRESS3_PREFIX,undefined):HDF5:FileFormat")
{
    field(ZRST, "HDF5")
    field(ZRVL, "0")
    field(ONST, "Invalid")
    field(ONVL, "1")
}

record(mbbi, "$(XSPRESS3_PREFIX,undefined):HDF5:FileFormat_RBV")
{
    field(ZRST, "HDF5")
    field(ZRVL, "0")
    field(ONST, "Undefined")
    field(ONVL, "1")
}

# % gdatag, pv, rw, XSP3.HDF5_NDFileHDF5, NumRowChunks, Number of rows to use per chunk
record(longout, "$(XSPRESS3_PREFIX,undefined):HDF5:NumRowChunks")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(XSP3.HDF5,0)HDF5_nRowChunks")
    field(PINI, "YES")
}

# % gdatag, pv, ro, XSP3.HDF5_NDFileHDF5, NumRowChunks_RBV, Readback of number of rows to use per chunk
record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:NumRowChunks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(XSP3.HDF5,0)HDF5_nRowChunks")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
}

# % gdatag, pv, rw, XSP3.HDF5_NDFileHDF5, NumColChunks, Number of columns to use per chunk
record(longout, "$(XSPRESS3_PREFIX,undefined):HDF5:NumColChunks")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(XSP3.HDF5,0)HDF5_nColChunks")
    field(PINI, "YES")
}

# % gdatag, pv, ro, XSP3.HDF5_NDFileHDF5, NumColChunks_RBV, Readback of number of columns to use per chunk
record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:NumColChunks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(XSP3.HDF5,0)HDF5_nColChunks")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
}

# % gdatag, pv, rw, XSP3.HDF5_NDFileHDF5, NumFramesChunks, Number of frames to cache and use per chunk
record(longout, "$(XSPRESS3_PREFIX,undefined):HDF5:NumFramesChunks")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(XSP3.HDF5,0)HDF5_nFramesChunks")
    field(PINI, "YES")
}

# % gdatag, pv, ro, XSP3.HDF5_NDFileHDF5, NumFramesChunks_RBV, Readback of number of frames to use and cache per chunk
record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:NumFramesChunks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(XSP3.HDF5,0)HDF5_nFramesChunks")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):HDF5:BoundaryAlign")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(XSP3.HDF5,0)HDF5_chunkBoundaryAlign")
    field(PINI, "YES")
    field(VAL, "0")
    field(EGU, "bytes")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:BoundaryAlign_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(XSP3.HDF5,0)HDF5_chunkBoundaryAlign")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
    field(EGU, "bytes")
}

record(longout, "$(XSPRESS3_PREFIX,undefined):HDF5:BoundaryThreshold")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(XSP3.HDF5,0)HDF5_chunkBoundaryThreshold")
    field(PINI, "YES")
    field(VAL, "1")
    field(EGU, "bytes")
}

record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:BoundaryThreshold_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(XSP3.HDF5,0)HDF5_chunkBoundaryThreshold")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
    field(EGU, "bytes")
}

# % gdatag, pv, rw, XSP3.HDF5_NDFileHDF5, NumExtraDims, Number of extra dimensions [0..2]
record(longout, "$(XSPRESS3_PREFIX,undefined):HDF5:NumExtraDims")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(XSP3.HDF5,0)HDF5_nExtraDims")
    field(PINI, "YES")
}

# % gdatag, pv, ro, XSP3.HDF5_NDFileHDF5, NumExtraDims_RBV, Readback number of extra dimensions
record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:NumExtraDims_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(XSP3.HDF5,0)HDF5_nExtraDims")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
}

# % gdatag, pv, rw, XSP3.HDF5_NDFileHDF5, ExtraDimSizeN, Size of extra dimension N (no. of frames per point)
record(longout, "$(XSPRESS3_PREFIX,undefined):HDF5:ExtraDimSizeN")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(XSP3.HDF5,0)HDF5_extraDimSizeN")
    field(PINI, "YES")
}

# % gdatag, pv, ro, XSP3.HDF5_NDFileHDF5, ExtraDimSizeN_RBV, Readback size of extra dimension N (no. of frames per point)
record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:ExtraDimSizeN_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(XSP3.HDF5,0)HDF5_extraDimSizeN")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):HDF5:ExtraDimNameN_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(XSP3.HDF5,0)HDF5_extraDimNameN")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
}

# % gdatag, pv, rw, XSP3.HDF5_NDFileHDF5, ExtraDimSizeX, Size of extra dimension X
record(longout, "$(XSPRESS3_PREFIX,undefined):HDF5:ExtraDimSizeX")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(XSP3.HDF5,0)HDF5_extraDimSizeX")
    field(PINI, "YES")
}

# % gdatag, pv, ro, XSP3.HDF5_NDFileHDF5, ExtraDimSizeX_RBV, Readback size of extra dimension X
record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:ExtraDimSizeX_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(XSP3.HDF5,0)HDF5_extraDimSizeX")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):HDF5:ExtraDimNameX_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(XSP3.HDF5,0)HDF5_extraDimNameX")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
}

# % gdatag, pv, rw, XSP3.HDF5_NDFileHDF5, ExtraDimSizeY, Size of extra dimension Y
record(longout, "$(XSPRESS3_PREFIX,undefined):HDF5:ExtraDimSizeY")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(XSP3.HDF5,0)HDF5_extraDimSizeY")
    field(PINI, "YES")
}

# % gdatag, pv, ro, XSP3.HDF5_NDFileHDF5, ExtraDimSizeY_RBV, Readback size of extra dimension Y
record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:ExtraDimSizeY_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(XSP3.HDF5,0)HDF5_extraDimSizeY")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):HDF5:ExtraDimNameY_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(XSP3.HDF5,0)HDF5_extraDimNameY")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):HDF5:StoreAttr")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(XSP3.HDF5,0)HDF5_storeAttributes")
    field(PINI, "NO")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):HDF5:StoreAttr_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(XSP3.HDF5,0)HDF5_storeAttributes")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(bo, "$(XSPRESS3_PREFIX,undefined):HDF5:StorePerform")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(XSP3.HDF5,0)HDF5_storePerformance")
    field(PINI, "NO")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(bi, "$(XSPRESS3_PREFIX,undefined):HDF5:StorePerform_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(XSP3.HDF5,0)HDF5_storePerformance")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

# % gdatag, pv, ro, XSP3.HDF5_NDFileHDF5, runtime, Total runtime from first frame to file closed
record(ai, "$(XSPRESS3_PREFIX,undefined):HDF5:RunTime")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.HDF5,0)HDF5_totalRuntime")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
    field(PREC, "3")
    field(EGU,  "s")
}

# % gdatag, pv, ro, XSP3.HDF5_NDFileHDF5, IOSpeed, Overall IO speed from first frame to file closed
record(ai, "$(XSPRESS3_PREFIX,undefined):HDF5:IOSpeed")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(XSP3.HDF5,0)HDF5_totalIoSpeed")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
    field(PREC, "1")
    field(EGU,  "Mbit/s")
}

# % gdatag, pv, rw, XSP3.HDF5_NDFileHDF5, NumFramesFlush, Flush to file every Nth frame
record(longout, "$(XSPRESS3_PREFIX,undefined):HDF5:NumFramesFlush")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(XSP3.HDF5,0)HDF5_flushNthFrame")
    field(PINI, "NO")
}

# % gdatag, pv, rw, XSP3.HDF5_NDFileHDF5, NumFramesFlush_RBV, Readback the number of frames between file flush
record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:NumFramesFlush_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(XSP3.HDF5,0)HDF5_flushNthFrame")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
}

# % gdatag, mbbinary, rw, XSP3.HDF5_NDFileHDF5, Compression, Select or switch off compression filter
record(mbbo, "$(XSPRESS3_PREFIX,undefined):HDF5:Compression")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(XSP3.HDF5,0)HDF5_compressionType")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "N-bit")
    field(ONVL, "1")
    field(TWST, "szip")
    field(TWVL, "2")
    field(THST, "zlib")
    field(THVL, "3")
}

# % gdatag, mbbinary, ro, XSP3.HDF5_NDFileHDF5, Compression_RBV, Readback selected compression filter
record(mbbi, "$(XSPRESS3_PREFIX,undefined):HDF5:Compression_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(XSP3.HDF5,0)HDF5_compressionType")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "nbit")
    field(ONVL, "1")
    field(TWST, "szip")
    field(TWVL, "2")
    field(THST, "zlib")
    field(THVL, "3")
}

# % gdatag, pv, rw, XSP3.HDF5_NDFileHDF5, NumBitPrecision, N-bit compression filter: number of data bits per pixel
record(longout, "$(XSPRESS3_PREFIX,undefined):HDF5:NumDataBits")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(XSP3.HDF5,0)HDF5_nbitsPrecision")
    field(PINI, "NO")
    field(EGU,  "bit")
}

# % gdatag, pv, ro, XSP3.HDF5_NDFileHDF5, NumBitPrecision_RBV, Readback N-bit compression filter: number of data bits per pixel
record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:NumDataBits_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(XSP3.HDF5,0)HDF5_nbitsPrecision")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
    field(EGU,  "bit")
}

# % gdatag, pv, rw, XSP3.HDF5_NDFileHDF5, NumBitOffset, N-bit compression filter: dataword bit-offset in pixel
record(longout, "$(XSPRESS3_PREFIX,undefined):HDF5:DataBitsOffset")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(XSP3.HDF5,0)HDF5_nbitsOffset")
    field(PINI, "NO")
    field(EGU,  "bit")
}

# % gdatag, pv, ro, XSP3.HDF5_NDFileHDF5, NumBitOffset_RBV, Readback N-bit compression filter: dataword bit-offset in pixel
record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:DataBitsOffset_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(XSP3.HDF5,0)HDF5_nbitsOffset")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
    field(EGU,  "bit")
}

# % gdatag, pv, rw, XSP3.HDF5_NDFileHDF5, szipNumPixels, szip compression filter: number of pixels in filter
record(longout, "$(XSPRESS3_PREFIX,undefined):HDF5:SZipNumPixels")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(XSP3.HDF5,0)HDF5_szipNumPixels")
    field(PINI, "NO")
    field(EGU,  "bit")
}

# % gdatag, pv, ro, XSP3.HDF5_NDFileHDF5, szipNumPixels_RBV, Readback szip compression filter: number of pixels in filter
record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:SZipNumPixels_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(XSP3.HDF5,0)HDF5_szipNumPixels")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
    field(EGU,  "bit")
}

# % gdatag, pv, rw, XSP3.HDF5_NDFileHDF5, ZCompressLevel, zlib compression filter: compression level
record(longout, "$(XSPRESS3_PREFIX,undefined):HDF5:ZLevel")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(XSP3.HDF5,0)HDF5_zCompressLevel")
    field(PINI, "NO")
}

# % gdatag, pv, ro, XSP3.HDF5_NDFileHDF5, ZCompressLevel_RBV, Readback zlib compression filter: compression level
record(longin, "$(XSPRESS3_PREFIX,undefined):HDF5:ZLevel_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(XSP3.HDF5,0)HDF5_zCompressLevel")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
}
###########################################################
# This template contains some high level records that tie
# together the various areaDetector plugins needed for the
# xspress3. 
#
# Macros:
# % macro,  P,           Device prefix
# % macro,  R,           Device suffix
# % macro,  HDF,         HDF plugin record prefix
# % macro,  PROC,        Processing plugin record prefix
#
###########################################################


#Add a FLNK to the NumImages record, to automatically set the HDF plugin NumCapture
record(longout, "$(XSPRESS3_PREFIX,undefined):NumImages")
{
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):HDF5:NumCapture_CALC.PROC")
}
record(calcout, "$(XSPRESS3_PREFIX,undefined):HDF5:NumCapture_CALC")
{
   field(INPA, "$(XSPRESS3_PREFIX,undefined):NumImages.VAL")
   field(OUT, "$(XSPRESS3_PREFIX,undefined):HDF5:NumCapture.VAL")
   field(CALC, "A")
   field(OOPT, "Every Time")
   field(DOPT, "Use CALC")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):HDF5:NumCapture.PROC")
}


#Turn off the default alarm state of the HDF plugin Capture_RBV PV
record(bi, $(XSPRESS3_PREFIX,undefined):HDF5:Capture_RBV)
{
   field(OSV, "NO_ALARM")
}

#############################################################
# The following records and templates are responsible for
# reseting and erasing data from the plugins, when the 
# user triggers a top level ERASE.
#############################################################

#Trigger an erase of the PROC plugin data.
record(bo,"$(XSPRESS3_PREFIX,undefined):ERASE") 
{
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ERASE_PROC_ResetFilter.PROC")
}
record(bo, "$(XSPRESS3_PREFIX,undefined):ERASE_PROC_ResetFilter")
{
   field(VAL, "1")
   field(OUT, "$(XSPRESS3_PREFIX,undefined):PROC:ResetFilter.PROC")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ERASE_ArrayCounters") 
}
record(dfanout, "$(XSPRESS3_PREFIX,undefined):ERASE_ArrayCounters")
{
   field(VAL, "0")
   field(OUTA, "$(XSPRESS3_PREFIX,undefined):PROC:ArrayCounter PP")
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):ERASE_AttrReset")
}

#On an erase, do a reset on the NDAttribute plugins. This has MDEL of -1, so channel access updates
#are triggered every time, and there is a bo record for every channel that monitors its value.
record(dfanout, "$(XSPRESS3_PREFIX,undefined):ERASE_AttrReset")
{
   field(VAL, "1")
   field(MDEL, "-1" )
}



#########################################################################
# Records to update the arrays in the NDAttribute plugins.
# This is needed for high data rate collections at the end of a scan
# due to the fact that the NDAttribute pugins only update the arrays
# at a slow rate and may miss some points at the end of a scan.
#########################################################################

#Trigger an update of the NDAttribute arrays
record(bo,"$(XSPRESS3_PREFIX,undefined):UPDATE") 
{
   field(FLNK, "$(XSPRESS3_PREFIX,undefined):UPDATE_AttrUpdate.PROC")
}

#On an erase, do a reset on the NDAttribute plugins. This has MDEL of 0, so channel access updates
#are triggered every time, and there is a bo record for every channel that monitors its value.
record(dfanout, "$(XSPRESS3_PREFIX,undefined):UPDATE_AttrUpdate")
{
   field(VAL, "1")
   field(MDEL, "-1" )
}
# Used by Channel Access Security to determine access to this IOC.
record(mbbo, "$(XSPRESS3_PREFIX,undefined):ACCESS")
{
  field(DESC, "$(XSPRESS3_PREFIX,undefined) Acc Mode")
  field(PINI, "YES")
  field(ZRST, "Running")
  field(ZRSV, "NO_ALARM")
  field(ONST, "Maintenance")
  field(ONSV, "MINOR")
  field(TWST, "Test")
  field(TWSV, "MINOR")
  field(THST, "OFFLINE")
  field(THSV, "MAJOR")
  info(autosaveFields, "VAL")
}
record(stringin, "$(XSPRESS3_PREFIX,undefined):STARTTOD")
{
    field(DESC, "Time and date of startup")
    field(DTYP, "Soft Timestamp")
    field(PINI, "YES")
    field(INP, "@$(TODFORMAT,undefined)")
}
record(stringin, "$(XSPRESS3_PREFIX,undefined):TOD")
{
    field(DESC, "Current time and date")
    field(DTYP, "Soft Timestamp")
    field(SCAN, "1 second")
    field(INP, "@$(TODFORMAT,undefined)")
}
record(calcout, "$(XSPRESS3_PREFIX,undefined):HEARTBEAT")
{
    field(DESC, "1 Hz counter since startup")
    field(CALC, "(A<2147483647)?A+1:1")
    field(SCAN, "1 second")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):HEARTBEAT")
}
# if autosave is working, START_CNT creates a running count of 
# number of times the IOC was started.
record(calcout, "$(XSPRESS3_PREFIX,undefined):START_CNT")
{
    field(DESC, "Increments at startup")
    field(CALC, "A+1")
    field(PINI, "YES")
    field(INPA, "$(XSPRESS3_PREFIX,undefined):START_CNT")
    info(autosaveFields_pass0, "VAL")
}
#
# Using an existing internal set of subroutines, this
# PV updates the Access Security mechanism dynamically.
# The .acf file is re-read.
#
record( sub, "$(XSPRESS3_PREFIX,undefined):READACF")
{
    field( DESC, "$(XSPRESS3_PREFIX,undefined) ACF Update")
    field( INAM, "asSubInit")
    field( SNAM, "asSubProcess")
    field( BRSV, "INVALID")
}
record(sub, "$(XSPRESS3_PREFIX,undefined):SYSRESET")
{
    alias("$(XSPRESS3_PREFIX,undefined):SysReset")
    field(DESC, "IOC Restart" )
    field(SNAM, "rebootProc")
    field(BRSV,"INVALID")
    field(L,"1")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):CA_CLNT_CNT") {
  field(DESC, "Number of CA Clients")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@ca_clients")
  field(HOPR, "200")
  field(HIHI, "175")
  field(HIGH, "100")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):CA_CONN_CNT") {
  field(DESC, "Number of CA Connections")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@ca_connections")
  field(HOPR, "5000")
  field(HIHI, "4500")
  field(HIGH, "4000")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):RECORD_CNT") {
  field(DESC, "Number of Records")
  field(PINI, "YES")
  field(DTYP, "IOC stats")
  field(INP, "@records")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):FD_MAX") {
  field(DESC, "Max File Descriptors")
  field(PINI, "YES")
  field(DTYP, "IOC stats")
  field(INP, "@maxfd")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):FD_CNT") {
  field(DESC, "Allocated File Descriptors")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(FLNK, "$(XSPRESS3_PREFIX,undefined):FD_FREE  PP MS")
  field(INP, "@fd")
}

record(calc, "$(XSPRESS3_PREFIX,undefined):FD_FREE") {
  field(DESC, "Available FDs")
  field(CALC, "B>0?B-A:C")
  field(INPA, "$(XSPRESS3_PREFIX,undefined):FD_CNT  NPP MS")
  field(INPB, "$(XSPRESS3_PREFIX,undefined):FD_MAX  NPP MS")
  field(INPC, "1000")
  field(HOPR, "150")
  field(LOLO, "5")
  field(LOW, "20")
  field(LLSV, "MAJOR")
  field(LSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR LOW LOLO LSV LLSV")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):SYS_CPU_LOAD") {
  field(DESC, "System CPU Load")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@sys_cpuload")
  field(EGU, "%")
  field(PREC, "1")
  field(HOPR, "100")
  field(HIHI, "80")
  field(HIGH, "70")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):IOC_CPU_LOAD") {
  alias("$(XSPRESS3_PREFIX,undefined):LOAD")
  field(DESC, "IOC CPU Load")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@ioc_cpuload")
  field(EGU, "%")
  field(PREC, "1")
  field(HOPR, "100")
  field(HIHI, "80")
  field(HIGH, "70")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):CPU_CNT") {
  field(DESC, "Number of CPUs")
  field(DTYP, "IOC stats")
  field(INP, "@no_of_cpus")
  field(PINI, "YES")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):SUSP_TASK_CNT") {
  field(DESC, "Number Suspended Tasks")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@suspended_tasks")
  field(HIHI, "1")
  field(HHSV, "MAJOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):MEM_USED") {
  field(DESC, "Allocated Memory")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@allocated_bytes")
  field(EGU, "byte")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):MEM_FREE") {
  field(DESC, "Free Memory")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@free_bytes")
  field(EGU, "byte")
  field(LLSV, "MAJOR")
  field(LSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR LOW LOLO LSV LLSV")
}

record(ai, "$(XSPRESS3_PREFIX,undefined):MEM_MAX") {
  field(DESC, "Maximum Memory")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@total_bytes")
  field(EGU, "byte")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):CA_UPD_TIME") {
  field(DESC, "CA Check Update Period")
  field(DTYP, "IOC stats")
  field(OUT, "@ca_scan_rate")
  field(EGU, "sec")
  field(DRVH, "60")
  field(DRVL, "1")
  field(HOPR, "60")
  field(VAL, "15")
  field(PINI, "YES")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):FD_UPD_TIME") {
  field(DESC, "FD Check Update Period")
  field(DTYP, "IOC stats")
  field(OUT, "@fd_scan_rate")
  field(EGU, "sec")
  field(DRVH, "60")
  field(DRVL, "1")
  field(HOPR, "60")
  field(VAL, "20")
  field(PINI, "YES")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):LOAD_UPD_TIME") {
  field(DESC, "CPU Check Update Period")
  field(DTYP, "IOC stats")
  field(OUT, "@cpu_scan_rate")
  field(EGU, "sec")
  field(DRVH, "60")
  field(DRVL, "1")
  field(HOPR, "60")
  field(VAL, "10")
  field(PINI, "YES")
}

record(ao, "$(XSPRESS3_PREFIX,undefined):MEM_UPD_TIME") {
  field(DESC, "Memory Check Update Period")
  field(DTYP, "IOC stats")
  field(OUT, "@memory_scan_rate")
  field(EGU, "sec")
  field(DRVH, "60")
  field(DRVL, "1")
  field(HOPR, "60")
  field(VAL, "10")
  field(PINI, "YES")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ST_SCRIPT1") {
  field(DESC, "Startup Script Part1")
  field(DTYP, "IOC stats")
  field(INP, "@startup_script_1")
  field(PINI, "YES")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ST_SCRIPT2") {
  field(DESC, "Startup Script Part2")
  field(DTYP, "IOC stats")
  field(INP, "@startup_script_2")
  field(PINI, "YES")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):KERNEL_VERS") {
  field(DESC, "Kernel Version")
  field(DTYP, "IOC stats")
  field(INP, "@kernel_ver")
  field(PINI, "YES")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):EPICS_VERS") {
  field(DESC, "EPICS Version")
  field(DTYP, "IOC stats")
  field(INP, "@epics_ver")
  field(PINI, "YES")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):HOSTNAME") {
  field(DESC, "Host Name")
  field(DTYP, "IOC stats")
  field(INP, "@hostname")
  field(PINI, "YES")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):APP_DIR1") {
  field(DESC, "Application Directory Part 1")
  field(DTYP, "IOC stats")
  field(INP, "@pwd1")
  field(PINI, "YES")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):APP_DIR2") {
  field(DESC, "Application Directory Part 2")
  field(DTYP, "IOC stats")
  field(INP, "@pwd2")
  field(PINI, "YES")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):UPTIME") {
  field(DESC, "Elapsed Time since Start")
  field(SCAN, "1 second")
  field(DTYP, "IOC stats")
  field(INP, "@up_time")
  field(PINI, "YES")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):ENGINEER") {
  field(DESC, "Engineer")
  field(DTYP, "IOC stats")
  field(INP, "@engineer")
  field(PINI, "YES")
}

record(stringin, "$(XSPRESS3_PREFIX,undefined):LOCATION") {
  field(DESC, "Location")
  field(DTYP, "IOC stats")
  field(INP, "@location")
  field(PINI, "YES")
}

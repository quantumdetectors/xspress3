###########################################################
# This template contains some high level records that tie
# together the various areaDetector plugins needed for the
# xspress3. 
#
# Macros:
# % macro,  P,           Device prefix
# % macro,  R,           Device suffix
# % macro,  HDF,         HDF plugin record prefix
# % macro,  PROC,        Processing plugin record prefix
#
###########################################################


#Add a FLNK to the NumImages record, to automatically set the HDF plugin NumCapture
record(longout, "$(P)$(R)NumImages")
{
   field(FLNK, "$(HDF)NumCapture_CALC2.PROC")
}
record(longin, "$(P)$(R)NUM_SUBFRAMES_RBV")
{
   field(FLNK, "$(HDF)NumCapture_CALC2.PROC")
}

# EPICS does not respect field update ordering
# Updating NUM_SUBFRAMES and immediately after NumImages results in a stale value 
# for NumImages
# Use an intermediate CALC with a delay
record(calcout, "$(HDF)NumCapture_CALC2")
{
   field(CALC, "1")
   field(OOPT, "Every Time")
   field(ODLY, ".1")
   field(DOPT, "Use CALC")
   field(FLNK, "$(HDF)NumCapture_CALC.PROC")
}

record(calcout, "$(HDF)NumCapture_CALC")
{
   field(INPA, "$(P)$(R)NumImages_RBV")
   field(INPB, "$(P)$(R)NUM_SUBFRAMES_RBV")
   field(OUT, "$(HDF)NumCapture.VAL")
   field(CALC, "A*B")
   field(OOPT, "Every Time")
   field(DOPT, "Use CALC")
   field(FLNK, "$(HDF)NumCapture.PROC")
}

#Turn off the default alarm state of the HDF plugin Capture_RBV PV
record(bi, $(HDF)Capture_RBV)
{
   field(OSV, "NO_ALARM")
}

#############################################################
# The following records and templates are responsible for
# reseting and erasing data from the plugins, when the 
# user triggers a top level ERASE.
#############################################################

#Trigger an erase of the PROC plugin data.
record(bo,"$(P)$(R)ERASE") 
{
   field(FLNK, "$(P)$(R)ERASE_PROC_ResetFilter.PROC")
}
record(bo, "$(P)$(R)ERASE_PROC_ResetFilter")
{
   field(VAL, "1")
   field(OUT, "$(PROC)ResetFilter.PROC")
   field(FLNK, "$(P)$(R)ERASE_ArrayCounters") 
}
record(dfanout, "$(P)$(R)ERASE_ArrayCounters")
{
   field(VAL, "0")
   field(OUTA, "$(PROC)ArrayCounter PP")
   field(FLNK, "$(P)$(R)ERASE_AttrReset")
}

#On an erase, do a reset on the NDAttribute plugins. This has MDEL of -1, so channel access updates
#are triggered every time, and there is a bo record for every channel that monitors its value.
record(dfanout, "$(P)$(R)ERASE_AttrReset")
{
   field(VAL, "1")
   field(MDEL, "-1" )
}



#########################################################################
# Records to update the arrays in the NDAttribute plugins.
# This is needed for high data rate collections at the end of a scan
# due to the fact that the NDAttribute pugins only update the arrays
# at a slow rate and may miss some points at the end of a scan.
#########################################################################

#Trigger an update of the NDAttribute arrays
record(bo,"$(P)$(R)UPDATE") 
{
   field(FLNK, "$(P)$(R)UPDATE_AttrUpdate.PROC")
}

#On an erase, do a reset on the NDAttribute plugins. This has MDEL of 0, so channel access updates
#are triggered every time, and there is a bo record for every channel that monitors its value.
record(dfanout, "$(P)$(R)UPDATE_AttrUpdate")
{
   field(VAL, "1")
   field(MDEL, "-1" )
}
